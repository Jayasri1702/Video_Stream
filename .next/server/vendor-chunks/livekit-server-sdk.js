"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/livekit-server-sdk";
exports.ids = ["vendor-chunks/livekit-server-sdk"];
exports.modules = {

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/AccessToken.js":
/*!*************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/AccessToken.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TokenVerifier = exports.AccessToken = void 0;\nconst jwt = __importStar(__webpack_require__(/*! jsonwebtoken */ \"(ssr)/./node_modules/jsonwebtoken/index.js\"));\n// 6 hours\nconst defaultTTL = 6 * 60 * 60;\nclass AccessToken {\n    /**\n     * Creates a new AccessToken\n     * @param apiKey API Key, can be set in env LIVEKIT_API_KEY\n     * @param apiSecret Secret, can be set in env LIVEKIT_API_SECRET\n     */ constructor(apiKey, apiSecret, options){\n        if (!apiKey) {\n            apiKey = process.env.LIVEKIT_API_KEY;\n        }\n        if (!apiSecret) {\n            apiSecret = process.env.LIVEKIT_API_SECRET;\n        }\n        if (!apiKey || !apiSecret) {\n            throw Error(\"api-key and api-secret must be set\");\n        } else if (typeof document !== \"undefined\") {\n            // check against document rather than window because deno provides window\n            console.error(\"You should not include your API secret in your web client bundle.\\n\\n\" + \"Your web client should request a token from your backend server which should then use \" + \"the API secret to generate a token. See https://docs.livekit.io/client/connect/\");\n        }\n        this.apiKey = apiKey;\n        this.apiSecret = apiSecret;\n        this.grants = {};\n        this.identity = options === null || options === void 0 ? void 0 : options.identity;\n        this.ttl = (options === null || options === void 0 ? void 0 : options.ttl) || defaultTTL;\n        if (options === null || options === void 0 ? void 0 : options.metadata) {\n            this.metadata = options.metadata;\n        }\n        if (options === null || options === void 0 ? void 0 : options.name) {\n            this.name = options.name;\n        }\n    }\n    /**\n     * Adds a video grant to this token.\n     * @param grant\n     */ addGrant(grant) {\n        this.grants.video = grant;\n    }\n    /**\n     * Set metadata to be passed to the Participant, used only when joining the room\n     */ set metadata(md) {\n        this.grants.metadata = md;\n    }\n    set name(name) {\n        this.grants.name = name;\n    }\n    get sha256() {\n        return this.grants.sha256;\n    }\n    set sha256(sha) {\n        this.grants.sha256 = sha;\n    }\n    /**\n     * @returns JWT encoded token\n     */ toJwt() {\n        // TODO: check for video grant validity\n        var _a;\n        const opts = {\n            issuer: this.apiKey,\n            expiresIn: this.ttl,\n            notBefore: 0\n        };\n        if (this.identity) {\n            opts.subject = this.identity;\n            opts.jwtid = this.identity;\n        } else if ((_a = this.grants.video) === null || _a === void 0 ? void 0 : _a.roomJoin) {\n            throw Error(\"identity is required for join but not set\");\n        }\n        return jwt.sign(this.grants, this.apiSecret, opts);\n    }\n}\nexports.AccessToken = AccessToken;\nclass TokenVerifier {\n    constructor(apiKey, apiSecret){\n        this.apiKey = apiKey;\n        this.apiSecret = apiSecret;\n    }\n    verify(token) {\n        const decoded = jwt.verify(token, this.apiSecret, {\n            issuer: this.apiKey\n        });\n        if (!decoded) {\n            throw Error(\"invalid token\");\n        }\n        return decoded;\n    }\n}\nexports.TokenVerifier = TokenVerifier; //# sourceMappingURL=AccessToken.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/AccessToken.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/EgressClient.js":
/*!**************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/EgressClient.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.EgressClient = void 0;\nconst livekit_egress_1 = __webpack_require__(/*! ./proto/livekit_egress */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js\");\nconst ServiceBase_1 = __importDefault(__webpack_require__(/*! ./ServiceBase */ \"(ssr)/./node_modules/livekit-server-sdk/dist/ServiceBase.js\"));\nconst TwirpRPC_1 = __webpack_require__(/*! ./TwirpRPC */ \"(ssr)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js\");\nconst svc = \"Egress\";\n/**\n * Client to access Egress APIs\n */ class EgressClient extends ServiceBase_1.default {\n    /**\n     * @param host hostname including protocol. i.e. 'https://cluster.livekit.io'\n     * @param apiKey API Key, can be set in env var LIVEKIT_API_KEY\n     * @param secret API Secret, can be set in env var LIVEKIT_API_SECRET\n     */ constructor(host, apiKey, secret){\n        super(apiKey, secret);\n        this.rpc = new TwirpRPC_1.TwirpRpc(host, TwirpRPC_1.livekitPackage);\n    }\n    startRoomCompositeEgress(roomName, output, optsOrLayout, options, audioOnly, videoOnly, customBaseUrl) {\n        return __awaiter(this, void 0, void 0, function*() {\n            let layout;\n            if (optsOrLayout !== undefined) {\n                if (typeof optsOrLayout === \"string\") {\n                    layout = optsOrLayout;\n                } else {\n                    const opts = optsOrLayout;\n                    layout = opts.layout;\n                    options = opts.encodingOptions;\n                    audioOnly = opts.audioOnly;\n                    videoOnly = opts.videoOnly;\n                    customBaseUrl = opts.customBaseUrl;\n                }\n            }\n            layout !== null && layout !== void 0 ? layout : layout = \"\";\n            audioOnly !== null && audioOnly !== void 0 ? audioOnly : audioOnly = false;\n            videoOnly !== null && videoOnly !== void 0 ? videoOnly : videoOnly = false;\n            customBaseUrl !== null && customBaseUrl !== void 0 ? customBaseUrl : customBaseUrl = \"\";\n            const { file, stream, segments, preset, advanced, fileOutputs, streamOutputs, segmentOutputs } = this.getOutputParams(output, options);\n            const req = livekit_egress_1.RoomCompositeEgressRequest.toJSON({\n                roomName,\n                layout,\n                audioOnly,\n                videoOnly,\n                customBaseUrl,\n                file,\n                stream,\n                segments,\n                preset,\n                advanced,\n                fileOutputs,\n                streamOutputs,\n                segmentOutputs\n            });\n            const data = yield this.rpc.request(svc, \"StartRoomCompositeEgress\", req, this.authHeader({\n                roomRecord: true\n            }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * @param url url\n     * @param output file or stream output\n     * @param opts WebOptions\n     */ startWebEgress(url, output, opts) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const audioOnly = (opts === null || opts === void 0 ? void 0 : opts.audioOnly) || false;\n            const videoOnly = (opts === null || opts === void 0 ? void 0 : opts.videoOnly) || false;\n            const awaitStartSignal = (opts === null || opts === void 0 ? void 0 : opts.awaitStartSignal) || false;\n            const { file, stream, segments, preset, advanced, fileOutputs, streamOutputs, segmentOutputs } = this.getOutputParams(output, opts === null || opts === void 0 ? void 0 : opts.encodingOptions);\n            const req = livekit_egress_1.WebEgressRequest.toJSON({\n                url,\n                audioOnly,\n                videoOnly,\n                awaitStartSignal,\n                file,\n                stream,\n                segments,\n                preset,\n                advanced,\n                fileOutputs,\n                streamOutputs,\n                segmentOutputs\n            });\n            const data = yield this.rpc.request(svc, \"StartWebEgress\", req, this.authHeader({\n                roomRecord: true\n            }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * Export a participant's audio and video tracks,\n     *\n     * @param roomName room name\n     * @param output one or more outputs\n     * @param opts ParticipantEgressOptions\n     */ startParticipantEgress(roomName, identity, output, opts) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { preset, advanced, fileOutputs, streamOutputs, segmentOutputs } = this.getOutputParams(output, opts === null || opts === void 0 ? void 0 : opts.encodingOptions);\n            const req = livekit_egress_1.ParticipantEgressRequest.toJSON({\n                roomName,\n                identity,\n                preset,\n                advanced,\n                fileOutputs,\n                streamOutputs,\n                segmentOutputs\n            });\n            const data = yield this.rpc.request(svc, \"StartParticipantEgress\", req, this.authHeader({\n                roomRecord: true\n            }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    startTrackCompositeEgress(roomName, output, optsOrAudioTrackId, videoTrackId, options) {\n        return __awaiter(this, void 0, void 0, function*() {\n            let audioTrackId;\n            if (optsOrAudioTrackId !== undefined) {\n                if (typeof optsOrAudioTrackId === \"string\") {\n                    audioTrackId = optsOrAudioTrackId;\n                } else {\n                    const opts = optsOrAudioTrackId;\n                    audioTrackId = opts.audioTrackId;\n                    videoTrackId = opts.videoTrackId;\n                    options = opts.encodingOptions;\n                }\n            }\n            audioTrackId !== null && audioTrackId !== void 0 ? audioTrackId : audioTrackId = \"\";\n            videoTrackId !== null && videoTrackId !== void 0 ? videoTrackId : videoTrackId = \"\";\n            const { file, stream, segments, preset, advanced, fileOutputs, streamOutputs, segmentOutputs } = this.getOutputParams(output, options);\n            const req = livekit_egress_1.TrackCompositeEgressRequest.toJSON({\n                roomName,\n                audioTrackId,\n                videoTrackId,\n                file,\n                stream,\n                segments,\n                preset,\n                advanced,\n                fileOutputs,\n                streamOutputs,\n                segmentOutputs\n            });\n            const data = yield this.rpc.request(svc, \"StartTrackCompositeEgress\", req, this.authHeader({\n                roomRecord: true\n            }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    isEncodedOutputs(output) {\n        return output.file !== undefined || output.stream !== undefined || output.segments !== undefined;\n    }\n    isEncodedFileOutput(output) {\n        return output.filepath !== undefined || output.fileType !== undefined;\n    }\n    isSegmentedFileOutput(output) {\n        return output.filenamePrefix !== undefined || output.playlistName !== undefined || output.filenameSuffix !== undefined;\n    }\n    isStreamOutput(output) {\n        return output.protocol !== undefined || output.urls !== undefined;\n    }\n    getOutputParams(output, options) {\n        let file;\n        let fileOutputs;\n        let stream;\n        let streamOutputs;\n        let segments;\n        let segmentOutputs;\n        let preset;\n        let advanced;\n        if (this.isEncodedOutputs(output)) {\n            if (output.file !== undefined) {\n                fileOutputs = [\n                    output.file\n                ];\n            }\n            if (output.stream !== undefined) {\n                streamOutputs = [\n                    output.stream\n                ];\n            }\n            if (output.segments !== undefined) {\n                segmentOutputs = [\n                    output.segments\n                ];\n            }\n        } else if (this.isEncodedFileOutput(output)) {\n            file = output;\n            fileOutputs = [\n                file\n            ];\n        } else if (this.isSegmentedFileOutput(output)) {\n            segments = output;\n            segmentOutputs = [\n                segments\n            ];\n        } else if (this.isStreamOutput(output)) {\n            stream = output;\n            streamOutputs = [\n                stream\n            ];\n        }\n        if (options) {\n            if (typeof options === \"number\") {\n                preset = options;\n            } else {\n                advanced = options;\n            }\n        }\n        return {\n            file,\n            stream,\n            segments,\n            preset,\n            advanced,\n            fileOutputs,\n            streamOutputs,\n            segmentOutputs\n        };\n    }\n    /**\n     * @param roomName room name\n     * @param output file or websocket output\n     * @param trackId track Id\n     */ startTrackEgress(roomName, output, trackId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            let file;\n            let websocketUrl;\n            if (typeof output === \"string\") {\n                websocketUrl = output;\n            } else {\n                file = output;\n            }\n            const req = livekit_egress_1.TrackEgressRequest.toJSON({\n                roomName,\n                trackId,\n                file,\n                websocketUrl\n            });\n            const data = yield this.rpc.request(svc, \"StartTrackEgress\", req, this.authHeader({\n                roomRecord: true\n            }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * @param egressId\n     * @param layout\n     */ updateLayout(egressId, layout) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const data = yield this.rpc.request(svc, \"UpdateLayout\", livekit_egress_1.UpdateLayoutRequest.toJSON({\n                egressId,\n                layout\n            }), this.authHeader({\n                roomRecord: true\n            }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * @param egressId\n     * @param addOutputUrls\n     * @param removeOutputUrls\n     */ updateStream(egressId, addOutputUrls, removeOutputUrls) {\n        return __awaiter(this, void 0, void 0, function*() {\n            addOutputUrls !== null && addOutputUrls !== void 0 ? addOutputUrls : addOutputUrls = [];\n            removeOutputUrls !== null && removeOutputUrls !== void 0 ? removeOutputUrls : removeOutputUrls = [];\n            const data = yield this.rpc.request(svc, \"UpdateStream\", livekit_egress_1.UpdateStreamRequest.toJSON({\n                egressId,\n                addOutputUrls,\n                removeOutputUrls\n            }), this.authHeader({\n                roomRecord: true\n            }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * @param roomName list egress for one room only\n     */ listEgress(options) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            let req = {};\n            if (typeof options === \"string\") {\n                req.roomName = options;\n            } else if (options !== undefined) {\n                req = options;\n            }\n            const data = yield this.rpc.request(svc, \"ListEgress\", livekit_egress_1.ListEgressRequest.toJSON(req), this.authHeader({\n                roomRecord: true\n            }));\n            return (_a = livekit_egress_1.ListEgressResponse.fromJSON(data).items) !== null && _a !== void 0 ? _a : [];\n        });\n    }\n    /**\n     * @param egressId\n     */ stopEgress(egressId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const data = yield this.rpc.request(svc, \"StopEgress\", livekit_egress_1.StopEgressRequest.toJSON({\n                egressId\n            }), this.authHeader({\n                roomRecord: true\n            }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n}\nexports.EgressClient = EgressClient; //# sourceMappingURL=EgressClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/EgressClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/IngressClient.js":
/*!***************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/IngressClient.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.IngressClient = void 0;\nconst livekit_ingress_1 = __webpack_require__(/*! ./proto/livekit_ingress */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js\");\nconst ServiceBase_1 = __importDefault(__webpack_require__(/*! ./ServiceBase */ \"(ssr)/./node_modules/livekit-server-sdk/dist/ServiceBase.js\"));\nconst TwirpRPC_1 = __webpack_require__(/*! ./TwirpRPC */ \"(ssr)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js\");\nconst svc = \"Ingress\";\n/**\n * Client to access Ingress APIs\n */ class IngressClient extends ServiceBase_1.default {\n    /**\n     * @param host hostname including protocol. i.e. 'https://cluster.livekit.io'\n     * @param apiKey API Key, can be set in env var LIVEKIT_API_KEY\n     * @param secret API Secret, can be set in env var LIVEKIT_API_SECRET\n     */ constructor(host, apiKey, secret){\n        super(apiKey, secret);\n        this.rpc = new TwirpRPC_1.TwirpRpc(host, TwirpRPC_1.livekitPackage);\n    }\n    /**\n     * @param inputType protocol for the ingress\n     * @param opts CreateIngressOptions\n     */ createIngress(inputType, opts) {\n        return __awaiter(this, void 0, void 0, function*() {\n            let name = \"\";\n            let roomName = \"\";\n            let participantName = \"\";\n            let participantIdentity = \"\";\n            let bypassTranscoding = false;\n            let url = \"\";\n            let audio;\n            let video;\n            if (opts !== undefined) {\n                name = opts.name || \"\";\n                roomName = opts.roomName || \"\";\n                participantName = opts.participantName || \"\";\n                participantIdentity = opts.participantIdentity || \"\";\n                bypassTranscoding = opts.bypassTranscoding || false;\n                url = opts.url || \"\";\n                audio = opts.audio;\n                video = opts.video;\n            }\n            const req = livekit_ingress_1.CreateIngressRequest.toJSON({\n                inputType,\n                name,\n                roomName,\n                participantIdentity,\n                participantName,\n                bypassTranscoding,\n                url,\n                audio,\n                video\n            });\n            const data = yield this.rpc.request(svc, \"CreateIngress\", req, this.authHeader({\n                ingressAdmin: true\n            }));\n            return livekit_ingress_1.IngressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * @param ingressId ID of the ingress to update\n     * @param opts UpdateIngressOptions\n     */ updateIngress(ingressId, opts) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const name = opts.name || \"\";\n            const roomName = opts.roomName || \"\";\n            const participantName = opts.participantName || \"\";\n            const participantIdentity = opts.participantIdentity || \"\";\n            const { audio, video, bypassTranscoding } = opts;\n            const req = livekit_ingress_1.UpdateIngressRequest.toJSON({\n                ingressId,\n                name,\n                roomName,\n                participantIdentity,\n                participantName,\n                bypassTranscoding,\n                audio,\n                video\n            });\n            const data = yield this.rpc.request(svc, \"UpdateIngress\", req, this.authHeader({\n                ingressAdmin: true\n            }));\n            return livekit_ingress_1.IngressInfo.fromJSON(data);\n        });\n    }\n    listIngress(arg) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            let req = {};\n            if (typeof arg === \"string\") {\n                req.roomName = arg;\n            } else if (arg) {\n                req = arg;\n            }\n            const data = yield this.rpc.request(svc, \"ListIngress\", livekit_ingress_1.ListIngressRequest.toJSON(req), this.authHeader({\n                ingressAdmin: true\n            }));\n            return (_a = livekit_ingress_1.ListIngressResponse.fromJSON(data).items) !== null && _a !== void 0 ? _a : [];\n        });\n    }\n    /**\n     * @param ingressId ingress to delete\n     */ deleteIngress(ingressId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const data = yield this.rpc.request(svc, \"DeleteIngress\", livekit_ingress_1.DeleteIngressRequest.toJSON({\n                ingressId\n            }), this.authHeader({\n                ingressAdmin: true\n            }));\n            return livekit_ingress_1.IngressInfo.fromJSON(data);\n        });\n    }\n}\nexports.IngressClient = IngressClient; //# sourceMappingURL=IngressClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/IngressClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/RoomServiceClient.js":
/*!*******************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/RoomServiceClient.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RoomServiceClient = void 0;\nconst livekit_models_1 = __webpack_require__(/*! ./proto/livekit_models */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nconst livekit_room_1 = __webpack_require__(/*! ./proto/livekit_room */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_room.js\");\nconst ServiceBase_1 = __importDefault(__webpack_require__(/*! ./ServiceBase */ \"(ssr)/./node_modules/livekit-server-sdk/dist/ServiceBase.js\"));\nconst TwirpRPC_1 = __webpack_require__(/*! ./TwirpRPC */ \"(ssr)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js\");\nconst svc = \"RoomService\";\n/**\n * Client to access Room APIs\n */ class RoomServiceClient extends ServiceBase_1.default {\n    /**\n     *\n     * @param host hostname including protocol. i.e. 'https://cluster.livekit.io'\n     * @param apiKey API Key, can be set in env var LIVEKIT_API_KEY\n     * @param secret API Secret, can be set in env var LIVEKIT_API_SECRET\n     */ constructor(host, apiKey, secret){\n        super(apiKey, secret);\n        this.rpc = new TwirpRPC_1.TwirpRpc(host, TwirpRPC_1.livekitPackage);\n    }\n    /**\n     * Creates a new room. Explicit room creation is not required, since rooms will\n     * be automatically created when the first participant joins. This method can be\n     * used to customize room settings.\n     * @param options\n     */ createRoom(options) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const data = yield this.rpc.request(svc, \"CreateRoom\", livekit_room_1.CreateRoomRequest.toJSON(livekit_room_1.CreateRoomRequest.fromPartial(options)), this.authHeader({\n                roomCreate: true\n            }));\n            return livekit_models_1.Room.fromJSON(data);\n        });\n    }\n    /**\n     * List active rooms\n     * @param names when undefined or empty, list all rooms.\n     *              otherwise returns rooms with matching names\n     * @returns\n     */ listRooms(names) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            const data = yield this.rpc.request(svc, \"ListRooms\", livekit_room_1.ListRoomsRequest.toJSON({\n                names: names !== null && names !== void 0 ? names : []\n            }), this.authHeader({\n                roomList: true\n            }));\n            const res = livekit_room_1.ListRoomsResponse.fromJSON(data);\n            return (_a = res.rooms) !== null && _a !== void 0 ? _a : [];\n        });\n    }\n    deleteRoom(room) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.rpc.request(svc, \"DeleteRoom\", livekit_room_1.DeleteRoomRequest.toJSON({\n                room\n            }), this.authHeader({\n                roomCreate: true\n            }));\n        });\n    }\n    /**\n     * Update metadata of a room\n     * @param room name of the room\n     * @param metadata the new metadata for the room\n     */ updateRoomMetadata(room, metadata) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const data = yield this.rpc.request(svc, \"UpdateRoomMetadata\", livekit_room_1.UpdateRoomMetadataRequest.toJSON({\n                room,\n                metadata\n            }), this.authHeader({\n                roomAdmin: true,\n                room\n            }));\n            return livekit_models_1.Room.fromJSON(data);\n        });\n    }\n    /**\n     * List participants in a room\n     * @param room name of the room\n     */ listParticipants(room) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            const data = yield this.rpc.request(svc, \"ListParticipants\", livekit_room_1.ListParticipantsRequest.toJSON({\n                room\n            }), this.authHeader({\n                roomAdmin: true,\n                room\n            }));\n            const res = livekit_room_1.ListParticipantsResponse.fromJSON(data);\n            return (_a = res.participants) !== null && _a !== void 0 ? _a : [];\n        });\n    }\n    /**\n     * Get information on a specific participant, including the tracks that participant\n     * has published\n     * @param room name of the room\n     * @param identity identity of the participant to return\n     */ getParticipant(room, identity) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const data = yield this.rpc.request(svc, \"GetParticipant\", livekit_room_1.RoomParticipantIdentity.toJSON({\n                room,\n                identity\n            }), this.authHeader({\n                roomAdmin: true,\n                room\n            }));\n            return livekit_models_1.ParticipantInfo.fromJSON(data);\n        });\n    }\n    /**\n     * Removes a participant in the room. This will disconnect the participant\n     * and will emit a Disconnected event for that participant.\n     * Even after being removed, the participant can still re-join the room.\n     * @param room\n     * @param identity\n     */ removeParticipant(room, identity) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.rpc.request(svc, \"RemoveParticipant\", livekit_room_1.RoomParticipantIdentity.toJSON({\n                room,\n                identity\n            }), this.authHeader({\n                roomAdmin: true,\n                room\n            }));\n        });\n    }\n    /**\n     * Mutes a track that the participant has published.\n     * @param room\n     * @param identity\n     * @param trackSid sid of the track to be muted\n     * @param muted true to mute, false to unmute\n     */ mutePublishedTrack(room, identity, trackSid, muted) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const req = livekit_room_1.MuteRoomTrackRequest.toJSON({\n                room,\n                identity,\n                trackSid,\n                muted\n            });\n            const data = yield this.rpc.request(svc, \"MutePublishedTrack\", req, this.authHeader({\n                roomAdmin: true,\n                room\n            }));\n            const res = livekit_room_1.MuteRoomTrackResponse.fromJSON(data);\n            return res.track;\n        });\n    }\n    /**\n     * Updates a participant's metadata or permissions\n     * @param room\n     * @param identity\n     * @param metadata optional, metadata to update\n     * @param permission optional, new permissions to assign to participant\n     * @param name optional, new name for participant\n     */ updateParticipant(room, identity, metadata, permission, name) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const req = {\n                room,\n                identity,\n                metadata: metadata || \"\",\n                name: name || \"\"\n            };\n            if (permission) {\n                req.permission = livekit_models_1.ParticipantPermission.fromPartial(permission);\n            }\n            const data = yield this.rpc.request(svc, \"UpdateParticipant\", livekit_room_1.UpdateParticipantRequest.toJSON(req), this.authHeader({\n                roomAdmin: true,\n                room\n            }));\n            return livekit_models_1.ParticipantInfo.fromJSON(data);\n        });\n    }\n    /**\n     * Updates a participant's subscription to tracks\n     * @param room\n     * @param identity\n     * @param trackSids\n     * @param subscribe true to subscribe, false to unsubscribe\n     */ updateSubscriptions(room, identity, trackSids, subscribe) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const req = livekit_room_1.UpdateSubscriptionsRequest.toJSON({\n                room,\n                identity,\n                trackSids,\n                subscribe,\n                participantTracks: []\n            });\n            yield this.rpc.request(svc, \"UpdateSubscriptions\", req, this.authHeader({\n                roomAdmin: true,\n                room\n            }));\n        });\n    }\n    sendData(room, data, kind, options = {}) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const destinationSids = Array.isArray(options) ? options : options.destinationSids;\n            const topic = Array.isArray(options) ? undefined : options.topic;\n            const req = {\n                room,\n                data,\n                kind,\n                destinationSids: destinationSids !== null && destinationSids !== void 0 ? destinationSids : [],\n                topic\n            };\n            if (!Array.isArray(options) && options.destinationIdentities) {\n                req.destinationIdentities = options.destinationIdentities;\n            }\n            yield this.rpc.request(svc, \"SendData\", livekit_room_1.SendDataRequest.toJSON(req), this.authHeader({\n                roomAdmin: true,\n                room\n            }));\n        });\n    }\n}\nexports.RoomServiceClient = RoomServiceClient; //# sourceMappingURL=RoomServiceClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/RoomServiceClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/ServiceBase.js":
/*!*************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/ServiceBase.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst AccessToken_1 = __webpack_require__(/*! ./AccessToken */ \"(ssr)/./node_modules/livekit-server-sdk/dist/AccessToken.js\");\n/**\n * Utilities to handle authentication\n */ class ServiceBase {\n    /**\n     * @param apiKey API Key.\n     * @param secret API Secret.\n     * @param ttl token TTL\n     */ constructor(apiKey, secret, ttl){\n        this.apiKey = apiKey;\n        this.secret = secret;\n        this.ttl = ttl || \"10m\";\n    }\n    authHeader(grant) {\n        const at = new AccessToken_1.AccessToken(this.apiKey, this.secret, {\n            ttl: this.ttl\n        });\n        at.addGrant(grant);\n        return {\n            Authorization: `Bearer ${at.toJwt()}`\n        };\n    }\n}\nexports[\"default\"] = ServiceBase; //# sourceMappingURL=ServiceBase.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvU2VydmljZUJhc2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsZ0JBQWdCQyxtQkFBT0EsQ0FBQyxrRkFBZTtBQUM3Qzs7Q0FFQyxHQUNELE1BQU1DO0lBQ0Y7Ozs7S0FJQyxHQUNEQyxZQUFZQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsR0FBRyxDQUFFO1FBQzdCLElBQUksQ0FBQ0YsTUFBTSxHQUFHQTtRQUNkLElBQUksQ0FBQ0MsTUFBTSxHQUFHQTtRQUNkLElBQUksQ0FBQ0MsR0FBRyxHQUFHQSxPQUFPO0lBQ3RCO0lBQ0FDLFdBQVdDLEtBQUssRUFBRTtRQUNkLE1BQU1DLEtBQUssSUFBSVQsY0FBY1UsV0FBVyxDQUFDLElBQUksQ0FBQ04sTUFBTSxFQUFFLElBQUksQ0FBQ0MsTUFBTSxFQUFFO1lBQUVDLEtBQUssSUFBSSxDQUFDQSxHQUFHO1FBQUM7UUFDbkZHLEdBQUdFLFFBQVEsQ0FBQ0g7UUFDWixPQUFPO1lBQ0hJLGVBQWUsQ0FBQyxPQUFPLEVBQUVILEdBQUdJLEtBQUssR0FBRyxDQUFDO1FBQ3pDO0lBQ0o7QUFDSjtBQUNBZixrQkFBZSxHQUFHSSxhQUNsQix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdHJlYW1pbmctdmlkZW8vLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvU2VydmljZUJhc2UuanM/ZWY3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IEFjY2Vzc1Rva2VuXzEgPSByZXF1aXJlKFwiLi9BY2Nlc3NUb2tlblwiKTtcbi8qKlxuICogVXRpbGl0aWVzIHRvIGhhbmRsZSBhdXRoZW50aWNhdGlvblxuICovXG5jbGFzcyBTZXJ2aWNlQmFzZSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGFwaUtleSBBUEkgS2V5LlxuICAgICAqIEBwYXJhbSBzZWNyZXQgQVBJIFNlY3JldC5cbiAgICAgKiBAcGFyYW0gdHRsIHRva2VuIFRUTFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFwaUtleSwgc2VjcmV0LCB0dGwpIHtcbiAgICAgICAgdGhpcy5hcGlLZXkgPSBhcGlLZXk7XG4gICAgICAgIHRoaXMuc2VjcmV0ID0gc2VjcmV0O1xuICAgICAgICB0aGlzLnR0bCA9IHR0bCB8fCAnMTBtJztcbiAgICB9XG4gICAgYXV0aEhlYWRlcihncmFudCkge1xuICAgICAgICBjb25zdCBhdCA9IG5ldyBBY2Nlc3NUb2tlbl8xLkFjY2Vzc1Rva2VuKHRoaXMuYXBpS2V5LCB0aGlzLnNlY3JldCwgeyB0dGw6IHRoaXMudHRsIH0pO1xuICAgICAgICBhdC5hZGRHcmFudChncmFudCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7YXQudG9Kd3QoKX1gLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFNlcnZpY2VCYXNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2VydmljZUJhc2UuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQWNjZXNzVG9rZW5fMSIsInJlcXVpcmUiLCJTZXJ2aWNlQmFzZSIsImNvbnN0cnVjdG9yIiwiYXBpS2V5Iiwic2VjcmV0IiwidHRsIiwiYXV0aEhlYWRlciIsImdyYW50IiwiYXQiLCJBY2Nlc3NUb2tlbiIsImFkZEdyYW50IiwiQXV0aG9yaXphdGlvbiIsInRvSnd0IiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/ServiceBase.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js":
/*!**********************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/TwirpRPC.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TwirpRpc = exports.livekitPackage = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/dist/node/axios.cjs\"));\nconst camelcase_keys_1 = __importDefault(__webpack_require__(/*! camelcase-keys */ \"(ssr)/./node_modules/livekit-server-sdk/node_modules/camelcase-keys/index.js\"));\n// twirp RPC adapter for client implementation\nconst defaultPrefix = \"/twirp\";\nexports.livekitPackage = \"livekit\";\n/**\n * JSON based Twirp V7 RPC\n */ class TwirpRpc {\n    constructor(host, pkg, prefix){\n        if (host.startsWith(\"ws\")) {\n            host = host.replace(\"ws\", \"http\");\n        }\n        this.host = host;\n        this.pkg = pkg;\n        this.prefix = prefix || defaultPrefix;\n        this.instance = axios_1.default.create({\n            baseURL: host\n        });\n    }\n    request(service, method, data, headers) {\n        return new Promise((resolve, reject)=>{\n            const path = `${this.prefix}/${this.pkg}.${service}/${method}`;\n            this.instance.post(path, data, {\n                headers\n            }).then((res)=>{\n                resolve(camelcase_keys_1.default(res.data, {\n                    deep: true\n                }));\n            }).catch(reject);\n        });\n    }\n}\nexports.TwirpRpc = TwirpRpc; //# sourceMappingURL=TwirpRPC.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvVHdpcnBSUEMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsSUFBSyxJQUFJLElBQUksQ0FBQ0EsZUFBZSxJQUFLLFNBQVVDLEdBQUc7SUFDakUsT0FBTyxPQUFRQSxJQUFJQyxVQUFVLEdBQUlELE1BQU07UUFBRSxXQUFXQTtJQUFJO0FBQzVEO0FBQ0FFLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxnQkFBZ0IsR0FBR0Esc0JBQXNCLEdBQUcsS0FBSztBQUNqRCxNQUFNSSxVQUFVVCxnQkFBZ0JVLG1CQUFPQSxDQUFDLDZEQUFPO0FBQy9DLE1BQU1DLG1CQUFtQlgsZ0JBQWdCVSxtQkFBT0EsQ0FBQyxvR0FBZ0I7QUFDakUsOENBQThDO0FBQzlDLE1BQU1FLGdCQUFnQjtBQUN0QlAsc0JBQXNCLEdBQUc7QUFDekI7O0NBRUMsR0FDRCxNQUFNRTtJQUNGTSxZQUFZQyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsTUFBTSxDQUFFO1FBQzNCLElBQUlGLEtBQUtHLFVBQVUsQ0FBQyxPQUFPO1lBQ3ZCSCxPQUFPQSxLQUFLSSxPQUFPLENBQUMsTUFBTTtRQUM5QjtRQUNBLElBQUksQ0FBQ0osSUFBSSxHQUFHQTtRQUNaLElBQUksQ0FBQ0MsR0FBRyxHQUFHQTtRQUNYLElBQUksQ0FBQ0MsTUFBTSxHQUFHQSxVQUFVSjtRQUN4QixJQUFJLENBQUNPLFFBQVEsR0FBR1YsUUFBUVcsT0FBTyxDQUFDQyxNQUFNLENBQUM7WUFDbkNDLFNBQVNSO1FBQ2I7SUFDSjtJQUNBUyxRQUFRQyxPQUFPLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDcEMsT0FBTyxJQUFJQyxRQUFRLENBQUNDLFNBQVNDO1lBQ3pCLE1BQU1DLE9BQU8sQ0FBQyxFQUFFLElBQUksQ0FBQ2YsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUNELEdBQUcsQ0FBQyxDQUFDLEVBQUVTLFFBQVEsQ0FBQyxFQUFFQyxPQUFPLENBQUM7WUFDOUQsSUFBSSxDQUFDTixRQUFRLENBQ1JhLElBQUksQ0FBQ0QsTUFBTUwsTUFBTTtnQkFBRUM7WUFBUSxHQUMzQk0sSUFBSSxDQUFDLENBQUNDO2dCQUNQTCxRQUFRbEIsaUJBQWlCUyxPQUFPLENBQUNjLElBQUlSLElBQUksRUFBRTtvQkFBRVMsTUFBTTtnQkFBSztZQUM1RCxHQUNLQyxLQUFLLENBQUNOO1FBQ2Y7SUFDSjtBQUNKO0FBQ0F6QixnQkFBZ0IsR0FBR0UsVUFDbkIsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RyZWFtaW5nLXZpZGVvLy4vbm9kZV9tb2R1bGVzL2xpdmVraXQtc2VydmVyLXNkay9kaXN0L1R3aXJwUlBDLmpzP2Q2NTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlR3aXJwUnBjID0gZXhwb3J0cy5saXZla2l0UGFja2FnZSA9IHZvaWQgMDtcbmNvbnN0IGF4aW9zXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImF4aW9zXCIpKTtcbmNvbnN0IGNhbWVsY2FzZV9rZXlzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImNhbWVsY2FzZS1rZXlzXCIpKTtcbi8vIHR3aXJwIFJQQyBhZGFwdGVyIGZvciBjbGllbnQgaW1wbGVtZW50YXRpb25cbmNvbnN0IGRlZmF1bHRQcmVmaXggPSAnL3R3aXJwJztcbmV4cG9ydHMubGl2ZWtpdFBhY2thZ2UgPSAnbGl2ZWtpdCc7XG4vKipcbiAqIEpTT04gYmFzZWQgVHdpcnAgVjcgUlBDXG4gKi9cbmNsYXNzIFR3aXJwUnBjIHtcbiAgICBjb25zdHJ1Y3Rvcihob3N0LCBwa2csIHByZWZpeCkge1xuICAgICAgICBpZiAoaG9zdC5zdGFydHNXaXRoKCd3cycpKSB7XG4gICAgICAgICAgICBob3N0ID0gaG9zdC5yZXBsYWNlKCd3cycsICdodHRwJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ob3N0ID0gaG9zdDtcbiAgICAgICAgdGhpcy5wa2cgPSBwa2c7XG4gICAgICAgIHRoaXMucHJlZml4ID0gcHJlZml4IHx8IGRlZmF1bHRQcmVmaXg7XG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBheGlvc18xLmRlZmF1bHQuY3JlYXRlKHtcbiAgICAgICAgICAgIGJhc2VVUkw6IGhvc3QsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXF1ZXN0KHNlcnZpY2UsIG1ldGhvZCwgZGF0YSwgaGVhZGVycykge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IGAke3RoaXMucHJlZml4fS8ke3RoaXMucGtnfS4ke3NlcnZpY2V9LyR7bWV0aG9kfWA7XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlXG4gICAgICAgICAgICAgICAgLnBvc3QocGF0aCwgZGF0YSwgeyBoZWFkZXJzIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoY2FtZWxjYXNlX2tleXNfMS5kZWZhdWx0KHJlcy5kYXRhLCB7IGRlZXA6IHRydWUgfSkpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5Ud2lycFJwYyA9IFR3aXJwUnBjO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VHdpcnBSUEMuanMubWFwIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlR3aXJwUnBjIiwibGl2ZWtpdFBhY2thZ2UiLCJheGlvc18xIiwicmVxdWlyZSIsImNhbWVsY2FzZV9rZXlzXzEiLCJkZWZhdWx0UHJlZml4IiwiY29uc3RydWN0b3IiLCJob3N0IiwicGtnIiwicHJlZml4Iiwic3RhcnRzV2l0aCIsInJlcGxhY2UiLCJpbnN0YW5jZSIsImRlZmF1bHQiLCJjcmVhdGUiLCJiYXNlVVJMIiwicmVxdWVzdCIsInNlcnZpY2UiLCJtZXRob2QiLCJkYXRhIiwiaGVhZGVycyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicGF0aCIsInBvc3QiLCJ0aGVuIiwicmVzIiwiZGVlcCIsImNhdGNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/WebhookReceiver.js":
/*!*****************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/WebhookReceiver.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WebhookReceiver = exports.authorizeHeader = void 0;\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\nconst AccessToken_1 = __webpack_require__(/*! ./AccessToken */ \"(ssr)/./node_modules/livekit-server-sdk/dist/AccessToken.js\");\nconst livekit_webhook_1 = __webpack_require__(/*! ./proto/livekit_webhook */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_webhook.js\");\nexports.authorizeHeader = \"Authorize\";\nclass WebhookReceiver {\n    constructor(apiKey, apiSecret){\n        this.verifier = new AccessToken_1.TokenVerifier(apiKey, apiSecret);\n    }\n    /**\n     *\n     * @param body string of the posted body\n     * @param authHeader `Authorization` header from the request\n     * @param skipAuth true to skip auth validation\n     * @returns\n     */ receive(body, authHeader, skipAuth = false) {\n        // verify token\n        if (!skipAuth) {\n            if (!authHeader) {\n                throw new Error(\"authorization header is empty\");\n            }\n            const claims = this.verifier.verify(authHeader);\n            // confirm sha\n            const hash = crypto_1.default.createHash(\"sha256\");\n            hash.update(body);\n            if (claims.sha256 !== hash.digest(\"base64\")) {\n                throw new Error(\"sha256 checksum of body does not match\");\n            }\n        }\n        return livekit_webhook_1.WebhookEvent.fromJSON(JSON.parse(body));\n    }\n}\nexports.WebhookReceiver = WebhookReceiver; //# sourceMappingURL=WebhookReceiver.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvV2ViaG9va1JlY2VpdmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLElBQUssSUFBSSxJQUFJLENBQUNBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBRSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsdUJBQXVCLEdBQUdBLHVCQUF1QixHQUFHLEtBQUs7QUFDekQsTUFBTUksV0FBV1QsZ0JBQWdCVSxtQkFBT0EsQ0FBQyxzQkFBUTtBQUNqRCxNQUFNQyxnQkFBZ0JELG1CQUFPQSxDQUFDLGtGQUFlO0FBQzdDLE1BQU1FLG9CQUFvQkYsbUJBQU9BLENBQUMsc0dBQXlCO0FBQzNETCx1QkFBdUIsR0FBRztBQUMxQixNQUFNRTtJQUNGTSxZQUFZQyxNQUFNLEVBQUVDLFNBQVMsQ0FBRTtRQUMzQixJQUFJLENBQUNDLFFBQVEsR0FBRyxJQUFJTCxjQUFjTSxhQUFhLENBQUNILFFBQVFDO0lBQzVEO0lBQ0E7Ozs7OztLQU1DLEdBQ0RHLFFBQVFDLElBQUksRUFBRUMsVUFBVSxFQUFFQyxXQUFXLEtBQUssRUFBRTtRQUN4QyxlQUFlO1FBQ2YsSUFBSSxDQUFDQSxVQUFVO1lBQ1gsSUFBSSxDQUFDRCxZQUFZO2dCQUNiLE1BQU0sSUFBSUUsTUFBTTtZQUNwQjtZQUNBLE1BQU1DLFNBQVMsSUFBSSxDQUFDUCxRQUFRLENBQUNRLE1BQU0sQ0FBQ0o7WUFDcEMsY0FBYztZQUNkLE1BQU1LLE9BQU9oQixTQUFTaUIsT0FBTyxDQUFDQyxVQUFVLENBQUM7WUFDekNGLEtBQUtHLE1BQU0sQ0FBQ1Q7WUFDWixJQUFJSSxPQUFPTSxNQUFNLEtBQUtKLEtBQUtLLE1BQU0sQ0FBQyxXQUFXO2dCQUN6QyxNQUFNLElBQUlSLE1BQU07WUFDcEI7UUFDSjtRQUNBLE9BQU9WLGtCQUFrQm1CLFlBQVksQ0FBQ0MsUUFBUSxDQUFDQyxLQUFLQyxLQUFLLENBQUNmO0lBQzlEO0FBQ0o7QUFDQWQsdUJBQXVCLEdBQUdFLGlCQUMxQiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdHJlYW1pbmctdmlkZW8vLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvV2ViaG9va1JlY2VpdmVyLmpzPzcyMjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldlYmhvb2tSZWNlaXZlciA9IGV4cG9ydHMuYXV0aG9yaXplSGVhZGVyID0gdm9pZCAwO1xuY29uc3QgY3J5cHRvXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImNyeXB0b1wiKSk7XG5jb25zdCBBY2Nlc3NUb2tlbl8xID0gcmVxdWlyZShcIi4vQWNjZXNzVG9rZW5cIik7XG5jb25zdCBsaXZla2l0X3dlYmhvb2tfMSA9IHJlcXVpcmUoXCIuL3Byb3RvL2xpdmVraXRfd2ViaG9va1wiKTtcbmV4cG9ydHMuYXV0aG9yaXplSGVhZGVyID0gJ0F1dGhvcml6ZSc7XG5jbGFzcyBXZWJob29rUmVjZWl2ZXIge1xuICAgIGNvbnN0cnVjdG9yKGFwaUtleSwgYXBpU2VjcmV0KSB7XG4gICAgICAgIHRoaXMudmVyaWZpZXIgPSBuZXcgQWNjZXNzVG9rZW5fMS5Ub2tlblZlcmlmaWVyKGFwaUtleSwgYXBpU2VjcmV0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYm9keSBzdHJpbmcgb2YgdGhlIHBvc3RlZCBib2R5XG4gICAgICogQHBhcmFtIGF1dGhIZWFkZXIgYEF1dGhvcml6YXRpb25gIGhlYWRlciBmcm9tIHRoZSByZXF1ZXN0XG4gICAgICogQHBhcmFtIHNraXBBdXRoIHRydWUgdG8gc2tpcCBhdXRoIHZhbGlkYXRpb25cbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIHJlY2VpdmUoYm9keSwgYXV0aEhlYWRlciwgc2tpcEF1dGggPSBmYWxzZSkge1xuICAgICAgICAvLyB2ZXJpZnkgdG9rZW5cbiAgICAgICAgaWYgKCFza2lwQXV0aCkge1xuICAgICAgICAgICAgaWYgKCFhdXRoSGVhZGVyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhdXRob3JpemF0aW9uIGhlYWRlciBpcyBlbXB0eScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY2xhaW1zID0gdGhpcy52ZXJpZmllci52ZXJpZnkoYXV0aEhlYWRlcik7XG4gICAgICAgICAgICAvLyBjb25maXJtIHNoYVxuICAgICAgICAgICAgY29uc3QgaGFzaCA9IGNyeXB0b18xLmRlZmF1bHQuY3JlYXRlSGFzaCgnc2hhMjU2Jyk7XG4gICAgICAgICAgICBoYXNoLnVwZGF0ZShib2R5KTtcbiAgICAgICAgICAgIGlmIChjbGFpbXMuc2hhMjU2ICE9PSBoYXNoLmRpZ2VzdCgnYmFzZTY0JykpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NoYTI1NiBjaGVja3N1bSBvZiBib2R5IGRvZXMgbm90IG1hdGNoJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpdmVraXRfd2ViaG9va18xLldlYmhvb2tFdmVudC5mcm9tSlNPTihKU09OLnBhcnNlKGJvZHkpKTtcbiAgICB9XG59XG5leHBvcnRzLldlYmhvb2tSZWNlaXZlciA9IFdlYmhvb2tSZWNlaXZlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVdlYmhvb2tSZWNlaXZlci5qcy5tYXAiXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiV2ViaG9va1JlY2VpdmVyIiwiYXV0aG9yaXplSGVhZGVyIiwiY3J5cHRvXzEiLCJyZXF1aXJlIiwiQWNjZXNzVG9rZW5fMSIsImxpdmVraXRfd2ViaG9va18xIiwiY29uc3RydWN0b3IiLCJhcGlLZXkiLCJhcGlTZWNyZXQiLCJ2ZXJpZmllciIsIlRva2VuVmVyaWZpZXIiLCJyZWNlaXZlIiwiYm9keSIsImF1dGhIZWFkZXIiLCJza2lwQXV0aCIsIkVycm9yIiwiY2xhaW1zIiwidmVyaWZ5IiwiaGFzaCIsImRlZmF1bHQiLCJjcmVhdGVIYXNoIiwidXBkYXRlIiwic2hhMjU2IiwiZGlnZXN0IiwiV2ViaG9va0V2ZW50IiwiZnJvbUpTT04iLCJKU09OIiwicGFyc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/WebhookReceiver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/grants.js":
/*!********************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/grants.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TrackSource = void 0;\nvar TrackSource;\n(function(TrackSource) {\n    TrackSource[\"CAMERA\"] = \"camera\";\n    TrackSource[\"MICROPHONE\"] = \"microphone\";\n    TrackSource[\"SCREEN_SHARE\"] = \"screen_share\";\n    TrackSource[\"SCREEN_SHARE_AUDIO\"] = \"screen_share_audio\";\n})(TrackSource = exports.TrackSource || (exports.TrackSource = {})); //# sourceMappingURL=grants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvZ3JhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQkFBbUIsR0FBRyxLQUFLO0FBQzNCLElBQUlFO0FBQ0gsVUFBVUEsV0FBVztJQUNsQkEsV0FBVyxDQUFDLFNBQVMsR0FBRztJQUN4QkEsV0FBVyxDQUFDLGFBQWEsR0FBRztJQUM1QkEsV0FBVyxDQUFDLGVBQWUsR0FBRztJQUM5QkEsV0FBVyxDQUFDLHFCQUFxQixHQUFHO0FBQ3hDLEdBQUdBLGNBQWNGLFFBQVFFLFdBQVcsSUFBS0YsQ0FBQUEsbUJBQW1CLEdBQUcsQ0FBQyxLQUNoRSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdHJlYW1pbmctdmlkZW8vLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvZ3JhbnRzLmpzP2Q2MjAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRyYWNrU291cmNlID0gdm9pZCAwO1xudmFyIFRyYWNrU291cmNlO1xuKGZ1bmN0aW9uIChUcmFja1NvdXJjZSkge1xuICAgIFRyYWNrU291cmNlW1wiQ0FNRVJBXCJdID0gXCJjYW1lcmFcIjtcbiAgICBUcmFja1NvdXJjZVtcIk1JQ1JPUEhPTkVcIl0gPSBcIm1pY3JvcGhvbmVcIjtcbiAgICBUcmFja1NvdXJjZVtcIlNDUkVFTl9TSEFSRVwiXSA9IFwic2NyZWVuX3NoYXJlXCI7XG4gICAgVHJhY2tTb3VyY2VbXCJTQ1JFRU5fU0hBUkVfQVVESU9cIl0gPSBcInNjcmVlbl9zaGFyZV9hdWRpb1wiO1xufSkoVHJhY2tTb3VyY2UgPSBleHBvcnRzLlRyYWNrU291cmNlIHx8IChleHBvcnRzLlRyYWNrU291cmNlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyYW50cy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJUcmFja1NvdXJjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/grants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TrackType = exports.TrackInfo = exports.Room = exports.ParticipantPermission = exports.ParticipantInfo_State = exports.ParticipantInfo = exports.DataPacket_Kind = exports.IngressVideoOptions = exports.IngressVideoEncodingPreset = exports.IngressVideoEncodingOptions = exports.IngressState = exports.IngressInput = exports.IngressInfo = exports.IngressAudioOptions = exports.IngressAudioEncodingPreset = exports.IngressAudioEncodingOptions = exports.StreamProtocol = exports.StreamOutput = exports.SegmentedFileProtocol = exports.SegmentedFileOutput = exports.EncodingOptionsPreset = exports.EncodingOptions = exports.EncodedFileType = exports.EncodedFileOutput = exports.EgressInfo = exports.DirectFileOutput = void 0;\n__exportStar(__webpack_require__(/*! ./AccessToken */ \"(ssr)/./node_modules/livekit-server-sdk/dist/AccessToken.js\"), exports);\n__exportStar(__webpack_require__(/*! ./EgressClient */ \"(ssr)/./node_modules/livekit-server-sdk/dist/EgressClient.js\"), exports);\n__exportStar(__webpack_require__(/*! ./IngressClient */ \"(ssr)/./node_modules/livekit-server-sdk/dist/IngressClient.js\"), exports);\n__exportStar(__webpack_require__(/*! ./RoomServiceClient */ \"(ssr)/./node_modules/livekit-server-sdk/dist/RoomServiceClient.js\"), exports);\n__exportStar(__webpack_require__(/*! ./WebhookReceiver */ \"(ssr)/./node_modules/livekit-server-sdk/dist/WebhookReceiver.js\"), exports);\n__exportStar(__webpack_require__(/*! ./grants */ \"(ssr)/./node_modules/livekit-server-sdk/dist/grants.js\"), exports);\nvar livekit_egress_1 = __webpack_require__(/*! ./proto/livekit_egress */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js\");\nObject.defineProperty(exports, \"DirectFileOutput\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_egress_1.DirectFileOutput;\n    }\n}));\nObject.defineProperty(exports, \"EgressInfo\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_egress_1.EgressInfo;\n    }\n}));\nObject.defineProperty(exports, \"EncodedFileOutput\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_egress_1.EncodedFileOutput;\n    }\n}));\nObject.defineProperty(exports, \"EncodedFileType\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_egress_1.EncodedFileType;\n    }\n}));\nObject.defineProperty(exports, \"EncodingOptions\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_egress_1.EncodingOptions;\n    }\n}));\nObject.defineProperty(exports, \"EncodingOptionsPreset\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_egress_1.EncodingOptionsPreset;\n    }\n}));\nObject.defineProperty(exports, \"SegmentedFileOutput\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_egress_1.SegmentedFileOutput;\n    }\n}));\nObject.defineProperty(exports, \"SegmentedFileProtocol\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_egress_1.SegmentedFileProtocol;\n    }\n}));\nObject.defineProperty(exports, \"StreamOutput\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_egress_1.StreamOutput;\n    }\n}));\nObject.defineProperty(exports, \"StreamProtocol\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_egress_1.StreamProtocol;\n    }\n}));\nvar livekit_ingress_1 = __webpack_require__(/*! ./proto/livekit_ingress */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js\");\nObject.defineProperty(exports, \"IngressAudioEncodingOptions\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_ingress_1.IngressAudioEncodingOptions;\n    }\n}));\nObject.defineProperty(exports, \"IngressAudioEncodingPreset\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_ingress_1.IngressAudioEncodingPreset;\n    }\n}));\nObject.defineProperty(exports, \"IngressAudioOptions\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_ingress_1.IngressAudioOptions;\n    }\n}));\nObject.defineProperty(exports, \"IngressInfo\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_ingress_1.IngressInfo;\n    }\n}));\nObject.defineProperty(exports, \"IngressInput\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_ingress_1.IngressInput;\n    }\n}));\nObject.defineProperty(exports, \"IngressState\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_ingress_1.IngressState;\n    }\n}));\nObject.defineProperty(exports, \"IngressVideoEncodingOptions\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_ingress_1.IngressVideoEncodingOptions;\n    }\n}));\nObject.defineProperty(exports, \"IngressVideoEncodingPreset\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_ingress_1.IngressVideoEncodingPreset;\n    }\n}));\nObject.defineProperty(exports, \"IngressVideoOptions\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_ingress_1.IngressVideoOptions;\n    }\n}));\nvar livekit_models_1 = __webpack_require__(/*! ./proto/livekit_models */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nObject.defineProperty(exports, \"DataPacket_Kind\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_models_1.DataPacket_Kind;\n    }\n}));\nObject.defineProperty(exports, \"ParticipantInfo\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_models_1.ParticipantInfo;\n    }\n}));\nObject.defineProperty(exports, \"ParticipantInfo_State\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_models_1.ParticipantInfo_State;\n    }\n}));\nObject.defineProperty(exports, \"ParticipantPermission\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_models_1.ParticipantPermission;\n    }\n}));\nObject.defineProperty(exports, \"Room\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_models_1.Room;\n    }\n}));\nObject.defineProperty(exports, \"TrackInfo\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_models_1.TrackInfo;\n    }\n}));\nObject.defineProperty(exports, \"TrackType\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_models_1.TrackType;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/proto/google/protobuf/timestamp.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/google/protobuf/timestamp.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Timestamp = exports.protobufPackage = void 0;\n/* eslint-disable */ const long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/umd/index.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nexports.protobufPackage = \"google.protobuf\";\nfunction createBaseTimestamp() {\n    return {\n        seconds: 0,\n        nanos: 0\n    };\n}\nexports.Timestamp = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.seconds !== 0) {\n            writer.uint32(8).int64(message.seconds);\n        }\n        if (message.nanos !== 0) {\n            writer.uint32(16).int32(message.nanos);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTimestamp();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.seconds = longToNumber(reader.int64());\n                    break;\n                case 2:\n                    message.nanos = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            seconds: isSet(object.seconds) ? Number(object.seconds) : 0,\n            nanos: isSet(object.nanos) ? Number(object.nanos) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.seconds !== undefined && (obj.seconds = Math.round(message.seconds));\n        message.nanos !== undefined && (obj.nanos = Math.round(message.nanos));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseTimestamp();\n        message.seconds = (_a = object.seconds) !== null && _a !== void 0 ? _a : 0;\n        message.nanos = (_b = object.nanos) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    }\n};\nvar globalThis = (()=>{\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (false) {}\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n} //# sourceMappingURL=timestamp.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/proto/google/protobuf/timestamp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js":
/*!**********************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.StreamInfo = exports.StreamInfoList = exports.EgressInfo = exports.StopEgressRequest = exports.ListEgressResponse = exports.ListEgressRequest = exports.UpdateOutputsRequest = exports.UpdateStreamRequest = exports.UpdateLayoutRequest = exports.EncodingOptions = exports.StreamOutput = exports.AliOSSUpload = exports.AzureBlobUpload = exports.GCPUpload = exports.S3Upload_MetadataEntry = exports.S3Upload = exports.ImageOutput = exports.DirectFileOutput = exports.SegmentedFileOutput = exports.EncodedFileOutput = exports.TrackEgressRequest = exports.TrackCompositeEgressRequest = exports.ParticipantEgressRequest = exports.WebEgressRequest = exports.RoomCompositeEgressRequest = exports.streamInfo_StatusToJSON = exports.streamInfo_StatusFromJSON = exports.StreamInfo_Status = exports.egressStatusToJSON = exports.egressStatusFromJSON = exports.EgressStatus = exports.encodingOptionsPresetToJSON = exports.encodingOptionsPresetFromJSON = exports.EncodingOptionsPreset = exports.streamProtocolToJSON = exports.streamProtocolFromJSON = exports.StreamProtocol = exports.imageFileSuffixToJSON = exports.imageFileSuffixFromJSON = exports.ImageFileSuffix = exports.segmentedFileSuffixToJSON = exports.segmentedFileSuffixFromJSON = exports.SegmentedFileSuffix = exports.segmentedFileProtocolToJSON = exports.segmentedFileProtocolFromJSON = exports.SegmentedFileProtocol = exports.encodedFileTypeToJSON = exports.encodedFileTypeFromJSON = exports.EncodedFileType = exports.protobufPackage = void 0;\nexports.AutoTrackEgress = exports.AutoParticipantEgress = exports.ImagesInfo = exports.SegmentsInfo = exports.FileInfo = void 0;\n/* eslint-disable */ const long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/umd/index.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst livekit_models_1 = __webpack_require__(/*! ./livekit_models */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nexports.protobufPackage = \"livekit\";\nvar EncodedFileType;\n(function(EncodedFileType) {\n    /** DEFAULT_FILETYPE - file type chosen based on codecs */ EncodedFileType[EncodedFileType[\"DEFAULT_FILETYPE\"] = 0] = \"DEFAULT_FILETYPE\";\n    EncodedFileType[EncodedFileType[\"MP4\"] = 1] = \"MP4\";\n    EncodedFileType[EncodedFileType[\"OGG\"] = 2] = \"OGG\";\n    EncodedFileType[EncodedFileType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(EncodedFileType = exports.EncodedFileType || (exports.EncodedFileType = {}));\nfunction encodedFileTypeFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"DEFAULT_FILETYPE\":\n            return EncodedFileType.DEFAULT_FILETYPE;\n        case 1:\n        case \"MP4\":\n            return EncodedFileType.MP4;\n        case 2:\n        case \"OGG\":\n            return EncodedFileType.OGG;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return EncodedFileType.UNRECOGNIZED;\n    }\n}\nexports.encodedFileTypeFromJSON = encodedFileTypeFromJSON;\nfunction encodedFileTypeToJSON(object) {\n    switch(object){\n        case EncodedFileType.DEFAULT_FILETYPE:\n            return \"DEFAULT_FILETYPE\";\n        case EncodedFileType.MP4:\n            return \"MP4\";\n        case EncodedFileType.OGG:\n            return \"OGG\";\n        case EncodedFileType.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.encodedFileTypeToJSON = encodedFileTypeToJSON;\nvar SegmentedFileProtocol;\n(function(SegmentedFileProtocol) {\n    SegmentedFileProtocol[SegmentedFileProtocol[\"DEFAULT_SEGMENTED_FILE_PROTOCOL\"] = 0] = \"DEFAULT_SEGMENTED_FILE_PROTOCOL\";\n    SegmentedFileProtocol[SegmentedFileProtocol[\"HLS_PROTOCOL\"] = 1] = \"HLS_PROTOCOL\";\n    SegmentedFileProtocol[SegmentedFileProtocol[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(SegmentedFileProtocol = exports.SegmentedFileProtocol || (exports.SegmentedFileProtocol = {}));\nfunction segmentedFileProtocolFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"DEFAULT_SEGMENTED_FILE_PROTOCOL\":\n            return SegmentedFileProtocol.DEFAULT_SEGMENTED_FILE_PROTOCOL;\n        case 1:\n        case \"HLS_PROTOCOL\":\n            return SegmentedFileProtocol.HLS_PROTOCOL;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return SegmentedFileProtocol.UNRECOGNIZED;\n    }\n}\nexports.segmentedFileProtocolFromJSON = segmentedFileProtocolFromJSON;\nfunction segmentedFileProtocolToJSON(object) {\n    switch(object){\n        case SegmentedFileProtocol.DEFAULT_SEGMENTED_FILE_PROTOCOL:\n            return \"DEFAULT_SEGMENTED_FILE_PROTOCOL\";\n        case SegmentedFileProtocol.HLS_PROTOCOL:\n            return \"HLS_PROTOCOL\";\n        case SegmentedFileProtocol.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.segmentedFileProtocolToJSON = segmentedFileProtocolToJSON;\nvar SegmentedFileSuffix;\n(function(SegmentedFileSuffix) {\n    SegmentedFileSuffix[SegmentedFileSuffix[\"INDEX\"] = 0] = \"INDEX\";\n    SegmentedFileSuffix[SegmentedFileSuffix[\"TIMESTAMP\"] = 1] = \"TIMESTAMP\";\n    SegmentedFileSuffix[SegmentedFileSuffix[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(SegmentedFileSuffix = exports.SegmentedFileSuffix || (exports.SegmentedFileSuffix = {}));\nfunction segmentedFileSuffixFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"INDEX\":\n            return SegmentedFileSuffix.INDEX;\n        case 1:\n        case \"TIMESTAMP\":\n            return SegmentedFileSuffix.TIMESTAMP;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return SegmentedFileSuffix.UNRECOGNIZED;\n    }\n}\nexports.segmentedFileSuffixFromJSON = segmentedFileSuffixFromJSON;\nfunction segmentedFileSuffixToJSON(object) {\n    switch(object){\n        case SegmentedFileSuffix.INDEX:\n            return \"INDEX\";\n        case SegmentedFileSuffix.TIMESTAMP:\n            return \"TIMESTAMP\";\n        case SegmentedFileSuffix.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.segmentedFileSuffixToJSON = segmentedFileSuffixToJSON;\nvar ImageFileSuffix;\n(function(ImageFileSuffix) {\n    ImageFileSuffix[ImageFileSuffix[\"IMAGE_SUFFIX_INDEX\"] = 0] = \"IMAGE_SUFFIX_INDEX\";\n    ImageFileSuffix[ImageFileSuffix[\"IMAGE_SUFFIX_TIMESTAMP\"] = 1] = \"IMAGE_SUFFIX_TIMESTAMP\";\n    ImageFileSuffix[ImageFileSuffix[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ImageFileSuffix = exports.ImageFileSuffix || (exports.ImageFileSuffix = {}));\nfunction imageFileSuffixFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"IMAGE_SUFFIX_INDEX\":\n            return ImageFileSuffix.IMAGE_SUFFIX_INDEX;\n        case 1:\n        case \"IMAGE_SUFFIX_TIMESTAMP\":\n            return ImageFileSuffix.IMAGE_SUFFIX_TIMESTAMP;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ImageFileSuffix.UNRECOGNIZED;\n    }\n}\nexports.imageFileSuffixFromJSON = imageFileSuffixFromJSON;\nfunction imageFileSuffixToJSON(object) {\n    switch(object){\n        case ImageFileSuffix.IMAGE_SUFFIX_INDEX:\n            return \"IMAGE_SUFFIX_INDEX\";\n        case ImageFileSuffix.IMAGE_SUFFIX_TIMESTAMP:\n            return \"IMAGE_SUFFIX_TIMESTAMP\";\n        case ImageFileSuffix.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.imageFileSuffixToJSON = imageFileSuffixToJSON;\nvar StreamProtocol;\n(function(StreamProtocol) {\n    /** DEFAULT_PROTOCOL - protocol chosen based on urls */ StreamProtocol[StreamProtocol[\"DEFAULT_PROTOCOL\"] = 0] = \"DEFAULT_PROTOCOL\";\n    StreamProtocol[StreamProtocol[\"RTMP\"] = 1] = \"RTMP\";\n    StreamProtocol[StreamProtocol[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(StreamProtocol = exports.StreamProtocol || (exports.StreamProtocol = {}));\nfunction streamProtocolFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"DEFAULT_PROTOCOL\":\n            return StreamProtocol.DEFAULT_PROTOCOL;\n        case 1:\n        case \"RTMP\":\n            return StreamProtocol.RTMP;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return StreamProtocol.UNRECOGNIZED;\n    }\n}\nexports.streamProtocolFromJSON = streamProtocolFromJSON;\nfunction streamProtocolToJSON(object) {\n    switch(object){\n        case StreamProtocol.DEFAULT_PROTOCOL:\n            return \"DEFAULT_PROTOCOL\";\n        case StreamProtocol.RTMP:\n            return \"RTMP\";\n        case StreamProtocol.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.streamProtocolToJSON = streamProtocolToJSON;\nvar EncodingOptionsPreset;\n(function(EncodingOptionsPreset) {\n    /** H264_720P_30 - 1280x720, 30fps, 3000kpbs, H.264_MAIN / OPUS */ EncodingOptionsPreset[EncodingOptionsPreset[\"H264_720P_30\"] = 0] = \"H264_720P_30\";\n    /** H264_720P_60 - 1280x720, 60fps, 4500kbps, H.264_MAIN / OPUS */ EncodingOptionsPreset[EncodingOptionsPreset[\"H264_720P_60\"] = 1] = \"H264_720P_60\";\n    /** H264_1080P_30 - 1920x1080, 30fps, 4500kbps, H.264_MAIN / OPUS */ EncodingOptionsPreset[EncodingOptionsPreset[\"H264_1080P_30\"] = 2] = \"H264_1080P_30\";\n    /** H264_1080P_60 - 1920x1080, 60fps, 6000kbps, H.264_MAIN / OPUS */ EncodingOptionsPreset[EncodingOptionsPreset[\"H264_1080P_60\"] = 3] = \"H264_1080P_60\";\n    /** PORTRAIT_H264_720P_30 - 720x1280, 30fps, 3000kpbs, H.264_MAIN / OPUS */ EncodingOptionsPreset[EncodingOptionsPreset[\"PORTRAIT_H264_720P_30\"] = 4] = \"PORTRAIT_H264_720P_30\";\n    /** PORTRAIT_H264_720P_60 - 720x1280, 60fps, 4500kbps, H.264_MAIN / OPUS */ EncodingOptionsPreset[EncodingOptionsPreset[\"PORTRAIT_H264_720P_60\"] = 5] = \"PORTRAIT_H264_720P_60\";\n    /** PORTRAIT_H264_1080P_30 - 1080x1920, 30fps, 4500kbps, H.264_MAIN / OPUS */ EncodingOptionsPreset[EncodingOptionsPreset[\"PORTRAIT_H264_1080P_30\"] = 6] = \"PORTRAIT_H264_1080P_30\";\n    /** PORTRAIT_H264_1080P_60 - 1080x1920, 60fps, 6000kbps, H.264_MAIN / OPUS */ EncodingOptionsPreset[EncodingOptionsPreset[\"PORTRAIT_H264_1080P_60\"] = 7] = \"PORTRAIT_H264_1080P_60\";\n    EncodingOptionsPreset[EncodingOptionsPreset[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(EncodingOptionsPreset = exports.EncodingOptionsPreset || (exports.EncodingOptionsPreset = {}));\nfunction encodingOptionsPresetFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"H264_720P_30\":\n            return EncodingOptionsPreset.H264_720P_30;\n        case 1:\n        case \"H264_720P_60\":\n            return EncodingOptionsPreset.H264_720P_60;\n        case 2:\n        case \"H264_1080P_30\":\n            return EncodingOptionsPreset.H264_1080P_30;\n        case 3:\n        case \"H264_1080P_60\":\n            return EncodingOptionsPreset.H264_1080P_60;\n        case 4:\n        case \"PORTRAIT_H264_720P_30\":\n            return EncodingOptionsPreset.PORTRAIT_H264_720P_30;\n        case 5:\n        case \"PORTRAIT_H264_720P_60\":\n            return EncodingOptionsPreset.PORTRAIT_H264_720P_60;\n        case 6:\n        case \"PORTRAIT_H264_1080P_30\":\n            return EncodingOptionsPreset.PORTRAIT_H264_1080P_30;\n        case 7:\n        case \"PORTRAIT_H264_1080P_60\":\n            return EncodingOptionsPreset.PORTRAIT_H264_1080P_60;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return EncodingOptionsPreset.UNRECOGNIZED;\n    }\n}\nexports.encodingOptionsPresetFromJSON = encodingOptionsPresetFromJSON;\nfunction encodingOptionsPresetToJSON(object) {\n    switch(object){\n        case EncodingOptionsPreset.H264_720P_30:\n            return \"H264_720P_30\";\n        case EncodingOptionsPreset.H264_720P_60:\n            return \"H264_720P_60\";\n        case EncodingOptionsPreset.H264_1080P_30:\n            return \"H264_1080P_30\";\n        case EncodingOptionsPreset.H264_1080P_60:\n            return \"H264_1080P_60\";\n        case EncodingOptionsPreset.PORTRAIT_H264_720P_30:\n            return \"PORTRAIT_H264_720P_30\";\n        case EncodingOptionsPreset.PORTRAIT_H264_720P_60:\n            return \"PORTRAIT_H264_720P_60\";\n        case EncodingOptionsPreset.PORTRAIT_H264_1080P_30:\n            return \"PORTRAIT_H264_1080P_30\";\n        case EncodingOptionsPreset.PORTRAIT_H264_1080P_60:\n            return \"PORTRAIT_H264_1080P_60\";\n        case EncodingOptionsPreset.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.encodingOptionsPresetToJSON = encodingOptionsPresetToJSON;\nvar EgressStatus;\n(function(EgressStatus) {\n    EgressStatus[EgressStatus[\"EGRESS_STARTING\"] = 0] = \"EGRESS_STARTING\";\n    EgressStatus[EgressStatus[\"EGRESS_ACTIVE\"] = 1] = \"EGRESS_ACTIVE\";\n    EgressStatus[EgressStatus[\"EGRESS_ENDING\"] = 2] = \"EGRESS_ENDING\";\n    EgressStatus[EgressStatus[\"EGRESS_COMPLETE\"] = 3] = \"EGRESS_COMPLETE\";\n    EgressStatus[EgressStatus[\"EGRESS_FAILED\"] = 4] = \"EGRESS_FAILED\";\n    EgressStatus[EgressStatus[\"EGRESS_ABORTED\"] = 5] = \"EGRESS_ABORTED\";\n    EgressStatus[EgressStatus[\"EGRESS_LIMIT_REACHED\"] = 6] = \"EGRESS_LIMIT_REACHED\";\n    EgressStatus[EgressStatus[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(EgressStatus = exports.EgressStatus || (exports.EgressStatus = {}));\nfunction egressStatusFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"EGRESS_STARTING\":\n            return EgressStatus.EGRESS_STARTING;\n        case 1:\n        case \"EGRESS_ACTIVE\":\n            return EgressStatus.EGRESS_ACTIVE;\n        case 2:\n        case \"EGRESS_ENDING\":\n            return EgressStatus.EGRESS_ENDING;\n        case 3:\n        case \"EGRESS_COMPLETE\":\n            return EgressStatus.EGRESS_COMPLETE;\n        case 4:\n        case \"EGRESS_FAILED\":\n            return EgressStatus.EGRESS_FAILED;\n        case 5:\n        case \"EGRESS_ABORTED\":\n            return EgressStatus.EGRESS_ABORTED;\n        case 6:\n        case \"EGRESS_LIMIT_REACHED\":\n            return EgressStatus.EGRESS_LIMIT_REACHED;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return EgressStatus.UNRECOGNIZED;\n    }\n}\nexports.egressStatusFromJSON = egressStatusFromJSON;\nfunction egressStatusToJSON(object) {\n    switch(object){\n        case EgressStatus.EGRESS_STARTING:\n            return \"EGRESS_STARTING\";\n        case EgressStatus.EGRESS_ACTIVE:\n            return \"EGRESS_ACTIVE\";\n        case EgressStatus.EGRESS_ENDING:\n            return \"EGRESS_ENDING\";\n        case EgressStatus.EGRESS_COMPLETE:\n            return \"EGRESS_COMPLETE\";\n        case EgressStatus.EGRESS_FAILED:\n            return \"EGRESS_FAILED\";\n        case EgressStatus.EGRESS_ABORTED:\n            return \"EGRESS_ABORTED\";\n        case EgressStatus.EGRESS_LIMIT_REACHED:\n            return \"EGRESS_LIMIT_REACHED\";\n        case EgressStatus.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.egressStatusToJSON = egressStatusToJSON;\nvar StreamInfo_Status;\n(function(StreamInfo_Status) {\n    StreamInfo_Status[StreamInfo_Status[\"ACTIVE\"] = 0] = \"ACTIVE\";\n    StreamInfo_Status[StreamInfo_Status[\"FINISHED\"] = 1] = \"FINISHED\";\n    StreamInfo_Status[StreamInfo_Status[\"FAILED\"] = 2] = \"FAILED\";\n    StreamInfo_Status[StreamInfo_Status[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(StreamInfo_Status = exports.StreamInfo_Status || (exports.StreamInfo_Status = {}));\nfunction streamInfo_StatusFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"ACTIVE\":\n            return StreamInfo_Status.ACTIVE;\n        case 1:\n        case \"FINISHED\":\n            return StreamInfo_Status.FINISHED;\n        case 2:\n        case \"FAILED\":\n            return StreamInfo_Status.FAILED;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return StreamInfo_Status.UNRECOGNIZED;\n    }\n}\nexports.streamInfo_StatusFromJSON = streamInfo_StatusFromJSON;\nfunction streamInfo_StatusToJSON(object) {\n    switch(object){\n        case StreamInfo_Status.ACTIVE:\n            return \"ACTIVE\";\n        case StreamInfo_Status.FINISHED:\n            return \"FINISHED\";\n        case StreamInfo_Status.FAILED:\n            return \"FAILED\";\n        case StreamInfo_Status.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.streamInfo_StatusToJSON = streamInfo_StatusToJSON;\nfunction createBaseRoomCompositeEgressRequest() {\n    return {\n        roomName: \"\",\n        layout: \"\",\n        audioOnly: false,\n        videoOnly: false,\n        customBaseUrl: \"\",\n        file: undefined,\n        stream: undefined,\n        segments: undefined,\n        preset: undefined,\n        advanced: undefined,\n        fileOutputs: [],\n        streamOutputs: [],\n        segmentOutputs: [],\n        imageOutputs: []\n    };\n}\nexports.RoomCompositeEgressRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.layout !== undefined && message.layout !== \"\") {\n            writer.uint32(18).string(message.layout);\n        }\n        if (message.audioOnly === true) {\n            writer.uint32(24).bool(message.audioOnly);\n        }\n        if (message.videoOnly === true) {\n            writer.uint32(32).bool(message.videoOnly);\n        }\n        if (message.customBaseUrl !== undefined && message.customBaseUrl !== \"\") {\n            writer.uint32(42).string(message.customBaseUrl);\n        }\n        if (message.file !== undefined) {\n            exports.EncodedFileOutput.encode(message.file, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.stream !== undefined) {\n            exports.StreamOutput.encode(message.stream, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.segments !== undefined) {\n            exports.SegmentedFileOutput.encode(message.segments, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(64).int32(message.preset);\n        }\n        if (message.advanced !== undefined) {\n            exports.EncodingOptions.encode(message.advanced, writer.uint32(74).fork()).ldelim();\n        }\n        if (message.fileOutputs !== undefined && message.fileOutputs.length !== 0) {\n            for (const v of message.fileOutputs){\n                exports.EncodedFileOutput.encode(v, writer.uint32(90).fork()).ldelim();\n            }\n        }\n        if (message.streamOutputs !== undefined && message.streamOutputs.length !== 0) {\n            for (const v of message.streamOutputs){\n                exports.StreamOutput.encode(v, writer.uint32(98).fork()).ldelim();\n            }\n        }\n        if (message.segmentOutputs !== undefined && message.segmentOutputs.length !== 0) {\n            for (const v of message.segmentOutputs){\n                exports.SegmentedFileOutput.encode(v, writer.uint32(106).fork()).ldelim();\n            }\n        }\n        if (message.imageOutputs !== undefined && message.imageOutputs.length !== 0) {\n            for (const v of message.imageOutputs){\n                exports.ImageOutput.encode(v, writer.uint32(114).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRoomCompositeEgressRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.layout = reader.string();\n                    break;\n                case 3:\n                    message.audioOnly = reader.bool();\n                    break;\n                case 4:\n                    message.videoOnly = reader.bool();\n                    break;\n                case 5:\n                    message.customBaseUrl = reader.string();\n                    break;\n                case 6:\n                    message.file = exports.EncodedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.stream = exports.StreamOutput.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.segments = exports.SegmentedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.preset = reader.int32();\n                    break;\n                case 9:\n                    message.advanced = exports.EncodingOptions.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.fileOutputs.push(exports.EncodedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    message.streamOutputs.push(exports.StreamOutput.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    message.segmentOutputs.push(exports.SegmentedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.imageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            layout: isSet(object.layout) ? String(object.layout) : \"\",\n            audioOnly: isSet(object.audioOnly) ? Boolean(object.audioOnly) : false,\n            videoOnly: isSet(object.videoOnly) ? Boolean(object.videoOnly) : false,\n            customBaseUrl: isSet(object.customBaseUrl) ? String(object.customBaseUrl) : \"\",\n            file: isSet(object.file) ? exports.EncodedFileOutput.fromJSON(object.file) : undefined,\n            stream: isSet(object.stream) ? exports.StreamOutput.fromJSON(object.stream) : undefined,\n            segments: isSet(object.segments) ? exports.SegmentedFileOutput.fromJSON(object.segments) : undefined,\n            preset: isSet(object.preset) ? encodingOptionsPresetFromJSON(object.preset) : undefined,\n            advanced: isSet(object.advanced) ? exports.EncodingOptions.fromJSON(object.advanced) : undefined,\n            fileOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.fileOutputs) ? object.fileOutputs.map((e)=>exports.EncodedFileOutput.fromJSON(e)) : [],\n            streamOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.streamOutputs) ? object.streamOutputs.map((e)=>exports.StreamOutput.fromJSON(e)) : [],\n            segmentOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentOutputs) ? object.segmentOutputs.map((e)=>exports.SegmentedFileOutput.fromJSON(e)) : [],\n            imageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.imageOutputs) ? object.imageOutputs.map((e)=>exports.ImageOutput.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.layout !== undefined && (obj.layout = message.layout);\n        message.audioOnly !== undefined && (obj.audioOnly = message.audioOnly);\n        message.videoOnly !== undefined && (obj.videoOnly = message.videoOnly);\n        message.customBaseUrl !== undefined && (obj.customBaseUrl = message.customBaseUrl);\n        message.file !== undefined && (obj.file = message.file ? exports.EncodedFileOutput.toJSON(message.file) : undefined);\n        message.stream !== undefined && (obj.stream = message.stream ? exports.StreamOutput.toJSON(message.stream) : undefined);\n        message.segments !== undefined && (obj.segments = message.segments ? exports.SegmentedFileOutput.toJSON(message.segments) : undefined);\n        message.preset !== undefined && (obj.preset = message.preset !== undefined ? encodingOptionsPresetToJSON(message.preset) : undefined);\n        message.advanced !== undefined && (obj.advanced = message.advanced ? exports.EncodingOptions.toJSON(message.advanced) : undefined);\n        if (message.fileOutputs) {\n            obj.fileOutputs = message.fileOutputs.map((e)=>e ? exports.EncodedFileOutput.toJSON(e) : undefined);\n        } else {\n            obj.fileOutputs = [];\n        }\n        if (message.streamOutputs) {\n            obj.streamOutputs = message.streamOutputs.map((e)=>e ? exports.StreamOutput.toJSON(e) : undefined);\n        } else {\n            obj.streamOutputs = [];\n        }\n        if (message.segmentOutputs) {\n            obj.segmentOutputs = message.segmentOutputs.map((e)=>e ? exports.SegmentedFileOutput.toJSON(e) : undefined);\n        } else {\n            obj.segmentOutputs = [];\n        }\n        if (message.imageOutputs) {\n            obj.imageOutputs = message.imageOutputs.map((e)=>e ? exports.ImageOutput.toJSON(e) : undefined);\n        } else {\n            obj.imageOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        const message = createBaseRoomCompositeEgressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.layout = (_b = object.layout) !== null && _b !== void 0 ? _b : \"\";\n        message.audioOnly = (_c = object.audioOnly) !== null && _c !== void 0 ? _c : false;\n        message.videoOnly = (_d = object.videoOnly) !== null && _d !== void 0 ? _d : false;\n        message.customBaseUrl = (_e = object.customBaseUrl) !== null && _e !== void 0 ? _e : \"\";\n        message.file = object.file !== undefined && object.file !== null ? exports.EncodedFileOutput.fromPartial(object.file) : undefined;\n        message.stream = object.stream !== undefined && object.stream !== null ? exports.StreamOutput.fromPartial(object.stream) : undefined;\n        message.segments = object.segments !== undefined && object.segments !== null ? exports.SegmentedFileOutput.fromPartial(object.segments) : undefined;\n        message.preset = (_f = object.preset) !== null && _f !== void 0 ? _f : undefined;\n        message.advanced = object.advanced !== undefined && object.advanced !== null ? exports.EncodingOptions.fromPartial(object.advanced) : undefined;\n        message.fileOutputs = ((_g = object.fileOutputs) === null || _g === void 0 ? void 0 : _g.map((e)=>exports.EncodedFileOutput.fromPartial(e))) || [];\n        message.streamOutputs = ((_h = object.streamOutputs) === null || _h === void 0 ? void 0 : _h.map((e)=>exports.StreamOutput.fromPartial(e))) || [];\n        message.segmentOutputs = ((_j = object.segmentOutputs) === null || _j === void 0 ? void 0 : _j.map((e)=>exports.SegmentedFileOutput.fromPartial(e))) || [];\n        message.imageOutputs = ((_k = object.imageOutputs) === null || _k === void 0 ? void 0 : _k.map((e)=>exports.ImageOutput.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseWebEgressRequest() {\n    return {\n        url: \"\",\n        audioOnly: false,\n        videoOnly: false,\n        awaitStartSignal: false,\n        file: undefined,\n        stream: undefined,\n        segments: undefined,\n        preset: undefined,\n        advanced: undefined,\n        fileOutputs: [],\n        streamOutputs: [],\n        segmentOutputs: [],\n        imageOutputs: []\n    };\n}\nexports.WebEgressRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.url !== undefined && message.url !== \"\") {\n            writer.uint32(10).string(message.url);\n        }\n        if (message.audioOnly === true) {\n            writer.uint32(16).bool(message.audioOnly);\n        }\n        if (message.videoOnly === true) {\n            writer.uint32(24).bool(message.videoOnly);\n        }\n        if (message.awaitStartSignal === true) {\n            writer.uint32(96).bool(message.awaitStartSignal);\n        }\n        if (message.file !== undefined) {\n            exports.EncodedFileOutput.encode(message.file, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.stream !== undefined) {\n            exports.StreamOutput.encode(message.stream, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.segments !== undefined) {\n            exports.SegmentedFileOutput.encode(message.segments, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(56).int32(message.preset);\n        }\n        if (message.advanced !== undefined) {\n            exports.EncodingOptions.encode(message.advanced, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.fileOutputs !== undefined && message.fileOutputs.length !== 0) {\n            for (const v of message.fileOutputs){\n                exports.EncodedFileOutput.encode(v, writer.uint32(74).fork()).ldelim();\n            }\n        }\n        if (message.streamOutputs !== undefined && message.streamOutputs.length !== 0) {\n            for (const v of message.streamOutputs){\n                exports.StreamOutput.encode(v, writer.uint32(82).fork()).ldelim();\n            }\n        }\n        if (message.segmentOutputs !== undefined && message.segmentOutputs.length !== 0) {\n            for (const v of message.segmentOutputs){\n                exports.SegmentedFileOutput.encode(v, writer.uint32(90).fork()).ldelim();\n            }\n        }\n        if (message.imageOutputs !== undefined && message.imageOutputs.length !== 0) {\n            for (const v of message.imageOutputs){\n                exports.ImageOutput.encode(v, writer.uint32(106).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWebEgressRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.url = reader.string();\n                    break;\n                case 2:\n                    message.audioOnly = reader.bool();\n                    break;\n                case 3:\n                    message.videoOnly = reader.bool();\n                    break;\n                case 12:\n                    message.awaitStartSignal = reader.bool();\n                    break;\n                case 4:\n                    message.file = exports.EncodedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.stream = exports.StreamOutput.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.segments = exports.SegmentedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.preset = reader.int32();\n                    break;\n                case 8:\n                    message.advanced = exports.EncodingOptions.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.fileOutputs.push(exports.EncodedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.streamOutputs.push(exports.StreamOutput.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    message.segmentOutputs.push(exports.SegmentedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    message.imageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            url: isSet(object.url) ? String(object.url) : \"\",\n            audioOnly: isSet(object.audioOnly) ? Boolean(object.audioOnly) : false,\n            videoOnly: isSet(object.videoOnly) ? Boolean(object.videoOnly) : false,\n            awaitStartSignal: isSet(object.awaitStartSignal) ? Boolean(object.awaitStartSignal) : false,\n            file: isSet(object.file) ? exports.EncodedFileOutput.fromJSON(object.file) : undefined,\n            stream: isSet(object.stream) ? exports.StreamOutput.fromJSON(object.stream) : undefined,\n            segments: isSet(object.segments) ? exports.SegmentedFileOutput.fromJSON(object.segments) : undefined,\n            preset: isSet(object.preset) ? encodingOptionsPresetFromJSON(object.preset) : undefined,\n            advanced: isSet(object.advanced) ? exports.EncodingOptions.fromJSON(object.advanced) : undefined,\n            fileOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.fileOutputs) ? object.fileOutputs.map((e)=>exports.EncodedFileOutput.fromJSON(e)) : [],\n            streamOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.streamOutputs) ? object.streamOutputs.map((e)=>exports.StreamOutput.fromJSON(e)) : [],\n            segmentOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentOutputs) ? object.segmentOutputs.map((e)=>exports.SegmentedFileOutput.fromJSON(e)) : [],\n            imageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.imageOutputs) ? object.imageOutputs.map((e)=>exports.ImageOutput.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.url !== undefined && (obj.url = message.url);\n        message.audioOnly !== undefined && (obj.audioOnly = message.audioOnly);\n        message.videoOnly !== undefined && (obj.videoOnly = message.videoOnly);\n        message.awaitStartSignal !== undefined && (obj.awaitStartSignal = message.awaitStartSignal);\n        message.file !== undefined && (obj.file = message.file ? exports.EncodedFileOutput.toJSON(message.file) : undefined);\n        message.stream !== undefined && (obj.stream = message.stream ? exports.StreamOutput.toJSON(message.stream) : undefined);\n        message.segments !== undefined && (obj.segments = message.segments ? exports.SegmentedFileOutput.toJSON(message.segments) : undefined);\n        message.preset !== undefined && (obj.preset = message.preset !== undefined ? encodingOptionsPresetToJSON(message.preset) : undefined);\n        message.advanced !== undefined && (obj.advanced = message.advanced ? exports.EncodingOptions.toJSON(message.advanced) : undefined);\n        if (message.fileOutputs) {\n            obj.fileOutputs = message.fileOutputs.map((e)=>e ? exports.EncodedFileOutput.toJSON(e) : undefined);\n        } else {\n            obj.fileOutputs = [];\n        }\n        if (message.streamOutputs) {\n            obj.streamOutputs = message.streamOutputs.map((e)=>e ? exports.StreamOutput.toJSON(e) : undefined);\n        } else {\n            obj.streamOutputs = [];\n        }\n        if (message.segmentOutputs) {\n            obj.segmentOutputs = message.segmentOutputs.map((e)=>e ? exports.SegmentedFileOutput.toJSON(e) : undefined);\n        } else {\n            obj.segmentOutputs = [];\n        }\n        if (message.imageOutputs) {\n            obj.imageOutputs = message.imageOutputs.map((e)=>e ? exports.ImageOutput.toJSON(e) : undefined);\n        } else {\n            obj.imageOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const message = createBaseWebEgressRequest();\n        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : \"\";\n        message.audioOnly = (_b = object.audioOnly) !== null && _b !== void 0 ? _b : false;\n        message.videoOnly = (_c = object.videoOnly) !== null && _c !== void 0 ? _c : false;\n        message.awaitStartSignal = (_d = object.awaitStartSignal) !== null && _d !== void 0 ? _d : false;\n        message.file = object.file !== undefined && object.file !== null ? exports.EncodedFileOutput.fromPartial(object.file) : undefined;\n        message.stream = object.stream !== undefined && object.stream !== null ? exports.StreamOutput.fromPartial(object.stream) : undefined;\n        message.segments = object.segments !== undefined && object.segments !== null ? exports.SegmentedFileOutput.fromPartial(object.segments) : undefined;\n        message.preset = (_e = object.preset) !== null && _e !== void 0 ? _e : undefined;\n        message.advanced = object.advanced !== undefined && object.advanced !== null ? exports.EncodingOptions.fromPartial(object.advanced) : undefined;\n        message.fileOutputs = ((_f = object.fileOutputs) === null || _f === void 0 ? void 0 : _f.map((e)=>exports.EncodedFileOutput.fromPartial(e))) || [];\n        message.streamOutputs = ((_g = object.streamOutputs) === null || _g === void 0 ? void 0 : _g.map((e)=>exports.StreamOutput.fromPartial(e))) || [];\n        message.segmentOutputs = ((_h = object.segmentOutputs) === null || _h === void 0 ? void 0 : _h.map((e)=>exports.SegmentedFileOutput.fromPartial(e))) || [];\n        message.imageOutputs = ((_j = object.imageOutputs) === null || _j === void 0 ? void 0 : _j.map((e)=>exports.ImageOutput.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseParticipantEgressRequest() {\n    return {\n        roomName: \"\",\n        identity: \"\",\n        screenShare: false,\n        preset: undefined,\n        advanced: undefined,\n        fileOutputs: [],\n        streamOutputs: [],\n        segmentOutputs: [],\n        imageOutputs: []\n    };\n}\nexports.ParticipantEgressRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.identity !== undefined && message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        if (message.screenShare === true) {\n            writer.uint32(24).bool(message.screenShare);\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(32).int32(message.preset);\n        }\n        if (message.advanced !== undefined) {\n            exports.EncodingOptions.encode(message.advanced, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.fileOutputs !== undefined && message.fileOutputs.length !== 0) {\n            for (const v of message.fileOutputs){\n                exports.EncodedFileOutput.encode(v, writer.uint32(50).fork()).ldelim();\n            }\n        }\n        if (message.streamOutputs !== undefined && message.streamOutputs.length !== 0) {\n            for (const v of message.streamOutputs){\n                exports.StreamOutput.encode(v, writer.uint32(58).fork()).ldelim();\n            }\n        }\n        if (message.segmentOutputs !== undefined && message.segmentOutputs.length !== 0) {\n            for (const v of message.segmentOutputs){\n                exports.SegmentedFileOutput.encode(v, writer.uint32(66).fork()).ldelim();\n            }\n        }\n        if (message.imageOutputs !== undefined && message.imageOutputs.length !== 0) {\n            for (const v of message.imageOutputs){\n                exports.ImageOutput.encode(v, writer.uint32(74).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParticipantEgressRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                case 3:\n                    message.screenShare = reader.bool();\n                    break;\n                case 4:\n                    message.preset = reader.int32();\n                    break;\n                case 5:\n                    message.advanced = exports.EncodingOptions.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.fileOutputs.push(exports.EncodedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 7:\n                    message.streamOutputs.push(exports.StreamOutput.decode(reader, reader.uint32()));\n                    break;\n                case 8:\n                    message.segmentOutputs.push(exports.SegmentedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 9:\n                    message.imageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\",\n            screenShare: isSet(object.screenShare) ? Boolean(object.screenShare) : false,\n            preset: isSet(object.preset) ? encodingOptionsPresetFromJSON(object.preset) : undefined,\n            advanced: isSet(object.advanced) ? exports.EncodingOptions.fromJSON(object.advanced) : undefined,\n            fileOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.fileOutputs) ? object.fileOutputs.map((e)=>exports.EncodedFileOutput.fromJSON(e)) : [],\n            streamOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.streamOutputs) ? object.streamOutputs.map((e)=>exports.StreamOutput.fromJSON(e)) : [],\n            segmentOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentOutputs) ? object.segmentOutputs.map((e)=>exports.SegmentedFileOutput.fromJSON(e)) : [],\n            imageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.imageOutputs) ? object.imageOutputs.map((e)=>exports.ImageOutput.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.identity !== undefined && (obj.identity = message.identity);\n        message.screenShare !== undefined && (obj.screenShare = message.screenShare);\n        message.preset !== undefined && (obj.preset = message.preset !== undefined ? encodingOptionsPresetToJSON(message.preset) : undefined);\n        message.advanced !== undefined && (obj.advanced = message.advanced ? exports.EncodingOptions.toJSON(message.advanced) : undefined);\n        if (message.fileOutputs) {\n            obj.fileOutputs = message.fileOutputs.map((e)=>e ? exports.EncodedFileOutput.toJSON(e) : undefined);\n        } else {\n            obj.fileOutputs = [];\n        }\n        if (message.streamOutputs) {\n            obj.streamOutputs = message.streamOutputs.map((e)=>e ? exports.StreamOutput.toJSON(e) : undefined);\n        } else {\n            obj.streamOutputs = [];\n        }\n        if (message.segmentOutputs) {\n            obj.segmentOutputs = message.segmentOutputs.map((e)=>e ? exports.SegmentedFileOutput.toJSON(e) : undefined);\n        } else {\n            obj.segmentOutputs = [];\n        }\n        if (message.imageOutputs) {\n            obj.imageOutputs = message.imageOutputs.map((e)=>e ? exports.ImageOutput.toJSON(e) : undefined);\n        } else {\n            obj.imageOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const message = createBaseParticipantEgressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        message.screenShare = (_c = object.screenShare) !== null && _c !== void 0 ? _c : false;\n        message.preset = (_d = object.preset) !== null && _d !== void 0 ? _d : undefined;\n        message.advanced = object.advanced !== undefined && object.advanced !== null ? exports.EncodingOptions.fromPartial(object.advanced) : undefined;\n        message.fileOutputs = ((_e = object.fileOutputs) === null || _e === void 0 ? void 0 : _e.map((e)=>exports.EncodedFileOutput.fromPartial(e))) || [];\n        message.streamOutputs = ((_f = object.streamOutputs) === null || _f === void 0 ? void 0 : _f.map((e)=>exports.StreamOutput.fromPartial(e))) || [];\n        message.segmentOutputs = ((_g = object.segmentOutputs) === null || _g === void 0 ? void 0 : _g.map((e)=>exports.SegmentedFileOutput.fromPartial(e))) || [];\n        message.imageOutputs = ((_h = object.imageOutputs) === null || _h === void 0 ? void 0 : _h.map((e)=>exports.ImageOutput.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseTrackCompositeEgressRequest() {\n    return {\n        roomName: \"\",\n        audioTrackId: \"\",\n        videoTrackId: \"\",\n        file: undefined,\n        stream: undefined,\n        segments: undefined,\n        preset: undefined,\n        advanced: undefined,\n        fileOutputs: [],\n        streamOutputs: [],\n        segmentOutputs: [],\n        imageOutputs: []\n    };\n}\nexports.TrackCompositeEgressRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.audioTrackId !== undefined && message.audioTrackId !== \"\") {\n            writer.uint32(18).string(message.audioTrackId);\n        }\n        if (message.videoTrackId !== undefined && message.videoTrackId !== \"\") {\n            writer.uint32(26).string(message.videoTrackId);\n        }\n        if (message.file !== undefined) {\n            exports.EncodedFileOutput.encode(message.file, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.stream !== undefined) {\n            exports.StreamOutput.encode(message.stream, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.segments !== undefined) {\n            exports.SegmentedFileOutput.encode(message.segments, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(48).int32(message.preset);\n        }\n        if (message.advanced !== undefined) {\n            exports.EncodingOptions.encode(message.advanced, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.fileOutputs !== undefined && message.fileOutputs.length !== 0) {\n            for (const v of message.fileOutputs){\n                exports.EncodedFileOutput.encode(v, writer.uint32(90).fork()).ldelim();\n            }\n        }\n        if (message.streamOutputs !== undefined && message.streamOutputs.length !== 0) {\n            for (const v of message.streamOutputs){\n                exports.StreamOutput.encode(v, writer.uint32(98).fork()).ldelim();\n            }\n        }\n        if (message.segmentOutputs !== undefined && message.segmentOutputs.length !== 0) {\n            for (const v of message.segmentOutputs){\n                exports.SegmentedFileOutput.encode(v, writer.uint32(106).fork()).ldelim();\n            }\n        }\n        if (message.imageOutputs !== undefined && message.imageOutputs.length !== 0) {\n            for (const v of message.imageOutputs){\n                exports.ImageOutput.encode(v, writer.uint32(114).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTrackCompositeEgressRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.audioTrackId = reader.string();\n                    break;\n                case 3:\n                    message.videoTrackId = reader.string();\n                    break;\n                case 4:\n                    message.file = exports.EncodedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.stream = exports.StreamOutput.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.segments = exports.SegmentedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.preset = reader.int32();\n                    break;\n                case 7:\n                    message.advanced = exports.EncodingOptions.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.fileOutputs.push(exports.EncodedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    message.streamOutputs.push(exports.StreamOutput.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    message.segmentOutputs.push(exports.SegmentedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.imageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            audioTrackId: isSet(object.audioTrackId) ? String(object.audioTrackId) : \"\",\n            videoTrackId: isSet(object.videoTrackId) ? String(object.videoTrackId) : \"\",\n            file: isSet(object.file) ? exports.EncodedFileOutput.fromJSON(object.file) : undefined,\n            stream: isSet(object.stream) ? exports.StreamOutput.fromJSON(object.stream) : undefined,\n            segments: isSet(object.segments) ? exports.SegmentedFileOutput.fromJSON(object.segments) : undefined,\n            preset: isSet(object.preset) ? encodingOptionsPresetFromJSON(object.preset) : undefined,\n            advanced: isSet(object.advanced) ? exports.EncodingOptions.fromJSON(object.advanced) : undefined,\n            fileOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.fileOutputs) ? object.fileOutputs.map((e)=>exports.EncodedFileOutput.fromJSON(e)) : [],\n            streamOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.streamOutputs) ? object.streamOutputs.map((e)=>exports.StreamOutput.fromJSON(e)) : [],\n            segmentOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentOutputs) ? object.segmentOutputs.map((e)=>exports.SegmentedFileOutput.fromJSON(e)) : [],\n            imageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.imageOutputs) ? object.imageOutputs.map((e)=>exports.ImageOutput.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.audioTrackId !== undefined && (obj.audioTrackId = message.audioTrackId);\n        message.videoTrackId !== undefined && (obj.videoTrackId = message.videoTrackId);\n        message.file !== undefined && (obj.file = message.file ? exports.EncodedFileOutput.toJSON(message.file) : undefined);\n        message.stream !== undefined && (obj.stream = message.stream ? exports.StreamOutput.toJSON(message.stream) : undefined);\n        message.segments !== undefined && (obj.segments = message.segments ? exports.SegmentedFileOutput.toJSON(message.segments) : undefined);\n        message.preset !== undefined && (obj.preset = message.preset !== undefined ? encodingOptionsPresetToJSON(message.preset) : undefined);\n        message.advanced !== undefined && (obj.advanced = message.advanced ? exports.EncodingOptions.toJSON(message.advanced) : undefined);\n        if (message.fileOutputs) {\n            obj.fileOutputs = message.fileOutputs.map((e)=>e ? exports.EncodedFileOutput.toJSON(e) : undefined);\n        } else {\n            obj.fileOutputs = [];\n        }\n        if (message.streamOutputs) {\n            obj.streamOutputs = message.streamOutputs.map((e)=>e ? exports.StreamOutput.toJSON(e) : undefined);\n        } else {\n            obj.streamOutputs = [];\n        }\n        if (message.segmentOutputs) {\n            obj.segmentOutputs = message.segmentOutputs.map((e)=>e ? exports.SegmentedFileOutput.toJSON(e) : undefined);\n        } else {\n            obj.segmentOutputs = [];\n        }\n        if (message.imageOutputs) {\n            obj.imageOutputs = message.imageOutputs.map((e)=>e ? exports.ImageOutput.toJSON(e) : undefined);\n        } else {\n            obj.imageOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const message = createBaseTrackCompositeEgressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.audioTrackId = (_b = object.audioTrackId) !== null && _b !== void 0 ? _b : \"\";\n        message.videoTrackId = (_c = object.videoTrackId) !== null && _c !== void 0 ? _c : \"\";\n        message.file = object.file !== undefined && object.file !== null ? exports.EncodedFileOutput.fromPartial(object.file) : undefined;\n        message.stream = object.stream !== undefined && object.stream !== null ? exports.StreamOutput.fromPartial(object.stream) : undefined;\n        message.segments = object.segments !== undefined && object.segments !== null ? exports.SegmentedFileOutput.fromPartial(object.segments) : undefined;\n        message.preset = (_d = object.preset) !== null && _d !== void 0 ? _d : undefined;\n        message.advanced = object.advanced !== undefined && object.advanced !== null ? exports.EncodingOptions.fromPartial(object.advanced) : undefined;\n        message.fileOutputs = ((_e = object.fileOutputs) === null || _e === void 0 ? void 0 : _e.map((e)=>exports.EncodedFileOutput.fromPartial(e))) || [];\n        message.streamOutputs = ((_f = object.streamOutputs) === null || _f === void 0 ? void 0 : _f.map((e)=>exports.StreamOutput.fromPartial(e))) || [];\n        message.segmentOutputs = ((_g = object.segmentOutputs) === null || _g === void 0 ? void 0 : _g.map((e)=>exports.SegmentedFileOutput.fromPartial(e))) || [];\n        message.imageOutputs = ((_h = object.imageOutputs) === null || _h === void 0 ? void 0 : _h.map((e)=>exports.ImageOutput.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseTrackEgressRequest() {\n    return {\n        roomName: \"\",\n        trackId: \"\",\n        file: undefined,\n        websocketUrl: undefined\n    };\n}\nexports.TrackEgressRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.trackId !== undefined && message.trackId !== \"\") {\n            writer.uint32(18).string(message.trackId);\n        }\n        if (message.file !== undefined) {\n            exports.DirectFileOutput.encode(message.file, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.websocketUrl !== undefined) {\n            writer.uint32(34).string(message.websocketUrl);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTrackEgressRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.trackId = reader.string();\n                    break;\n                case 3:\n                    message.file = exports.DirectFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.websocketUrl = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            trackId: isSet(object.trackId) ? String(object.trackId) : \"\",\n            file: isSet(object.file) ? exports.DirectFileOutput.fromJSON(object.file) : undefined,\n            websocketUrl: isSet(object.websocketUrl) ? String(object.websocketUrl) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.trackId !== undefined && (obj.trackId = message.trackId);\n        message.file !== undefined && (obj.file = message.file ? exports.DirectFileOutput.toJSON(message.file) : undefined);\n        message.websocketUrl !== undefined && (obj.websocketUrl = message.websocketUrl);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseTrackEgressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.trackId = (_b = object.trackId) !== null && _b !== void 0 ? _b : \"\";\n        message.file = object.file !== undefined && object.file !== null ? exports.DirectFileOutput.fromPartial(object.file) : undefined;\n        message.websocketUrl = (_c = object.websocketUrl) !== null && _c !== void 0 ? _c : undefined;\n        return message;\n    }\n};\nfunction createBaseEncodedFileOutput() {\n    return {\n        fileType: 0,\n        filepath: \"\",\n        disableManifest: false,\n        s3: undefined,\n        gcp: undefined,\n        azure: undefined,\n        aliOSS: undefined\n    };\n}\nexports.EncodedFileOutput = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.fileType !== undefined && message.fileType !== 0) {\n            writer.uint32(8).int32(message.fileType);\n        }\n        if (message.filepath !== undefined && message.filepath !== \"\") {\n            writer.uint32(18).string(message.filepath);\n        }\n        if (message.disableManifest === true) {\n            writer.uint32(48).bool(message.disableManifest);\n        }\n        if (message.s3 !== undefined) {\n            exports.S3Upload.encode(message.s3, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.gcp !== undefined) {\n            exports.GCPUpload.encode(message.gcp, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.azure !== undefined) {\n            exports.AzureBlobUpload.encode(message.azure, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.aliOSS !== undefined) {\n            exports.AliOSSUpload.encode(message.aliOSS, writer.uint32(58).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncodedFileOutput();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.fileType = reader.int32();\n                    break;\n                case 2:\n                    message.filepath = reader.string();\n                    break;\n                case 6:\n                    message.disableManifest = reader.bool();\n                    break;\n                case 3:\n                    message.s3 = exports.S3Upload.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.gcp = exports.GCPUpload.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.azure = exports.AzureBlobUpload.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.aliOSS = exports.AliOSSUpload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            fileType: isSet(object.fileType) ? encodedFileTypeFromJSON(object.fileType) : 0,\n            filepath: isSet(object.filepath) ? String(object.filepath) : \"\",\n            disableManifest: isSet(object.disableManifest) ? Boolean(object.disableManifest) : false,\n            s3: isSet(object.s3) ? exports.S3Upload.fromJSON(object.s3) : undefined,\n            gcp: isSet(object.gcp) ? exports.GCPUpload.fromJSON(object.gcp) : undefined,\n            azure: isSet(object.azure) ? exports.AzureBlobUpload.fromJSON(object.azure) : undefined,\n            aliOSS: isSet(object.aliOSS) ? exports.AliOSSUpload.fromJSON(object.aliOSS) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.fileType !== undefined && (obj.fileType = encodedFileTypeToJSON(message.fileType));\n        message.filepath !== undefined && (obj.filepath = message.filepath);\n        message.disableManifest !== undefined && (obj.disableManifest = message.disableManifest);\n        message.s3 !== undefined && (obj.s3 = message.s3 ? exports.S3Upload.toJSON(message.s3) : undefined);\n        message.gcp !== undefined && (obj.gcp = message.gcp ? exports.GCPUpload.toJSON(message.gcp) : undefined);\n        message.azure !== undefined && (obj.azure = message.azure ? exports.AzureBlobUpload.toJSON(message.azure) : undefined);\n        message.aliOSS !== undefined && (obj.aliOSS = message.aliOSS ? exports.AliOSSUpload.toJSON(message.aliOSS) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseEncodedFileOutput();\n        message.fileType = (_a = object.fileType) !== null && _a !== void 0 ? _a : 0;\n        message.filepath = (_b = object.filepath) !== null && _b !== void 0 ? _b : \"\";\n        message.disableManifest = (_c = object.disableManifest) !== null && _c !== void 0 ? _c : false;\n        message.s3 = object.s3 !== undefined && object.s3 !== null ? exports.S3Upload.fromPartial(object.s3) : undefined;\n        message.gcp = object.gcp !== undefined && object.gcp !== null ? exports.GCPUpload.fromPartial(object.gcp) : undefined;\n        message.azure = object.azure !== undefined && object.azure !== null ? exports.AzureBlobUpload.fromPartial(object.azure) : undefined;\n        message.aliOSS = object.aliOSS !== undefined && object.aliOSS !== null ? exports.AliOSSUpload.fromPartial(object.aliOSS) : undefined;\n        return message;\n    }\n};\nfunction createBaseSegmentedFileOutput() {\n    return {\n        protocol: 0,\n        filenamePrefix: \"\",\n        playlistName: \"\",\n        livePlaylistName: \"\",\n        segmentDuration: 0,\n        filenameSuffix: 0,\n        disableManifest: false,\n        s3: undefined,\n        gcp: undefined,\n        azure: undefined,\n        aliOSS: undefined\n    };\n}\nexports.SegmentedFileOutput = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.protocol !== undefined && message.protocol !== 0) {\n            writer.uint32(8).int32(message.protocol);\n        }\n        if (message.filenamePrefix !== undefined && message.filenamePrefix !== \"\") {\n            writer.uint32(18).string(message.filenamePrefix);\n        }\n        if (message.playlistName !== undefined && message.playlistName !== \"\") {\n            writer.uint32(26).string(message.playlistName);\n        }\n        if (message.livePlaylistName !== undefined && message.livePlaylistName !== \"\") {\n            writer.uint32(90).string(message.livePlaylistName);\n        }\n        if (message.segmentDuration !== undefined && message.segmentDuration !== 0) {\n            writer.uint32(32).uint32(message.segmentDuration);\n        }\n        if (message.filenameSuffix !== undefined && message.filenameSuffix !== 0) {\n            writer.uint32(80).int32(message.filenameSuffix);\n        }\n        if (message.disableManifest === true) {\n            writer.uint32(64).bool(message.disableManifest);\n        }\n        if (message.s3 !== undefined) {\n            exports.S3Upload.encode(message.s3, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.gcp !== undefined) {\n            exports.GCPUpload.encode(message.gcp, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.azure !== undefined) {\n            exports.AzureBlobUpload.encode(message.azure, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.aliOSS !== undefined) {\n            exports.AliOSSUpload.encode(message.aliOSS, writer.uint32(74).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSegmentedFileOutput();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.protocol = reader.int32();\n                    break;\n                case 2:\n                    message.filenamePrefix = reader.string();\n                    break;\n                case 3:\n                    message.playlistName = reader.string();\n                    break;\n                case 11:\n                    message.livePlaylistName = reader.string();\n                    break;\n                case 4:\n                    message.segmentDuration = reader.uint32();\n                    break;\n                case 10:\n                    message.filenameSuffix = reader.int32();\n                    break;\n                case 8:\n                    message.disableManifest = reader.bool();\n                    break;\n                case 5:\n                    message.s3 = exports.S3Upload.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.gcp = exports.GCPUpload.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.azure = exports.AzureBlobUpload.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.aliOSS = exports.AliOSSUpload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            protocol: isSet(object.protocol) ? segmentedFileProtocolFromJSON(object.protocol) : 0,\n            filenamePrefix: isSet(object.filenamePrefix) ? String(object.filenamePrefix) : \"\",\n            playlistName: isSet(object.playlistName) ? String(object.playlistName) : \"\",\n            livePlaylistName: isSet(object.livePlaylistName) ? String(object.livePlaylistName) : \"\",\n            segmentDuration: isSet(object.segmentDuration) ? Number(object.segmentDuration) : 0,\n            filenameSuffix: isSet(object.filenameSuffix) ? segmentedFileSuffixFromJSON(object.filenameSuffix) : 0,\n            disableManifest: isSet(object.disableManifest) ? Boolean(object.disableManifest) : false,\n            s3: isSet(object.s3) ? exports.S3Upload.fromJSON(object.s3) : undefined,\n            gcp: isSet(object.gcp) ? exports.GCPUpload.fromJSON(object.gcp) : undefined,\n            azure: isSet(object.azure) ? exports.AzureBlobUpload.fromJSON(object.azure) : undefined,\n            aliOSS: isSet(object.aliOSS) ? exports.AliOSSUpload.fromJSON(object.aliOSS) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.protocol !== undefined && (obj.protocol = segmentedFileProtocolToJSON(message.protocol));\n        message.filenamePrefix !== undefined && (obj.filenamePrefix = message.filenamePrefix);\n        message.playlistName !== undefined && (obj.playlistName = message.playlistName);\n        message.livePlaylistName !== undefined && (obj.livePlaylistName = message.livePlaylistName);\n        message.segmentDuration !== undefined && (obj.segmentDuration = Math.round(message.segmentDuration));\n        message.filenameSuffix !== undefined && (obj.filenameSuffix = segmentedFileSuffixToJSON(message.filenameSuffix));\n        message.disableManifest !== undefined && (obj.disableManifest = message.disableManifest);\n        message.s3 !== undefined && (obj.s3 = message.s3 ? exports.S3Upload.toJSON(message.s3) : undefined);\n        message.gcp !== undefined && (obj.gcp = message.gcp ? exports.GCPUpload.toJSON(message.gcp) : undefined);\n        message.azure !== undefined && (obj.azure = message.azure ? exports.AzureBlobUpload.toJSON(message.azure) : undefined);\n        message.aliOSS !== undefined && (obj.aliOSS = message.aliOSS ? exports.AliOSSUpload.toJSON(message.aliOSS) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const message = createBaseSegmentedFileOutput();\n        message.protocol = (_a = object.protocol) !== null && _a !== void 0 ? _a : 0;\n        message.filenamePrefix = (_b = object.filenamePrefix) !== null && _b !== void 0 ? _b : \"\";\n        message.playlistName = (_c = object.playlistName) !== null && _c !== void 0 ? _c : \"\";\n        message.livePlaylistName = (_d = object.livePlaylistName) !== null && _d !== void 0 ? _d : \"\";\n        message.segmentDuration = (_e = object.segmentDuration) !== null && _e !== void 0 ? _e : 0;\n        message.filenameSuffix = (_f = object.filenameSuffix) !== null && _f !== void 0 ? _f : 0;\n        message.disableManifest = (_g = object.disableManifest) !== null && _g !== void 0 ? _g : false;\n        message.s3 = object.s3 !== undefined && object.s3 !== null ? exports.S3Upload.fromPartial(object.s3) : undefined;\n        message.gcp = object.gcp !== undefined && object.gcp !== null ? exports.GCPUpload.fromPartial(object.gcp) : undefined;\n        message.azure = object.azure !== undefined && object.azure !== null ? exports.AzureBlobUpload.fromPartial(object.azure) : undefined;\n        message.aliOSS = object.aliOSS !== undefined && object.aliOSS !== null ? exports.AliOSSUpload.fromPartial(object.aliOSS) : undefined;\n        return message;\n    }\n};\nfunction createBaseDirectFileOutput() {\n    return {\n        filepath: \"\",\n        disableManifest: false,\n        s3: undefined,\n        gcp: undefined,\n        azure: undefined,\n        aliOSS: undefined\n    };\n}\nexports.DirectFileOutput = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.filepath !== undefined && message.filepath !== \"\") {\n            writer.uint32(10).string(message.filepath);\n        }\n        if (message.disableManifest === true) {\n            writer.uint32(40).bool(message.disableManifest);\n        }\n        if (message.s3 !== undefined) {\n            exports.S3Upload.encode(message.s3, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.gcp !== undefined) {\n            exports.GCPUpload.encode(message.gcp, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.azure !== undefined) {\n            exports.AzureBlobUpload.encode(message.azure, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.aliOSS !== undefined) {\n            exports.AliOSSUpload.encode(message.aliOSS, writer.uint32(50).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDirectFileOutput();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.filepath = reader.string();\n                    break;\n                case 5:\n                    message.disableManifest = reader.bool();\n                    break;\n                case 2:\n                    message.s3 = exports.S3Upload.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.gcp = exports.GCPUpload.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.azure = exports.AzureBlobUpload.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.aliOSS = exports.AliOSSUpload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            filepath: isSet(object.filepath) ? String(object.filepath) : \"\",\n            disableManifest: isSet(object.disableManifest) ? Boolean(object.disableManifest) : false,\n            s3: isSet(object.s3) ? exports.S3Upload.fromJSON(object.s3) : undefined,\n            gcp: isSet(object.gcp) ? exports.GCPUpload.fromJSON(object.gcp) : undefined,\n            azure: isSet(object.azure) ? exports.AzureBlobUpload.fromJSON(object.azure) : undefined,\n            aliOSS: isSet(object.aliOSS) ? exports.AliOSSUpload.fromJSON(object.aliOSS) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.filepath !== undefined && (obj.filepath = message.filepath);\n        message.disableManifest !== undefined && (obj.disableManifest = message.disableManifest);\n        message.s3 !== undefined && (obj.s3 = message.s3 ? exports.S3Upload.toJSON(message.s3) : undefined);\n        message.gcp !== undefined && (obj.gcp = message.gcp ? exports.GCPUpload.toJSON(message.gcp) : undefined);\n        message.azure !== undefined && (obj.azure = message.azure ? exports.AzureBlobUpload.toJSON(message.azure) : undefined);\n        message.aliOSS !== undefined && (obj.aliOSS = message.aliOSS ? exports.AliOSSUpload.toJSON(message.aliOSS) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseDirectFileOutput();\n        message.filepath = (_a = object.filepath) !== null && _a !== void 0 ? _a : \"\";\n        message.disableManifest = (_b = object.disableManifest) !== null && _b !== void 0 ? _b : false;\n        message.s3 = object.s3 !== undefined && object.s3 !== null ? exports.S3Upload.fromPartial(object.s3) : undefined;\n        message.gcp = object.gcp !== undefined && object.gcp !== null ? exports.GCPUpload.fromPartial(object.gcp) : undefined;\n        message.azure = object.azure !== undefined && object.azure !== null ? exports.AzureBlobUpload.fromPartial(object.azure) : undefined;\n        message.aliOSS = object.aliOSS !== undefined && object.aliOSS !== null ? exports.AliOSSUpload.fromPartial(object.aliOSS) : undefined;\n        return message;\n    }\n};\nfunction createBaseImageOutput() {\n    return {\n        captureInterval: 0,\n        width: 0,\n        height: 0,\n        filenamePrefix: \"\",\n        filenameSuffix: 0,\n        imageCodec: 0,\n        disableManifest: false,\n        s3: undefined,\n        gcp: undefined,\n        azure: undefined,\n        aliOSS: undefined\n    };\n}\nexports.ImageOutput = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.captureInterval !== undefined && message.captureInterval !== 0) {\n            writer.uint32(8).uint32(message.captureInterval);\n        }\n        if (message.width !== undefined && message.width !== 0) {\n            writer.uint32(16).int32(message.width);\n        }\n        if (message.height !== undefined && message.height !== 0) {\n            writer.uint32(24).int32(message.height);\n        }\n        if (message.filenamePrefix !== undefined && message.filenamePrefix !== \"\") {\n            writer.uint32(34).string(message.filenamePrefix);\n        }\n        if (message.filenameSuffix !== undefined && message.filenameSuffix !== 0) {\n            writer.uint32(40).int32(message.filenameSuffix);\n        }\n        if (message.imageCodec !== undefined && message.imageCodec !== 0) {\n            writer.uint32(48).int32(message.imageCodec);\n        }\n        if (message.disableManifest === true) {\n            writer.uint32(56).bool(message.disableManifest);\n        }\n        if (message.s3 !== undefined) {\n            exports.S3Upload.encode(message.s3, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.gcp !== undefined) {\n            exports.GCPUpload.encode(message.gcp, writer.uint32(74).fork()).ldelim();\n        }\n        if (message.azure !== undefined) {\n            exports.AzureBlobUpload.encode(message.azure, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.aliOSS !== undefined) {\n            exports.AliOSSUpload.encode(message.aliOSS, writer.uint32(90).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseImageOutput();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.captureInterval = reader.uint32();\n                    break;\n                case 2:\n                    message.width = reader.int32();\n                    break;\n                case 3:\n                    message.height = reader.int32();\n                    break;\n                case 4:\n                    message.filenamePrefix = reader.string();\n                    break;\n                case 5:\n                    message.filenameSuffix = reader.int32();\n                    break;\n                case 6:\n                    message.imageCodec = reader.int32();\n                    break;\n                case 7:\n                    message.disableManifest = reader.bool();\n                    break;\n                case 8:\n                    message.s3 = exports.S3Upload.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.gcp = exports.GCPUpload.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.azure = exports.AzureBlobUpload.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.aliOSS = exports.AliOSSUpload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            captureInterval: isSet(object.captureInterval) ? Number(object.captureInterval) : 0,\n            width: isSet(object.width) ? Number(object.width) : 0,\n            height: isSet(object.height) ? Number(object.height) : 0,\n            filenamePrefix: isSet(object.filenamePrefix) ? String(object.filenamePrefix) : \"\",\n            filenameSuffix: isSet(object.filenameSuffix) ? imageFileSuffixFromJSON(object.filenameSuffix) : 0,\n            imageCodec: isSet(object.imageCodec) ? livekit_models_1.imageCodecFromJSON(object.imageCodec) : 0,\n            disableManifest: isSet(object.disableManifest) ? Boolean(object.disableManifest) : false,\n            s3: isSet(object.s3) ? exports.S3Upload.fromJSON(object.s3) : undefined,\n            gcp: isSet(object.gcp) ? exports.GCPUpload.fromJSON(object.gcp) : undefined,\n            azure: isSet(object.azure) ? exports.AzureBlobUpload.fromJSON(object.azure) : undefined,\n            aliOSS: isSet(object.aliOSS) ? exports.AliOSSUpload.fromJSON(object.aliOSS) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.captureInterval !== undefined && (obj.captureInterval = Math.round(message.captureInterval));\n        message.width !== undefined && (obj.width = Math.round(message.width));\n        message.height !== undefined && (obj.height = Math.round(message.height));\n        message.filenamePrefix !== undefined && (obj.filenamePrefix = message.filenamePrefix);\n        message.filenameSuffix !== undefined && (obj.filenameSuffix = imageFileSuffixToJSON(message.filenameSuffix));\n        message.imageCodec !== undefined && (obj.imageCodec = livekit_models_1.imageCodecToJSON(message.imageCodec));\n        message.disableManifest !== undefined && (obj.disableManifest = message.disableManifest);\n        message.s3 !== undefined && (obj.s3 = message.s3 ? exports.S3Upload.toJSON(message.s3) : undefined);\n        message.gcp !== undefined && (obj.gcp = message.gcp ? exports.GCPUpload.toJSON(message.gcp) : undefined);\n        message.azure !== undefined && (obj.azure = message.azure ? exports.AzureBlobUpload.toJSON(message.azure) : undefined);\n        message.aliOSS !== undefined && (obj.aliOSS = message.aliOSS ? exports.AliOSSUpload.toJSON(message.aliOSS) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const message = createBaseImageOutput();\n        message.captureInterval = (_a = object.captureInterval) !== null && _a !== void 0 ? _a : 0;\n        message.width = (_b = object.width) !== null && _b !== void 0 ? _b : 0;\n        message.height = (_c = object.height) !== null && _c !== void 0 ? _c : 0;\n        message.filenamePrefix = (_d = object.filenamePrefix) !== null && _d !== void 0 ? _d : \"\";\n        message.filenameSuffix = (_e = object.filenameSuffix) !== null && _e !== void 0 ? _e : 0;\n        message.imageCodec = (_f = object.imageCodec) !== null && _f !== void 0 ? _f : 0;\n        message.disableManifest = (_g = object.disableManifest) !== null && _g !== void 0 ? _g : false;\n        message.s3 = object.s3 !== undefined && object.s3 !== null ? exports.S3Upload.fromPartial(object.s3) : undefined;\n        message.gcp = object.gcp !== undefined && object.gcp !== null ? exports.GCPUpload.fromPartial(object.gcp) : undefined;\n        message.azure = object.azure !== undefined && object.azure !== null ? exports.AzureBlobUpload.fromPartial(object.azure) : undefined;\n        message.aliOSS = object.aliOSS !== undefined && object.aliOSS !== null ? exports.AliOSSUpload.fromPartial(object.aliOSS) : undefined;\n        return message;\n    }\n};\nfunction createBaseS3Upload() {\n    return {\n        accessKey: \"\",\n        secret: \"\",\n        region: \"\",\n        endpoint: \"\",\n        bucket: \"\",\n        forcePathStyle: false,\n        metadata: {},\n        tagging: \"\"\n    };\n}\nexports.S3Upload = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.accessKey !== undefined && message.accessKey !== \"\") {\n            writer.uint32(10).string(message.accessKey);\n        }\n        if (message.secret !== undefined && message.secret !== \"\") {\n            writer.uint32(18).string(message.secret);\n        }\n        if (message.region !== undefined && message.region !== \"\") {\n            writer.uint32(26).string(message.region);\n        }\n        if (message.endpoint !== undefined && message.endpoint !== \"\") {\n            writer.uint32(34).string(message.endpoint);\n        }\n        if (message.bucket !== undefined && message.bucket !== \"\") {\n            writer.uint32(42).string(message.bucket);\n        }\n        if (message.forcePathStyle === true) {\n            writer.uint32(48).bool(message.forcePathStyle);\n        }\n        Object.entries(message.metadata || {}).forEach(([key, value])=>{\n            exports.S3Upload_MetadataEntry.encode({\n                key: key,\n                value\n            }, writer.uint32(58).fork()).ldelim();\n        });\n        if (message.tagging !== undefined && message.tagging !== \"\") {\n            writer.uint32(66).string(message.tagging);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseS3Upload();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.accessKey = reader.string();\n                    break;\n                case 2:\n                    message.secret = reader.string();\n                    break;\n                case 3:\n                    message.region = reader.string();\n                    break;\n                case 4:\n                    message.endpoint = reader.string();\n                    break;\n                case 5:\n                    message.bucket = reader.string();\n                    break;\n                case 6:\n                    message.forcePathStyle = reader.bool();\n                    break;\n                case 7:\n                    const entry7 = exports.S3Upload_MetadataEntry.decode(reader, reader.uint32());\n                    if (entry7.value !== undefined) {\n                        message.metadata[entry7.key] = entry7.value;\n                    }\n                    break;\n                case 8:\n                    message.tagging = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            accessKey: isSet(object.accessKey) ? String(object.accessKey) : \"\",\n            secret: isSet(object.secret) ? String(object.secret) : \"\",\n            region: isSet(object.region) ? String(object.region) : \"\",\n            endpoint: isSet(object.endpoint) ? String(object.endpoint) : \"\",\n            bucket: isSet(object.bucket) ? String(object.bucket) : \"\",\n            forcePathStyle: isSet(object.forcePathStyle) ? Boolean(object.forcePathStyle) : false,\n            metadata: isObject(object.metadata) ? Object.entries(object.metadata).reduce((acc, [key, value])=>{\n                acc[key] = String(value);\n                return acc;\n            }, {}) : {},\n            tagging: isSet(object.tagging) ? String(object.tagging) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.accessKey !== undefined && (obj.accessKey = message.accessKey);\n        message.secret !== undefined && (obj.secret = message.secret);\n        message.region !== undefined && (obj.region = message.region);\n        message.endpoint !== undefined && (obj.endpoint = message.endpoint);\n        message.bucket !== undefined && (obj.bucket = message.bucket);\n        message.forcePathStyle !== undefined && (obj.forcePathStyle = message.forcePathStyle);\n        obj.metadata = {};\n        if (message.metadata) {\n            Object.entries(message.metadata).forEach(([k, v])=>{\n                obj.metadata[k] = v;\n            });\n        }\n        message.tagging !== undefined && (obj.tagging = message.tagging);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const message = createBaseS3Upload();\n        message.accessKey = (_a = object.accessKey) !== null && _a !== void 0 ? _a : \"\";\n        message.secret = (_b = object.secret) !== null && _b !== void 0 ? _b : \"\";\n        message.region = (_c = object.region) !== null && _c !== void 0 ? _c : \"\";\n        message.endpoint = (_d = object.endpoint) !== null && _d !== void 0 ? _d : \"\";\n        message.bucket = (_e = object.bucket) !== null && _e !== void 0 ? _e : \"\";\n        message.forcePathStyle = (_f = object.forcePathStyle) !== null && _f !== void 0 ? _f : false;\n        message.metadata = Object.entries((_g = object.metadata) !== null && _g !== void 0 ? _g : {}).reduce((acc, [key, value])=>{\n            if (value !== undefined) {\n                acc[key] = String(value);\n            }\n            return acc;\n        }, {});\n        message.tagging = (_h = object.tagging) !== null && _h !== void 0 ? _h : \"\";\n        return message;\n    }\n};\nfunction createBaseS3Upload_MetadataEntry() {\n    return {\n        key: \"\",\n        value: \"\"\n    };\n}\nexports.S3Upload_MetadataEntry = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== \"\") {\n            writer.uint32(18).string(message.value);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseS3Upload_MetadataEntry();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            key: isSet(object.key) ? String(object.key) : \"\",\n            value: isSet(object.value) ? String(object.value) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = message.key);\n        message.value !== undefined && (obj.value = message.value);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseS3Upload_MetadataEntry();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : \"\";\n        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    }\n};\nfunction createBaseGCPUpload() {\n    return {\n        credentials: \"\",\n        bucket: \"\"\n    };\n}\nexports.GCPUpload = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.credentials !== undefined && message.credentials !== \"\") {\n            writer.uint32(10).string(message.credentials);\n        }\n        if (message.bucket !== undefined && message.bucket !== \"\") {\n            writer.uint32(18).string(message.bucket);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGCPUpload();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.credentials = reader.string();\n                    break;\n                case 2:\n                    message.bucket = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            credentials: isSet(object.credentials) ? String(object.credentials) : \"\",\n            bucket: isSet(object.bucket) ? String(object.bucket) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.credentials !== undefined && (obj.credentials = message.credentials);\n        message.bucket !== undefined && (obj.bucket = message.bucket);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseGCPUpload();\n        message.credentials = (_a = object.credentials) !== null && _a !== void 0 ? _a : \"\";\n        message.bucket = (_b = object.bucket) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    }\n};\nfunction createBaseAzureBlobUpload() {\n    return {\n        accountName: \"\",\n        accountKey: \"\",\n        containerName: \"\"\n    };\n}\nexports.AzureBlobUpload = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.accountName !== undefined && message.accountName !== \"\") {\n            writer.uint32(10).string(message.accountName);\n        }\n        if (message.accountKey !== undefined && message.accountKey !== \"\") {\n            writer.uint32(18).string(message.accountKey);\n        }\n        if (message.containerName !== undefined && message.containerName !== \"\") {\n            writer.uint32(26).string(message.containerName);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAzureBlobUpload();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.accountName = reader.string();\n                    break;\n                case 2:\n                    message.accountKey = reader.string();\n                    break;\n                case 3:\n                    message.containerName = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            accountName: isSet(object.accountName) ? String(object.accountName) : \"\",\n            accountKey: isSet(object.accountKey) ? String(object.accountKey) : \"\",\n            containerName: isSet(object.containerName) ? String(object.containerName) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.accountName !== undefined && (obj.accountName = message.accountName);\n        message.accountKey !== undefined && (obj.accountKey = message.accountKey);\n        message.containerName !== undefined && (obj.containerName = message.containerName);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseAzureBlobUpload();\n        message.accountName = (_a = object.accountName) !== null && _a !== void 0 ? _a : \"\";\n        message.accountKey = (_b = object.accountKey) !== null && _b !== void 0 ? _b : \"\";\n        message.containerName = (_c = object.containerName) !== null && _c !== void 0 ? _c : \"\";\n        return message;\n    }\n};\nfunction createBaseAliOSSUpload() {\n    return {\n        accessKey: \"\",\n        secret: \"\",\n        region: \"\",\n        endpoint: \"\",\n        bucket: \"\"\n    };\n}\nexports.AliOSSUpload = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.accessKey !== undefined && message.accessKey !== \"\") {\n            writer.uint32(10).string(message.accessKey);\n        }\n        if (message.secret !== undefined && message.secret !== \"\") {\n            writer.uint32(18).string(message.secret);\n        }\n        if (message.region !== undefined && message.region !== \"\") {\n            writer.uint32(26).string(message.region);\n        }\n        if (message.endpoint !== undefined && message.endpoint !== \"\") {\n            writer.uint32(34).string(message.endpoint);\n        }\n        if (message.bucket !== undefined && message.bucket !== \"\") {\n            writer.uint32(42).string(message.bucket);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAliOSSUpload();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.accessKey = reader.string();\n                    break;\n                case 2:\n                    message.secret = reader.string();\n                    break;\n                case 3:\n                    message.region = reader.string();\n                    break;\n                case 4:\n                    message.endpoint = reader.string();\n                    break;\n                case 5:\n                    message.bucket = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            accessKey: isSet(object.accessKey) ? String(object.accessKey) : \"\",\n            secret: isSet(object.secret) ? String(object.secret) : \"\",\n            region: isSet(object.region) ? String(object.region) : \"\",\n            endpoint: isSet(object.endpoint) ? String(object.endpoint) : \"\",\n            bucket: isSet(object.bucket) ? String(object.bucket) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.accessKey !== undefined && (obj.accessKey = message.accessKey);\n        message.secret !== undefined && (obj.secret = message.secret);\n        message.region !== undefined && (obj.region = message.region);\n        message.endpoint !== undefined && (obj.endpoint = message.endpoint);\n        message.bucket !== undefined && (obj.bucket = message.bucket);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e;\n        const message = createBaseAliOSSUpload();\n        message.accessKey = (_a = object.accessKey) !== null && _a !== void 0 ? _a : \"\";\n        message.secret = (_b = object.secret) !== null && _b !== void 0 ? _b : \"\";\n        message.region = (_c = object.region) !== null && _c !== void 0 ? _c : \"\";\n        message.endpoint = (_d = object.endpoint) !== null && _d !== void 0 ? _d : \"\";\n        message.bucket = (_e = object.bucket) !== null && _e !== void 0 ? _e : \"\";\n        return message;\n    }\n};\nfunction createBaseStreamOutput() {\n    return {\n        protocol: 0,\n        urls: []\n    };\n}\nexports.StreamOutput = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.protocol !== undefined && message.protocol !== 0) {\n            writer.uint32(8).int32(message.protocol);\n        }\n        if (message.urls !== undefined && message.urls.length !== 0) {\n            for (const v of message.urls){\n                writer.uint32(18).string(v);\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStreamOutput();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.protocol = reader.int32();\n                    break;\n                case 2:\n                    message.urls.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            protocol: isSet(object.protocol) ? streamProtocolFromJSON(object.protocol) : 0,\n            urls: Array.isArray(object === null || object === void 0 ? void 0 : object.urls) ? object.urls.map((e)=>String(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.protocol !== undefined && (obj.protocol = streamProtocolToJSON(message.protocol));\n        if (message.urls) {\n            obj.urls = message.urls.map((e)=>e);\n        } else {\n            obj.urls = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseStreamOutput();\n        message.protocol = (_a = object.protocol) !== null && _a !== void 0 ? _a : 0;\n        message.urls = ((_b = object.urls) === null || _b === void 0 ? void 0 : _b.map((e)=>e)) || [];\n        return message;\n    }\n};\nfunction createBaseEncodingOptions() {\n    return {\n        width: 0,\n        height: 0,\n        depth: 0,\n        framerate: 0,\n        audioCodec: 0,\n        audioBitrate: 0,\n        audioFrequency: 0,\n        videoCodec: 0,\n        videoBitrate: 0,\n        keyFrameInterval: 0\n    };\n}\nexports.EncodingOptions = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.width !== undefined && message.width !== 0) {\n            writer.uint32(8).int32(message.width);\n        }\n        if (message.height !== undefined && message.height !== 0) {\n            writer.uint32(16).int32(message.height);\n        }\n        if (message.depth !== undefined && message.depth !== 0) {\n            writer.uint32(24).int32(message.depth);\n        }\n        if (message.framerate !== undefined && message.framerate !== 0) {\n            writer.uint32(32).int32(message.framerate);\n        }\n        if (message.audioCodec !== undefined && message.audioCodec !== 0) {\n            writer.uint32(40).int32(message.audioCodec);\n        }\n        if (message.audioBitrate !== undefined && message.audioBitrate !== 0) {\n            writer.uint32(48).int32(message.audioBitrate);\n        }\n        if (message.audioFrequency !== undefined && message.audioFrequency !== 0) {\n            writer.uint32(56).int32(message.audioFrequency);\n        }\n        if (message.videoCodec !== undefined && message.videoCodec !== 0) {\n            writer.uint32(64).int32(message.videoCodec);\n        }\n        if (message.videoBitrate !== undefined && message.videoBitrate !== 0) {\n            writer.uint32(72).int32(message.videoBitrate);\n        }\n        if (message.keyFrameInterval !== undefined && message.keyFrameInterval !== 0) {\n            writer.uint32(81).double(message.keyFrameInterval);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncodingOptions();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.width = reader.int32();\n                    break;\n                case 2:\n                    message.height = reader.int32();\n                    break;\n                case 3:\n                    message.depth = reader.int32();\n                    break;\n                case 4:\n                    message.framerate = reader.int32();\n                    break;\n                case 5:\n                    message.audioCodec = reader.int32();\n                    break;\n                case 6:\n                    message.audioBitrate = reader.int32();\n                    break;\n                case 7:\n                    message.audioFrequency = reader.int32();\n                    break;\n                case 8:\n                    message.videoCodec = reader.int32();\n                    break;\n                case 9:\n                    message.videoBitrate = reader.int32();\n                    break;\n                case 10:\n                    message.keyFrameInterval = reader.double();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            width: isSet(object.width) ? Number(object.width) : 0,\n            height: isSet(object.height) ? Number(object.height) : 0,\n            depth: isSet(object.depth) ? Number(object.depth) : 0,\n            framerate: isSet(object.framerate) ? Number(object.framerate) : 0,\n            audioCodec: isSet(object.audioCodec) ? livekit_models_1.audioCodecFromJSON(object.audioCodec) : 0,\n            audioBitrate: isSet(object.audioBitrate) ? Number(object.audioBitrate) : 0,\n            audioFrequency: isSet(object.audioFrequency) ? Number(object.audioFrequency) : 0,\n            videoCodec: isSet(object.videoCodec) ? livekit_models_1.videoCodecFromJSON(object.videoCodec) : 0,\n            videoBitrate: isSet(object.videoBitrate) ? Number(object.videoBitrate) : 0,\n            keyFrameInterval: isSet(object.keyFrameInterval) ? Number(object.keyFrameInterval) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.width !== undefined && (obj.width = Math.round(message.width));\n        message.height !== undefined && (obj.height = Math.round(message.height));\n        message.depth !== undefined && (obj.depth = Math.round(message.depth));\n        message.framerate !== undefined && (obj.framerate = Math.round(message.framerate));\n        message.audioCodec !== undefined && (obj.audioCodec = livekit_models_1.audioCodecToJSON(message.audioCodec));\n        message.audioBitrate !== undefined && (obj.audioBitrate = Math.round(message.audioBitrate));\n        message.audioFrequency !== undefined && (obj.audioFrequency = Math.round(message.audioFrequency));\n        message.videoCodec !== undefined && (obj.videoCodec = livekit_models_1.videoCodecToJSON(message.videoCodec));\n        message.videoBitrate !== undefined && (obj.videoBitrate = Math.round(message.videoBitrate));\n        message.keyFrameInterval !== undefined && (obj.keyFrameInterval = message.keyFrameInterval);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        const message = createBaseEncodingOptions();\n        message.width = (_a = object.width) !== null && _a !== void 0 ? _a : 0;\n        message.height = (_b = object.height) !== null && _b !== void 0 ? _b : 0;\n        message.depth = (_c = object.depth) !== null && _c !== void 0 ? _c : 0;\n        message.framerate = (_d = object.framerate) !== null && _d !== void 0 ? _d : 0;\n        message.audioCodec = (_e = object.audioCodec) !== null && _e !== void 0 ? _e : 0;\n        message.audioBitrate = (_f = object.audioBitrate) !== null && _f !== void 0 ? _f : 0;\n        message.audioFrequency = (_g = object.audioFrequency) !== null && _g !== void 0 ? _g : 0;\n        message.videoCodec = (_h = object.videoCodec) !== null && _h !== void 0 ? _h : 0;\n        message.videoBitrate = (_j = object.videoBitrate) !== null && _j !== void 0 ? _j : 0;\n        message.keyFrameInterval = (_k = object.keyFrameInterval) !== null && _k !== void 0 ? _k : 0;\n        return message;\n    }\n};\nfunction createBaseUpdateLayoutRequest() {\n    return {\n        egressId: \"\",\n        layout: \"\"\n    };\n}\nexports.UpdateLayoutRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(10).string(message.egressId);\n        }\n        if (message.layout !== undefined && message.layout !== \"\") {\n            writer.uint32(18).string(message.layout);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateLayoutRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.egressId = reader.string();\n                    break;\n                case 2:\n                    message.layout = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            egressId: isSet(object.egressId) ? String(object.egressId) : \"\",\n            layout: isSet(object.layout) ? String(object.layout) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        message.layout !== undefined && (obj.layout = message.layout);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseUpdateLayoutRequest();\n        message.egressId = (_a = object.egressId) !== null && _a !== void 0 ? _a : \"\";\n        message.layout = (_b = object.layout) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    }\n};\nfunction createBaseUpdateStreamRequest() {\n    return {\n        egressId: \"\",\n        addOutputUrls: [],\n        removeOutputUrls: []\n    };\n}\nexports.UpdateStreamRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(10).string(message.egressId);\n        }\n        if (message.addOutputUrls !== undefined && message.addOutputUrls.length !== 0) {\n            for (const v of message.addOutputUrls){\n                writer.uint32(18).string(v);\n            }\n        }\n        if (message.removeOutputUrls !== undefined && message.removeOutputUrls.length !== 0) {\n            for (const v of message.removeOutputUrls){\n                writer.uint32(26).string(v);\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateStreamRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.egressId = reader.string();\n                    break;\n                case 2:\n                    message.addOutputUrls.push(reader.string());\n                    break;\n                case 3:\n                    message.removeOutputUrls.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            egressId: isSet(object.egressId) ? String(object.egressId) : \"\",\n            addOutputUrls: Array.isArray(object === null || object === void 0 ? void 0 : object.addOutputUrls) ? object.addOutputUrls.map((e)=>String(e)) : [],\n            removeOutputUrls: Array.isArray(object === null || object === void 0 ? void 0 : object.removeOutputUrls) ? object.removeOutputUrls.map((e)=>String(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        if (message.addOutputUrls) {\n            obj.addOutputUrls = message.addOutputUrls.map((e)=>e);\n        } else {\n            obj.addOutputUrls = [];\n        }\n        if (message.removeOutputUrls) {\n            obj.removeOutputUrls = message.removeOutputUrls.map((e)=>e);\n        } else {\n            obj.removeOutputUrls = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseUpdateStreamRequest();\n        message.egressId = (_a = object.egressId) !== null && _a !== void 0 ? _a : \"\";\n        message.addOutputUrls = ((_b = object.addOutputUrls) === null || _b === void 0 ? void 0 : _b.map((e)=>e)) || [];\n        message.removeOutputUrls = ((_c = object.removeOutputUrls) === null || _c === void 0 ? void 0 : _c.map((e)=>e)) || [];\n        return message;\n    }\n};\nfunction createBaseUpdateOutputsRequest() {\n    return {\n        egressId: \"\",\n        addImageOutputs: [],\n        removeImageOutputs: []\n    };\n}\nexports.UpdateOutputsRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(10).string(message.egressId);\n        }\n        if (message.addImageOutputs !== undefined && message.addImageOutputs.length !== 0) {\n            for (const v of message.addImageOutputs){\n                exports.ImageOutput.encode(v, writer.uint32(18).fork()).ldelim();\n            }\n        }\n        if (message.removeImageOutputs !== undefined && message.removeImageOutputs.length !== 0) {\n            for (const v of message.removeImageOutputs){\n                exports.ImageOutput.encode(v, writer.uint32(26).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateOutputsRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.egressId = reader.string();\n                    break;\n                case 2:\n                    message.addImageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.removeImageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            egressId: isSet(object.egressId) ? String(object.egressId) : \"\",\n            addImageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.addImageOutputs) ? object.addImageOutputs.map((e)=>exports.ImageOutput.fromJSON(e)) : [],\n            removeImageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.removeImageOutputs) ? object.removeImageOutputs.map((e)=>exports.ImageOutput.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        if (message.addImageOutputs) {\n            obj.addImageOutputs = message.addImageOutputs.map((e)=>e ? exports.ImageOutput.toJSON(e) : undefined);\n        } else {\n            obj.addImageOutputs = [];\n        }\n        if (message.removeImageOutputs) {\n            obj.removeImageOutputs = message.removeImageOutputs.map((e)=>e ? exports.ImageOutput.toJSON(e) : undefined);\n        } else {\n            obj.removeImageOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseUpdateOutputsRequest();\n        message.egressId = (_a = object.egressId) !== null && _a !== void 0 ? _a : \"\";\n        message.addImageOutputs = ((_b = object.addImageOutputs) === null || _b === void 0 ? void 0 : _b.map((e)=>exports.ImageOutput.fromPartial(e))) || [];\n        message.removeImageOutputs = ((_c = object.removeImageOutputs) === null || _c === void 0 ? void 0 : _c.map((e)=>exports.ImageOutput.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseListEgressRequest() {\n    return {\n        roomName: \"\",\n        egressId: \"\",\n        active: false\n    };\n}\nexports.ListEgressRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(18).string(message.egressId);\n        }\n        if (message.active === true) {\n            writer.uint32(24).bool(message.active);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListEgressRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.egressId = reader.string();\n                    break;\n                case 3:\n                    message.active = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            egressId: isSet(object.egressId) ? String(object.egressId) : \"\",\n            active: isSet(object.active) ? Boolean(object.active) : false\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        message.active !== undefined && (obj.active = message.active);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseListEgressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.egressId = (_b = object.egressId) !== null && _b !== void 0 ? _b : \"\";\n        message.active = (_c = object.active) !== null && _c !== void 0 ? _c : false;\n        return message;\n    }\n};\nfunction createBaseListEgressResponse() {\n    return {\n        items: []\n    };\n}\nexports.ListEgressResponse = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.items !== undefined && message.items.length !== 0) {\n            for (const v of message.items){\n                exports.EgressInfo.encode(v, writer.uint32(10).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListEgressResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.items.push(exports.EgressInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            items: Array.isArray(object === null || object === void 0 ? void 0 : object.items) ? object.items.map((e)=>exports.EgressInfo.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.items) {\n            obj.items = message.items.map((e)=>e ? exports.EgressInfo.toJSON(e) : undefined);\n        } else {\n            obj.items = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseListEgressResponse();\n        message.items = ((_a = object.items) === null || _a === void 0 ? void 0 : _a.map((e)=>exports.EgressInfo.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseStopEgressRequest() {\n    return {\n        egressId: \"\"\n    };\n}\nexports.StopEgressRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(10).string(message.egressId);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStopEgressRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.egressId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            egressId: isSet(object.egressId) ? String(object.egressId) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseStopEgressRequest();\n        message.egressId = (_a = object.egressId) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    }\n};\nfunction createBaseEgressInfo() {\n    return {\n        egressId: \"\",\n        roomId: \"\",\n        roomName: \"\",\n        status: 0,\n        startedAt: 0,\n        endedAt: 0,\n        updatedAt: 0,\n        error: \"\",\n        roomComposite: undefined,\n        web: undefined,\n        participant: undefined,\n        trackComposite: undefined,\n        track: undefined,\n        stream: undefined,\n        file: undefined,\n        segments: undefined,\n        streamResults: [],\n        fileResults: [],\n        segmentResults: [],\n        imageResults: []\n    };\n}\nexports.EgressInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(10).string(message.egressId);\n        }\n        if (message.roomId !== undefined && message.roomId !== \"\") {\n            writer.uint32(18).string(message.roomId);\n        }\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(106).string(message.roomName);\n        }\n        if (message.status !== undefined && message.status !== 0) {\n            writer.uint32(24).int32(message.status);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(80).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(88).int64(message.endedAt);\n        }\n        if (message.updatedAt !== undefined && message.updatedAt !== 0) {\n            writer.uint32(144).int64(message.updatedAt);\n        }\n        if (message.error !== undefined && message.error !== \"\") {\n            writer.uint32(74).string(message.error);\n        }\n        if (message.roomComposite !== undefined) {\n            exports.RoomCompositeEgressRequest.encode(message.roomComposite, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.web !== undefined) {\n            exports.WebEgressRequest.encode(message.web, writer.uint32(114).fork()).ldelim();\n        }\n        if (message.participant !== undefined) {\n            exports.ParticipantEgressRequest.encode(message.participant, writer.uint32(154).fork()).ldelim();\n        }\n        if (message.trackComposite !== undefined) {\n            exports.TrackCompositeEgressRequest.encode(message.trackComposite, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.track !== undefined) {\n            exports.TrackEgressRequest.encode(message.track, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.stream !== undefined) {\n            exports.StreamInfoList.encode(message.stream, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.file !== undefined) {\n            exports.FileInfo.encode(message.file, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.segments !== undefined) {\n            exports.SegmentsInfo.encode(message.segments, writer.uint32(98).fork()).ldelim();\n        }\n        if (message.streamResults !== undefined && message.streamResults.length !== 0) {\n            for (const v of message.streamResults){\n                exports.StreamInfo.encode(v, writer.uint32(122).fork()).ldelim();\n            }\n        }\n        if (message.fileResults !== undefined && message.fileResults.length !== 0) {\n            for (const v of message.fileResults){\n                exports.FileInfo.encode(v, writer.uint32(130).fork()).ldelim();\n            }\n        }\n        if (message.segmentResults !== undefined && message.segmentResults.length !== 0) {\n            for (const v of message.segmentResults){\n                exports.SegmentsInfo.encode(v, writer.uint32(138).fork()).ldelim();\n            }\n        }\n        if (message.imageResults !== undefined && message.imageResults.length !== 0) {\n            for (const v of message.imageResults){\n                exports.ImagesInfo.encode(v, writer.uint32(162).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEgressInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.egressId = reader.string();\n                    break;\n                case 2:\n                    message.roomId = reader.string();\n                    break;\n                case 13:\n                    message.roomName = reader.string();\n                    break;\n                case 3:\n                    message.status = reader.int32();\n                    break;\n                case 10:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 11:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                case 18:\n                    message.updatedAt = longToNumber(reader.int64());\n                    break;\n                case 9:\n                    message.error = reader.string();\n                    break;\n                case 4:\n                    message.roomComposite = exports.RoomCompositeEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    message.web = exports.WebEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 19:\n                    message.participant = exports.ParticipantEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.trackComposite = exports.TrackCompositeEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.track = exports.TrackEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.stream = exports.StreamInfoList.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.file = exports.FileInfo.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.segments = exports.SegmentsInfo.decode(reader, reader.uint32());\n                    break;\n                case 15:\n                    message.streamResults.push(exports.StreamInfo.decode(reader, reader.uint32()));\n                    break;\n                case 16:\n                    message.fileResults.push(exports.FileInfo.decode(reader, reader.uint32()));\n                    break;\n                case 17:\n                    message.segmentResults.push(exports.SegmentsInfo.decode(reader, reader.uint32()));\n                    break;\n                case 20:\n                    message.imageResults.push(exports.ImagesInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            egressId: isSet(object.egressId) ? String(object.egressId) : \"\",\n            roomId: isSet(object.roomId) ? String(object.roomId) : \"\",\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            status: isSet(object.status) ? egressStatusFromJSON(object.status) : 0,\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0,\n            updatedAt: isSet(object.updatedAt) ? Number(object.updatedAt) : 0,\n            error: isSet(object.error) ? String(object.error) : \"\",\n            roomComposite: isSet(object.roomComposite) ? exports.RoomCompositeEgressRequest.fromJSON(object.roomComposite) : undefined,\n            web: isSet(object.web) ? exports.WebEgressRequest.fromJSON(object.web) : undefined,\n            participant: isSet(object.participant) ? exports.ParticipantEgressRequest.fromJSON(object.participant) : undefined,\n            trackComposite: isSet(object.trackComposite) ? exports.TrackCompositeEgressRequest.fromJSON(object.trackComposite) : undefined,\n            track: isSet(object.track) ? exports.TrackEgressRequest.fromJSON(object.track) : undefined,\n            stream: isSet(object.stream) ? exports.StreamInfoList.fromJSON(object.stream) : undefined,\n            file: isSet(object.file) ? exports.FileInfo.fromJSON(object.file) : undefined,\n            segments: isSet(object.segments) ? exports.SegmentsInfo.fromJSON(object.segments) : undefined,\n            streamResults: Array.isArray(object === null || object === void 0 ? void 0 : object.streamResults) ? object.streamResults.map((e)=>exports.StreamInfo.fromJSON(e)) : [],\n            fileResults: Array.isArray(object === null || object === void 0 ? void 0 : object.fileResults) ? object.fileResults.map((e)=>exports.FileInfo.fromJSON(e)) : [],\n            segmentResults: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentResults) ? object.segmentResults.map((e)=>exports.SegmentsInfo.fromJSON(e)) : [],\n            imageResults: Array.isArray(object === null || object === void 0 ? void 0 : object.imageResults) ? object.imageResults.map((e)=>exports.ImagesInfo.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        message.roomId !== undefined && (obj.roomId = message.roomId);\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.status !== undefined && (obj.status = egressStatusToJSON(message.status));\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        message.updatedAt !== undefined && (obj.updatedAt = Math.round(message.updatedAt));\n        message.error !== undefined && (obj.error = message.error);\n        message.roomComposite !== undefined && (obj.roomComposite = message.roomComposite ? exports.RoomCompositeEgressRequest.toJSON(message.roomComposite) : undefined);\n        message.web !== undefined && (obj.web = message.web ? exports.WebEgressRequest.toJSON(message.web) : undefined);\n        message.participant !== undefined && (obj.participant = message.participant ? exports.ParticipantEgressRequest.toJSON(message.participant) : undefined);\n        message.trackComposite !== undefined && (obj.trackComposite = message.trackComposite ? exports.TrackCompositeEgressRequest.toJSON(message.trackComposite) : undefined);\n        message.track !== undefined && (obj.track = message.track ? exports.TrackEgressRequest.toJSON(message.track) : undefined);\n        message.stream !== undefined && (obj.stream = message.stream ? exports.StreamInfoList.toJSON(message.stream) : undefined);\n        message.file !== undefined && (obj.file = message.file ? exports.FileInfo.toJSON(message.file) : undefined);\n        message.segments !== undefined && (obj.segments = message.segments ? exports.SegmentsInfo.toJSON(message.segments) : undefined);\n        if (message.streamResults) {\n            obj.streamResults = message.streamResults.map((e)=>e ? exports.StreamInfo.toJSON(e) : undefined);\n        } else {\n            obj.streamResults = [];\n        }\n        if (message.fileResults) {\n            obj.fileResults = message.fileResults.map((e)=>e ? exports.FileInfo.toJSON(e) : undefined);\n        } else {\n            obj.fileResults = [];\n        }\n        if (message.segmentResults) {\n            obj.segmentResults = message.segmentResults.map((e)=>e ? exports.SegmentsInfo.toJSON(e) : undefined);\n        } else {\n            obj.segmentResults = [];\n        }\n        if (message.imageResults) {\n            obj.imageResults = message.imageResults.map((e)=>e ? exports.ImagesInfo.toJSON(e) : undefined);\n        } else {\n            obj.imageResults = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        const message = createBaseEgressInfo();\n        message.egressId = (_a = object.egressId) !== null && _a !== void 0 ? _a : \"\";\n        message.roomId = (_b = object.roomId) !== null && _b !== void 0 ? _b : \"\";\n        message.roomName = (_c = object.roomName) !== null && _c !== void 0 ? _c : \"\";\n        message.status = (_d = object.status) !== null && _d !== void 0 ? _d : 0;\n        message.startedAt = (_e = object.startedAt) !== null && _e !== void 0 ? _e : 0;\n        message.endedAt = (_f = object.endedAt) !== null && _f !== void 0 ? _f : 0;\n        message.updatedAt = (_g = object.updatedAt) !== null && _g !== void 0 ? _g : 0;\n        message.error = (_h = object.error) !== null && _h !== void 0 ? _h : \"\";\n        message.roomComposite = object.roomComposite !== undefined && object.roomComposite !== null ? exports.RoomCompositeEgressRequest.fromPartial(object.roomComposite) : undefined;\n        message.web = object.web !== undefined && object.web !== null ? exports.WebEgressRequest.fromPartial(object.web) : undefined;\n        message.participant = object.participant !== undefined && object.participant !== null ? exports.ParticipantEgressRequest.fromPartial(object.participant) : undefined;\n        message.trackComposite = object.trackComposite !== undefined && object.trackComposite !== null ? exports.TrackCompositeEgressRequest.fromPartial(object.trackComposite) : undefined;\n        message.track = object.track !== undefined && object.track !== null ? exports.TrackEgressRequest.fromPartial(object.track) : undefined;\n        message.stream = object.stream !== undefined && object.stream !== null ? exports.StreamInfoList.fromPartial(object.stream) : undefined;\n        message.file = object.file !== undefined && object.file !== null ? exports.FileInfo.fromPartial(object.file) : undefined;\n        message.segments = object.segments !== undefined && object.segments !== null ? exports.SegmentsInfo.fromPartial(object.segments) : undefined;\n        message.streamResults = ((_j = object.streamResults) === null || _j === void 0 ? void 0 : _j.map((e)=>exports.StreamInfo.fromPartial(e))) || [];\n        message.fileResults = ((_k = object.fileResults) === null || _k === void 0 ? void 0 : _k.map((e)=>exports.FileInfo.fromPartial(e))) || [];\n        message.segmentResults = ((_l = object.segmentResults) === null || _l === void 0 ? void 0 : _l.map((e)=>exports.SegmentsInfo.fromPartial(e))) || [];\n        message.imageResults = ((_m = object.imageResults) === null || _m === void 0 ? void 0 : _m.map((e)=>exports.ImagesInfo.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseStreamInfoList() {\n    return {\n        info: []\n    };\n}\nexports.StreamInfoList = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.info !== undefined && message.info.length !== 0) {\n            for (const v of message.info){\n                exports.StreamInfo.encode(v, writer.uint32(10).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStreamInfoList();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.info.push(exports.StreamInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            info: Array.isArray(object === null || object === void 0 ? void 0 : object.info) ? object.info.map((e)=>exports.StreamInfo.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.info) {\n            obj.info = message.info.map((e)=>e ? exports.StreamInfo.toJSON(e) : undefined);\n        } else {\n            obj.info = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseStreamInfoList();\n        message.info = ((_a = object.info) === null || _a === void 0 ? void 0 : _a.map((e)=>exports.StreamInfo.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseStreamInfo() {\n    return {\n        url: \"\",\n        startedAt: 0,\n        endedAt: 0,\n        duration: 0,\n        status: 0,\n        error: \"\"\n    };\n}\nexports.StreamInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.url !== undefined && message.url !== \"\") {\n            writer.uint32(10).string(message.url);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(16).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(24).int64(message.endedAt);\n        }\n        if (message.duration !== undefined && message.duration !== 0) {\n            writer.uint32(32).int64(message.duration);\n        }\n        if (message.status !== undefined && message.status !== 0) {\n            writer.uint32(40).int32(message.status);\n        }\n        if (message.error !== undefined && message.error !== \"\") {\n            writer.uint32(50).string(message.error);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStreamInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.url = reader.string();\n                    break;\n                case 2:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 3:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                case 4:\n                    message.duration = longToNumber(reader.int64());\n                    break;\n                case 5:\n                    message.status = reader.int32();\n                    break;\n                case 6:\n                    message.error = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            url: isSet(object.url) ? String(object.url) : \"\",\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0,\n            duration: isSet(object.duration) ? Number(object.duration) : 0,\n            status: isSet(object.status) ? streamInfo_StatusFromJSON(object.status) : 0,\n            error: isSet(object.error) ? String(object.error) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.url !== undefined && (obj.url = message.url);\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        message.duration !== undefined && (obj.duration = Math.round(message.duration));\n        message.status !== undefined && (obj.status = streamInfo_StatusToJSON(message.status));\n        message.error !== undefined && (obj.error = message.error);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseStreamInfo();\n        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : \"\";\n        message.startedAt = (_b = object.startedAt) !== null && _b !== void 0 ? _b : 0;\n        message.endedAt = (_c = object.endedAt) !== null && _c !== void 0 ? _c : 0;\n        message.duration = (_d = object.duration) !== null && _d !== void 0 ? _d : 0;\n        message.status = (_e = object.status) !== null && _e !== void 0 ? _e : 0;\n        message.error = (_f = object.error) !== null && _f !== void 0 ? _f : \"\";\n        return message;\n    }\n};\nfunction createBaseFileInfo() {\n    return {\n        filename: \"\",\n        startedAt: 0,\n        endedAt: 0,\n        duration: 0,\n        size: 0,\n        location: \"\"\n    };\n}\nexports.FileInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.filename !== undefined && message.filename !== \"\") {\n            writer.uint32(10).string(message.filename);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(16).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(24).int64(message.endedAt);\n        }\n        if (message.duration !== undefined && message.duration !== 0) {\n            writer.uint32(48).int64(message.duration);\n        }\n        if (message.size !== undefined && message.size !== 0) {\n            writer.uint32(32).int64(message.size);\n        }\n        if (message.location !== undefined && message.location !== \"\") {\n            writer.uint32(42).string(message.location);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseFileInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.filename = reader.string();\n                    break;\n                case 2:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 3:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                case 6:\n                    message.duration = longToNumber(reader.int64());\n                    break;\n                case 4:\n                    message.size = longToNumber(reader.int64());\n                    break;\n                case 5:\n                    message.location = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            filename: isSet(object.filename) ? String(object.filename) : \"\",\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0,\n            duration: isSet(object.duration) ? Number(object.duration) : 0,\n            size: isSet(object.size) ? Number(object.size) : 0,\n            location: isSet(object.location) ? String(object.location) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.filename !== undefined && (obj.filename = message.filename);\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        message.duration !== undefined && (obj.duration = Math.round(message.duration));\n        message.size !== undefined && (obj.size = Math.round(message.size));\n        message.location !== undefined && (obj.location = message.location);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseFileInfo();\n        message.filename = (_a = object.filename) !== null && _a !== void 0 ? _a : \"\";\n        message.startedAt = (_b = object.startedAt) !== null && _b !== void 0 ? _b : 0;\n        message.endedAt = (_c = object.endedAt) !== null && _c !== void 0 ? _c : 0;\n        message.duration = (_d = object.duration) !== null && _d !== void 0 ? _d : 0;\n        message.size = (_e = object.size) !== null && _e !== void 0 ? _e : 0;\n        message.location = (_f = object.location) !== null && _f !== void 0 ? _f : \"\";\n        return message;\n    }\n};\nfunction createBaseSegmentsInfo() {\n    return {\n        playlistName: \"\",\n        livePlaylistName: \"\",\n        duration: 0,\n        size: 0,\n        playlistLocation: \"\",\n        livePlaylistLocation: \"\",\n        segmentCount: 0,\n        startedAt: 0,\n        endedAt: 0\n    };\n}\nexports.SegmentsInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.playlistName !== undefined && message.playlistName !== \"\") {\n            writer.uint32(10).string(message.playlistName);\n        }\n        if (message.livePlaylistName !== undefined && message.livePlaylistName !== \"\") {\n            writer.uint32(66).string(message.livePlaylistName);\n        }\n        if (message.duration !== undefined && message.duration !== 0) {\n            writer.uint32(16).int64(message.duration);\n        }\n        if (message.size !== undefined && message.size !== 0) {\n            writer.uint32(24).int64(message.size);\n        }\n        if (message.playlistLocation !== undefined && message.playlistLocation !== \"\") {\n            writer.uint32(34).string(message.playlistLocation);\n        }\n        if (message.livePlaylistLocation !== undefined && message.livePlaylistLocation !== \"\") {\n            writer.uint32(74).string(message.livePlaylistLocation);\n        }\n        if (message.segmentCount !== undefined && message.segmentCount !== 0) {\n            writer.uint32(40).int64(message.segmentCount);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(48).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(56).int64(message.endedAt);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSegmentsInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.playlistName = reader.string();\n                    break;\n                case 8:\n                    message.livePlaylistName = reader.string();\n                    break;\n                case 2:\n                    message.duration = longToNumber(reader.int64());\n                    break;\n                case 3:\n                    message.size = longToNumber(reader.int64());\n                    break;\n                case 4:\n                    message.playlistLocation = reader.string();\n                    break;\n                case 9:\n                    message.livePlaylistLocation = reader.string();\n                    break;\n                case 5:\n                    message.segmentCount = longToNumber(reader.int64());\n                    break;\n                case 6:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 7:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            playlistName: isSet(object.playlistName) ? String(object.playlistName) : \"\",\n            livePlaylistName: isSet(object.livePlaylistName) ? String(object.livePlaylistName) : \"\",\n            duration: isSet(object.duration) ? Number(object.duration) : 0,\n            size: isSet(object.size) ? Number(object.size) : 0,\n            playlistLocation: isSet(object.playlistLocation) ? String(object.playlistLocation) : \"\",\n            livePlaylistLocation: isSet(object.livePlaylistLocation) ? String(object.livePlaylistLocation) : \"\",\n            segmentCount: isSet(object.segmentCount) ? Number(object.segmentCount) : 0,\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.playlistName !== undefined && (obj.playlistName = message.playlistName);\n        message.livePlaylistName !== undefined && (obj.livePlaylistName = message.livePlaylistName);\n        message.duration !== undefined && (obj.duration = Math.round(message.duration));\n        message.size !== undefined && (obj.size = Math.round(message.size));\n        message.playlistLocation !== undefined && (obj.playlistLocation = message.playlistLocation);\n        message.livePlaylistLocation !== undefined && (obj.livePlaylistLocation = message.livePlaylistLocation);\n        message.segmentCount !== undefined && (obj.segmentCount = Math.round(message.segmentCount));\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const message = createBaseSegmentsInfo();\n        message.playlistName = (_a = object.playlistName) !== null && _a !== void 0 ? _a : \"\";\n        message.livePlaylistName = (_b = object.livePlaylistName) !== null && _b !== void 0 ? _b : \"\";\n        message.duration = (_c = object.duration) !== null && _c !== void 0 ? _c : 0;\n        message.size = (_d = object.size) !== null && _d !== void 0 ? _d : 0;\n        message.playlistLocation = (_e = object.playlistLocation) !== null && _e !== void 0 ? _e : \"\";\n        message.livePlaylistLocation = (_f = object.livePlaylistLocation) !== null && _f !== void 0 ? _f : \"\";\n        message.segmentCount = (_g = object.segmentCount) !== null && _g !== void 0 ? _g : 0;\n        message.startedAt = (_h = object.startedAt) !== null && _h !== void 0 ? _h : 0;\n        message.endedAt = (_j = object.endedAt) !== null && _j !== void 0 ? _j : 0;\n        return message;\n    }\n};\nfunction createBaseImagesInfo() {\n    return {\n        imageCount: 0,\n        startedAt: 0,\n        endedAt: 0\n    };\n}\nexports.ImagesInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.imageCount !== undefined && message.imageCount !== 0) {\n            writer.uint32(8).int64(message.imageCount);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(16).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(24).int64(message.endedAt);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseImagesInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.imageCount = longToNumber(reader.int64());\n                    break;\n                case 2:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 3:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            imageCount: isSet(object.imageCount) ? Number(object.imageCount) : 0,\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.imageCount !== undefined && (obj.imageCount = Math.round(message.imageCount));\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseImagesInfo();\n        message.imageCount = (_a = object.imageCount) !== null && _a !== void 0 ? _a : 0;\n        message.startedAt = (_b = object.startedAt) !== null && _b !== void 0 ? _b : 0;\n        message.endedAt = (_c = object.endedAt) !== null && _c !== void 0 ? _c : 0;\n        return message;\n    }\n};\nfunction createBaseAutoParticipantEgress() {\n    return {\n        preset: undefined,\n        advanced: undefined,\n        fileOutputs: [],\n        segmentOutputs: []\n    };\n}\nexports.AutoParticipantEgress = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.preset !== undefined) {\n            writer.uint32(8).int32(message.preset);\n        }\n        if (message.advanced !== undefined) {\n            exports.EncodingOptions.encode(message.advanced, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.fileOutputs !== undefined && message.fileOutputs.length !== 0) {\n            for (const v of message.fileOutputs){\n                exports.EncodedFileOutput.encode(v, writer.uint32(26).fork()).ldelim();\n            }\n        }\n        if (message.segmentOutputs !== undefined && message.segmentOutputs.length !== 0) {\n            for (const v of message.segmentOutputs){\n                exports.SegmentedFileOutput.encode(v, writer.uint32(34).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAutoParticipantEgress();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.preset = reader.int32();\n                    break;\n                case 2:\n                    message.advanced = exports.EncodingOptions.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.fileOutputs.push(exports.EncodedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 4:\n                    message.segmentOutputs.push(exports.SegmentedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            preset: isSet(object.preset) ? encodingOptionsPresetFromJSON(object.preset) : undefined,\n            advanced: isSet(object.advanced) ? exports.EncodingOptions.fromJSON(object.advanced) : undefined,\n            fileOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.fileOutputs) ? object.fileOutputs.map((e)=>exports.EncodedFileOutput.fromJSON(e)) : [],\n            segmentOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentOutputs) ? object.segmentOutputs.map((e)=>exports.SegmentedFileOutput.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.preset !== undefined && (obj.preset = message.preset !== undefined ? encodingOptionsPresetToJSON(message.preset) : undefined);\n        message.advanced !== undefined && (obj.advanced = message.advanced ? exports.EncodingOptions.toJSON(message.advanced) : undefined);\n        if (message.fileOutputs) {\n            obj.fileOutputs = message.fileOutputs.map((e)=>e ? exports.EncodedFileOutput.toJSON(e) : undefined);\n        } else {\n            obj.fileOutputs = [];\n        }\n        if (message.segmentOutputs) {\n            obj.segmentOutputs = message.segmentOutputs.map((e)=>e ? exports.SegmentedFileOutput.toJSON(e) : undefined);\n        } else {\n            obj.segmentOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseAutoParticipantEgress();\n        message.preset = (_a = object.preset) !== null && _a !== void 0 ? _a : undefined;\n        message.advanced = object.advanced !== undefined && object.advanced !== null ? exports.EncodingOptions.fromPartial(object.advanced) : undefined;\n        message.fileOutputs = ((_b = object.fileOutputs) === null || _b === void 0 ? void 0 : _b.map((e)=>exports.EncodedFileOutput.fromPartial(e))) || [];\n        message.segmentOutputs = ((_c = object.segmentOutputs) === null || _c === void 0 ? void 0 : _c.map((e)=>exports.SegmentedFileOutput.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseAutoTrackEgress() {\n    return {\n        filepath: \"\",\n        disableManifest: false,\n        s3: undefined,\n        gcp: undefined,\n        azure: undefined\n    };\n}\nexports.AutoTrackEgress = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.filepath !== undefined && message.filepath !== \"\") {\n            writer.uint32(10).string(message.filepath);\n        }\n        if (message.disableManifest === true) {\n            writer.uint32(40).bool(message.disableManifest);\n        }\n        if (message.s3 !== undefined) {\n            exports.S3Upload.encode(message.s3, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.gcp !== undefined) {\n            exports.GCPUpload.encode(message.gcp, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.azure !== undefined) {\n            exports.AzureBlobUpload.encode(message.azure, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAutoTrackEgress();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.filepath = reader.string();\n                    break;\n                case 5:\n                    message.disableManifest = reader.bool();\n                    break;\n                case 2:\n                    message.s3 = exports.S3Upload.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.gcp = exports.GCPUpload.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.azure = exports.AzureBlobUpload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            filepath: isSet(object.filepath) ? String(object.filepath) : \"\",\n            disableManifest: isSet(object.disableManifest) ? Boolean(object.disableManifest) : false,\n            s3: isSet(object.s3) ? exports.S3Upload.fromJSON(object.s3) : undefined,\n            gcp: isSet(object.gcp) ? exports.GCPUpload.fromJSON(object.gcp) : undefined,\n            azure: isSet(object.azure) ? exports.AzureBlobUpload.fromJSON(object.azure) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.filepath !== undefined && (obj.filepath = message.filepath);\n        message.disableManifest !== undefined && (obj.disableManifest = message.disableManifest);\n        message.s3 !== undefined && (obj.s3 = message.s3 ? exports.S3Upload.toJSON(message.s3) : undefined);\n        message.gcp !== undefined && (obj.gcp = message.gcp ? exports.GCPUpload.toJSON(message.gcp) : undefined);\n        message.azure !== undefined && (obj.azure = message.azure ? exports.AzureBlobUpload.toJSON(message.azure) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseAutoTrackEgress();\n        message.filepath = (_a = object.filepath) !== null && _a !== void 0 ? _a : \"\";\n        message.disableManifest = (_b = object.disableManifest) !== null && _b !== void 0 ? _b : false;\n        message.s3 = object.s3 !== undefined && object.s3 !== null ? exports.S3Upload.fromPartial(object.s3) : undefined;\n        message.gcp = object.gcp !== undefined && object.gcp !== null ? exports.GCPUpload.fromPartial(object.gcp) : undefined;\n        message.azure = object.azure !== undefined && object.azure !== null ? exports.AzureBlobUpload.fromPartial(object.azure) : undefined;\n        return message;\n    }\n};\nvar globalThis = (()=>{\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (false) {}\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n} //# sourceMappingURL=livekit_egress.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js":
/*!***********************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DeleteIngressRequest = exports.ListIngressResponse = exports.ListIngressRequest = exports.UpdateIngressRequest = exports.InputAudioState = exports.InputVideoState = exports.IngressState = exports.IngressInfo = exports.IngressVideoEncodingOptions = exports.IngressAudioEncodingOptions = exports.IngressVideoOptions = exports.IngressAudioOptions = exports.CreateIngressRequest = exports.ingressState_StatusToJSON = exports.ingressState_StatusFromJSON = exports.IngressState_Status = exports.ingressVideoEncodingPresetToJSON = exports.ingressVideoEncodingPresetFromJSON = exports.IngressVideoEncodingPreset = exports.ingressAudioEncodingPresetToJSON = exports.ingressAudioEncodingPresetFromJSON = exports.IngressAudioEncodingPreset = exports.ingressInputToJSON = exports.ingressInputFromJSON = exports.IngressInput = exports.protobufPackage = void 0;\n/* eslint-disable */ const long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/umd/index.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst livekit_models_1 = __webpack_require__(/*! ./livekit_models */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nexports.protobufPackage = \"livekit\";\nvar IngressInput;\n(function(IngressInput) {\n    IngressInput[IngressInput[\"RTMP_INPUT\"] = 0] = \"RTMP_INPUT\";\n    IngressInput[IngressInput[\"WHIP_INPUT\"] = 1] = \"WHIP_INPUT\";\n    /** URL_INPUT - Pull from the provided URL. Only HTTP url are supported, serving either a single media file or a HLS stream */ IngressInput[IngressInput[\"URL_INPUT\"] = 2] = \"URL_INPUT\";\n    IngressInput[IngressInput[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(IngressInput = exports.IngressInput || (exports.IngressInput = {}));\nfunction ingressInputFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"RTMP_INPUT\":\n            return IngressInput.RTMP_INPUT;\n        case 1:\n        case \"WHIP_INPUT\":\n            return IngressInput.WHIP_INPUT;\n        case 2:\n        case \"URL_INPUT\":\n            return IngressInput.URL_INPUT;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return IngressInput.UNRECOGNIZED;\n    }\n}\nexports.ingressInputFromJSON = ingressInputFromJSON;\nfunction ingressInputToJSON(object) {\n    switch(object){\n        case IngressInput.RTMP_INPUT:\n            return \"RTMP_INPUT\";\n        case IngressInput.WHIP_INPUT:\n            return \"WHIP_INPUT\";\n        case IngressInput.URL_INPUT:\n            return \"URL_INPUT\";\n        case IngressInput.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.ingressInputToJSON = ingressInputToJSON;\nvar IngressAudioEncodingPreset;\n(function(IngressAudioEncodingPreset) {\n    /** OPUS_STEREO_96KBPS - OPUS, 2 channels, 96kbps */ IngressAudioEncodingPreset[IngressAudioEncodingPreset[\"OPUS_STEREO_96KBPS\"] = 0] = \"OPUS_STEREO_96KBPS\";\n    /** OPUS_MONO_64KBS - OPUS, 1 channel, 64kbps */ IngressAudioEncodingPreset[IngressAudioEncodingPreset[\"OPUS_MONO_64KBS\"] = 1] = \"OPUS_MONO_64KBS\";\n    IngressAudioEncodingPreset[IngressAudioEncodingPreset[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(IngressAudioEncodingPreset = exports.IngressAudioEncodingPreset || (exports.IngressAudioEncodingPreset = {}));\nfunction ingressAudioEncodingPresetFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"OPUS_STEREO_96KBPS\":\n            return IngressAudioEncodingPreset.OPUS_STEREO_96KBPS;\n        case 1:\n        case \"OPUS_MONO_64KBS\":\n            return IngressAudioEncodingPreset.OPUS_MONO_64KBS;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return IngressAudioEncodingPreset.UNRECOGNIZED;\n    }\n}\nexports.ingressAudioEncodingPresetFromJSON = ingressAudioEncodingPresetFromJSON;\nfunction ingressAudioEncodingPresetToJSON(object) {\n    switch(object){\n        case IngressAudioEncodingPreset.OPUS_STEREO_96KBPS:\n            return \"OPUS_STEREO_96KBPS\";\n        case IngressAudioEncodingPreset.OPUS_MONO_64KBS:\n            return \"OPUS_MONO_64KBS\";\n        case IngressAudioEncodingPreset.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.ingressAudioEncodingPresetToJSON = ingressAudioEncodingPresetToJSON;\nvar IngressVideoEncodingPreset;\n(function(IngressVideoEncodingPreset) {\n    /** H264_720P_30FPS_3_LAYERS - 1280x720,  30fps, 1900kbps main layer, 3 layers total */ IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_720P_30FPS_3_LAYERS\"] = 0] = \"H264_720P_30FPS_3_LAYERS\";\n    /** H264_1080P_30FPS_3_LAYERS - 1980x1080, 30fps, 3500kbps main layer, 3 layers total */ IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_1080P_30FPS_3_LAYERS\"] = 1] = \"H264_1080P_30FPS_3_LAYERS\";\n    /** H264_540P_25FPS_2_LAYERS - 960x540,  25fps, 1000kbps  main layer, 2 layers total */ IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_540P_25FPS_2_LAYERS\"] = 2] = \"H264_540P_25FPS_2_LAYERS\";\n    /** H264_720P_30FPS_1_LAYER - 1280x720,  30fps, 1900kbps, no simulcast */ IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_720P_30FPS_1_LAYER\"] = 3] = \"H264_720P_30FPS_1_LAYER\";\n    /** H264_1080P_30FPS_1_LAYER - 1980x1080, 30fps, 3500kbps, no simulcast */ IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_1080P_30FPS_1_LAYER\"] = 4] = \"H264_1080P_30FPS_1_LAYER\";\n    /** H264_720P_30FPS_3_LAYERS_HIGH_MOTION - 1280x720,  30fps, 2500kbps main layer, 3 layers total, higher bitrate for high motion, harder to encode content */ IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_720P_30FPS_3_LAYERS_HIGH_MOTION\"] = 5] = \"H264_720P_30FPS_3_LAYERS_HIGH_MOTION\";\n    /** H264_1080P_30FPS_3_LAYERS_HIGH_MOTION - 1980x1080, 30fps, 4500kbps main layer, 3 layers total, higher bitrate for high motion, harder to encode content */ IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_1080P_30FPS_3_LAYERS_HIGH_MOTION\"] = 6] = \"H264_1080P_30FPS_3_LAYERS_HIGH_MOTION\";\n    /** H264_540P_25FPS_2_LAYERS_HIGH_MOTION - 960x540,  25fps, 1300kbps  main layer, 2 layers total, higher bitrate for high motion, harder to encode content */ IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_540P_25FPS_2_LAYERS_HIGH_MOTION\"] = 7] = \"H264_540P_25FPS_2_LAYERS_HIGH_MOTION\";\n    /** H264_720P_30FPS_1_LAYER_HIGH_MOTION - 1280x720,  30fps, 2500kbps, no simulcast, higher bitrate for high motion, harder to encode content */ IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_720P_30FPS_1_LAYER_HIGH_MOTION\"] = 8] = \"H264_720P_30FPS_1_LAYER_HIGH_MOTION\";\n    /** H264_1080P_30FPS_1_LAYER_HIGH_MOTION - 1980x1080, 30fps, 4500kbps, no simulcast, higher bitrate for high motion, harder to encode content */ IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_1080P_30FPS_1_LAYER_HIGH_MOTION\"] = 9] = \"H264_1080P_30FPS_1_LAYER_HIGH_MOTION\";\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(IngressVideoEncodingPreset = exports.IngressVideoEncodingPreset || (exports.IngressVideoEncodingPreset = {}));\nfunction ingressVideoEncodingPresetFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"H264_720P_30FPS_3_LAYERS\":\n            return IngressVideoEncodingPreset.H264_720P_30FPS_3_LAYERS;\n        case 1:\n        case \"H264_1080P_30FPS_3_LAYERS\":\n            return IngressVideoEncodingPreset.H264_1080P_30FPS_3_LAYERS;\n        case 2:\n        case \"H264_540P_25FPS_2_LAYERS\":\n            return IngressVideoEncodingPreset.H264_540P_25FPS_2_LAYERS;\n        case 3:\n        case \"H264_720P_30FPS_1_LAYER\":\n            return IngressVideoEncodingPreset.H264_720P_30FPS_1_LAYER;\n        case 4:\n        case \"H264_1080P_30FPS_1_LAYER\":\n            return IngressVideoEncodingPreset.H264_1080P_30FPS_1_LAYER;\n        case 5:\n        case \"H264_720P_30FPS_3_LAYERS_HIGH_MOTION\":\n            return IngressVideoEncodingPreset.H264_720P_30FPS_3_LAYERS_HIGH_MOTION;\n        case 6:\n        case \"H264_1080P_30FPS_3_LAYERS_HIGH_MOTION\":\n            return IngressVideoEncodingPreset.H264_1080P_30FPS_3_LAYERS_HIGH_MOTION;\n        case 7:\n        case \"H264_540P_25FPS_2_LAYERS_HIGH_MOTION\":\n            return IngressVideoEncodingPreset.H264_540P_25FPS_2_LAYERS_HIGH_MOTION;\n        case 8:\n        case \"H264_720P_30FPS_1_LAYER_HIGH_MOTION\":\n            return IngressVideoEncodingPreset.H264_720P_30FPS_1_LAYER_HIGH_MOTION;\n        case 9:\n        case \"H264_1080P_30FPS_1_LAYER_HIGH_MOTION\":\n            return IngressVideoEncodingPreset.H264_1080P_30FPS_1_LAYER_HIGH_MOTION;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return IngressVideoEncodingPreset.UNRECOGNIZED;\n    }\n}\nexports.ingressVideoEncodingPresetFromJSON = ingressVideoEncodingPresetFromJSON;\nfunction ingressVideoEncodingPresetToJSON(object) {\n    switch(object){\n        case IngressVideoEncodingPreset.H264_720P_30FPS_3_LAYERS:\n            return \"H264_720P_30FPS_3_LAYERS\";\n        case IngressVideoEncodingPreset.H264_1080P_30FPS_3_LAYERS:\n            return \"H264_1080P_30FPS_3_LAYERS\";\n        case IngressVideoEncodingPreset.H264_540P_25FPS_2_LAYERS:\n            return \"H264_540P_25FPS_2_LAYERS\";\n        case IngressVideoEncodingPreset.H264_720P_30FPS_1_LAYER:\n            return \"H264_720P_30FPS_1_LAYER\";\n        case IngressVideoEncodingPreset.H264_1080P_30FPS_1_LAYER:\n            return \"H264_1080P_30FPS_1_LAYER\";\n        case IngressVideoEncodingPreset.H264_720P_30FPS_3_LAYERS_HIGH_MOTION:\n            return \"H264_720P_30FPS_3_LAYERS_HIGH_MOTION\";\n        case IngressVideoEncodingPreset.H264_1080P_30FPS_3_LAYERS_HIGH_MOTION:\n            return \"H264_1080P_30FPS_3_LAYERS_HIGH_MOTION\";\n        case IngressVideoEncodingPreset.H264_540P_25FPS_2_LAYERS_HIGH_MOTION:\n            return \"H264_540P_25FPS_2_LAYERS_HIGH_MOTION\";\n        case IngressVideoEncodingPreset.H264_720P_30FPS_1_LAYER_HIGH_MOTION:\n            return \"H264_720P_30FPS_1_LAYER_HIGH_MOTION\";\n        case IngressVideoEncodingPreset.H264_1080P_30FPS_1_LAYER_HIGH_MOTION:\n            return \"H264_1080P_30FPS_1_LAYER_HIGH_MOTION\";\n        case IngressVideoEncodingPreset.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.ingressVideoEncodingPresetToJSON = ingressVideoEncodingPresetToJSON;\nvar IngressState_Status;\n(function(IngressState_Status) {\n    IngressState_Status[IngressState_Status[\"ENDPOINT_INACTIVE\"] = 0] = \"ENDPOINT_INACTIVE\";\n    IngressState_Status[IngressState_Status[\"ENDPOINT_BUFFERING\"] = 1] = \"ENDPOINT_BUFFERING\";\n    IngressState_Status[IngressState_Status[\"ENDPOINT_PUBLISHING\"] = 2] = \"ENDPOINT_PUBLISHING\";\n    IngressState_Status[IngressState_Status[\"ENDPOINT_ERROR\"] = 3] = \"ENDPOINT_ERROR\";\n    IngressState_Status[IngressState_Status[\"ENDPOINT_COMPLETE\"] = 4] = \"ENDPOINT_COMPLETE\";\n    IngressState_Status[IngressState_Status[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(IngressState_Status = exports.IngressState_Status || (exports.IngressState_Status = {}));\nfunction ingressState_StatusFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"ENDPOINT_INACTIVE\":\n            return IngressState_Status.ENDPOINT_INACTIVE;\n        case 1:\n        case \"ENDPOINT_BUFFERING\":\n            return IngressState_Status.ENDPOINT_BUFFERING;\n        case 2:\n        case \"ENDPOINT_PUBLISHING\":\n            return IngressState_Status.ENDPOINT_PUBLISHING;\n        case 3:\n        case \"ENDPOINT_ERROR\":\n            return IngressState_Status.ENDPOINT_ERROR;\n        case 4:\n        case \"ENDPOINT_COMPLETE\":\n            return IngressState_Status.ENDPOINT_COMPLETE;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return IngressState_Status.UNRECOGNIZED;\n    }\n}\nexports.ingressState_StatusFromJSON = ingressState_StatusFromJSON;\nfunction ingressState_StatusToJSON(object) {\n    switch(object){\n        case IngressState_Status.ENDPOINT_INACTIVE:\n            return \"ENDPOINT_INACTIVE\";\n        case IngressState_Status.ENDPOINT_BUFFERING:\n            return \"ENDPOINT_BUFFERING\";\n        case IngressState_Status.ENDPOINT_PUBLISHING:\n            return \"ENDPOINT_PUBLISHING\";\n        case IngressState_Status.ENDPOINT_ERROR:\n            return \"ENDPOINT_ERROR\";\n        case IngressState_Status.ENDPOINT_COMPLETE:\n            return \"ENDPOINT_COMPLETE\";\n        case IngressState_Status.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.ingressState_StatusToJSON = ingressState_StatusToJSON;\nfunction createBaseCreateIngressRequest() {\n    return {\n        inputType: 0,\n        url: \"\",\n        name: \"\",\n        roomName: \"\",\n        participantIdentity: \"\",\n        participantName: \"\",\n        bypassTranscoding: false,\n        audio: undefined,\n        video: undefined\n    };\n}\nexports.CreateIngressRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.inputType !== undefined && message.inputType !== 0) {\n            writer.uint32(8).int32(message.inputType);\n        }\n        if (message.url !== undefined && message.url !== \"\") {\n            writer.uint32(74).string(message.url);\n        }\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(18).string(message.name);\n        }\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(26).string(message.roomName);\n        }\n        if (message.participantIdentity !== undefined && message.participantIdentity !== \"\") {\n            writer.uint32(34).string(message.participantIdentity);\n        }\n        if (message.participantName !== undefined && message.participantName !== \"\") {\n            writer.uint32(42).string(message.participantName);\n        }\n        if (message.bypassTranscoding === true) {\n            writer.uint32(64).bool(message.bypassTranscoding);\n        }\n        if (message.audio !== undefined) {\n            exports.IngressAudioOptions.encode(message.audio, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.video !== undefined) {\n            exports.IngressVideoOptions.encode(message.video, writer.uint32(58).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCreateIngressRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.inputType = reader.int32();\n                    break;\n                case 9:\n                    message.url = reader.string();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 3:\n                    message.roomName = reader.string();\n                    break;\n                case 4:\n                    message.participantIdentity = reader.string();\n                    break;\n                case 5:\n                    message.participantName = reader.string();\n                    break;\n                case 8:\n                    message.bypassTranscoding = reader.bool();\n                    break;\n                case 6:\n                    message.audio = exports.IngressAudioOptions.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.video = exports.IngressVideoOptions.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            inputType: isSet(object.inputType) ? ingressInputFromJSON(object.inputType) : 0,\n            url: isSet(object.url) ? String(object.url) : \"\",\n            name: isSet(object.name) ? String(object.name) : \"\",\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            participantIdentity: isSet(object.participantIdentity) ? String(object.participantIdentity) : \"\",\n            participantName: isSet(object.participantName) ? String(object.participantName) : \"\",\n            bypassTranscoding: isSet(object.bypassTranscoding) ? Boolean(object.bypassTranscoding) : false,\n            audio: isSet(object.audio) ? exports.IngressAudioOptions.fromJSON(object.audio) : undefined,\n            video: isSet(object.video) ? exports.IngressVideoOptions.fromJSON(object.video) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.inputType !== undefined && (obj.inputType = ingressInputToJSON(message.inputType));\n        message.url !== undefined && (obj.url = message.url);\n        message.name !== undefined && (obj.name = message.name);\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.participantIdentity !== undefined && (obj.participantIdentity = message.participantIdentity);\n        message.participantName !== undefined && (obj.participantName = message.participantName);\n        message.bypassTranscoding !== undefined && (obj.bypassTranscoding = message.bypassTranscoding);\n        message.audio !== undefined && (obj.audio = message.audio ? exports.IngressAudioOptions.toJSON(message.audio) : undefined);\n        message.video !== undefined && (obj.video = message.video ? exports.IngressVideoOptions.toJSON(message.video) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const message = createBaseCreateIngressRequest();\n        message.inputType = (_a = object.inputType) !== null && _a !== void 0 ? _a : 0;\n        message.url = (_b = object.url) !== null && _b !== void 0 ? _b : \"\";\n        message.name = (_c = object.name) !== null && _c !== void 0 ? _c : \"\";\n        message.roomName = (_d = object.roomName) !== null && _d !== void 0 ? _d : \"\";\n        message.participantIdentity = (_e = object.participantIdentity) !== null && _e !== void 0 ? _e : \"\";\n        message.participantName = (_f = object.participantName) !== null && _f !== void 0 ? _f : \"\";\n        message.bypassTranscoding = (_g = object.bypassTranscoding) !== null && _g !== void 0 ? _g : false;\n        message.audio = object.audio !== undefined && object.audio !== null ? exports.IngressAudioOptions.fromPartial(object.audio) : undefined;\n        message.video = object.video !== undefined && object.video !== null ? exports.IngressVideoOptions.fromPartial(object.video) : undefined;\n        return message;\n    }\n};\nfunction createBaseIngressAudioOptions() {\n    return {\n        name: \"\",\n        source: 0,\n        preset: undefined,\n        options: undefined\n    };\n}\nexports.IngressAudioOptions = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.source !== undefined && message.source !== 0) {\n            writer.uint32(16).int32(message.source);\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(24).int32(message.preset);\n        }\n        if (message.options !== undefined) {\n            exports.IngressAudioEncodingOptions.encode(message.options, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressAudioOptions();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.source = reader.int32();\n                    break;\n                case 3:\n                    message.preset = reader.int32();\n                    break;\n                case 4:\n                    message.options = exports.IngressAudioEncodingOptions.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            name: isSet(object.name) ? String(object.name) : \"\",\n            source: isSet(object.source) ? livekit_models_1.trackSourceFromJSON(object.source) : 0,\n            preset: isSet(object.preset) ? ingressAudioEncodingPresetFromJSON(object.preset) : undefined,\n            options: isSet(object.options) ? exports.IngressAudioEncodingOptions.fromJSON(object.options) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.name !== undefined && (obj.name = message.name);\n        message.source !== undefined && (obj.source = livekit_models_1.trackSourceToJSON(message.source));\n        message.preset !== undefined && (obj.preset = message.preset !== undefined ? ingressAudioEncodingPresetToJSON(message.preset) : undefined);\n        message.options !== undefined && (obj.options = message.options ? exports.IngressAudioEncodingOptions.toJSON(message.options) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseIngressAudioOptions();\n        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : \"\";\n        message.source = (_b = object.source) !== null && _b !== void 0 ? _b : 0;\n        message.preset = (_c = object.preset) !== null && _c !== void 0 ? _c : undefined;\n        message.options = object.options !== undefined && object.options !== null ? exports.IngressAudioEncodingOptions.fromPartial(object.options) : undefined;\n        return message;\n    }\n};\nfunction createBaseIngressVideoOptions() {\n    return {\n        name: \"\",\n        source: 0,\n        preset: undefined,\n        options: undefined\n    };\n}\nexports.IngressVideoOptions = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.source !== undefined && message.source !== 0) {\n            writer.uint32(16).int32(message.source);\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(24).int32(message.preset);\n        }\n        if (message.options !== undefined) {\n            exports.IngressVideoEncodingOptions.encode(message.options, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressVideoOptions();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.source = reader.int32();\n                    break;\n                case 3:\n                    message.preset = reader.int32();\n                    break;\n                case 4:\n                    message.options = exports.IngressVideoEncodingOptions.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            name: isSet(object.name) ? String(object.name) : \"\",\n            source: isSet(object.source) ? livekit_models_1.trackSourceFromJSON(object.source) : 0,\n            preset: isSet(object.preset) ? ingressVideoEncodingPresetFromJSON(object.preset) : undefined,\n            options: isSet(object.options) ? exports.IngressVideoEncodingOptions.fromJSON(object.options) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.name !== undefined && (obj.name = message.name);\n        message.source !== undefined && (obj.source = livekit_models_1.trackSourceToJSON(message.source));\n        message.preset !== undefined && (obj.preset = message.preset !== undefined ? ingressVideoEncodingPresetToJSON(message.preset) : undefined);\n        message.options !== undefined && (obj.options = message.options ? exports.IngressVideoEncodingOptions.toJSON(message.options) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseIngressVideoOptions();\n        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : \"\";\n        message.source = (_b = object.source) !== null && _b !== void 0 ? _b : 0;\n        message.preset = (_c = object.preset) !== null && _c !== void 0 ? _c : undefined;\n        message.options = object.options !== undefined && object.options !== null ? exports.IngressVideoEncodingOptions.fromPartial(object.options) : undefined;\n        return message;\n    }\n};\nfunction createBaseIngressAudioEncodingOptions() {\n    return {\n        audioCodec: 0,\n        bitrate: 0,\n        disableDtx: false,\n        channels: 0\n    };\n}\nexports.IngressAudioEncodingOptions = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.audioCodec !== undefined && message.audioCodec !== 0) {\n            writer.uint32(8).int32(message.audioCodec);\n        }\n        if (message.bitrate !== undefined && message.bitrate !== 0) {\n            writer.uint32(16).uint32(message.bitrate);\n        }\n        if (message.disableDtx === true) {\n            writer.uint32(24).bool(message.disableDtx);\n        }\n        if (message.channels !== undefined && message.channels !== 0) {\n            writer.uint32(32).uint32(message.channels);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressAudioEncodingOptions();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.audioCodec = reader.int32();\n                    break;\n                case 2:\n                    message.bitrate = reader.uint32();\n                    break;\n                case 3:\n                    message.disableDtx = reader.bool();\n                    break;\n                case 4:\n                    message.channels = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            audioCodec: isSet(object.audioCodec) ? livekit_models_1.audioCodecFromJSON(object.audioCodec) : 0,\n            bitrate: isSet(object.bitrate) ? Number(object.bitrate) : 0,\n            disableDtx: isSet(object.disableDtx) ? Boolean(object.disableDtx) : false,\n            channels: isSet(object.channels) ? Number(object.channels) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.audioCodec !== undefined && (obj.audioCodec = livekit_models_1.audioCodecToJSON(message.audioCodec));\n        message.bitrate !== undefined && (obj.bitrate = Math.round(message.bitrate));\n        message.disableDtx !== undefined && (obj.disableDtx = message.disableDtx);\n        message.channels !== undefined && (obj.channels = Math.round(message.channels));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d;\n        const message = createBaseIngressAudioEncodingOptions();\n        message.audioCodec = (_a = object.audioCodec) !== null && _a !== void 0 ? _a : 0;\n        message.bitrate = (_b = object.bitrate) !== null && _b !== void 0 ? _b : 0;\n        message.disableDtx = (_c = object.disableDtx) !== null && _c !== void 0 ? _c : false;\n        message.channels = (_d = object.channels) !== null && _d !== void 0 ? _d : 0;\n        return message;\n    }\n};\nfunction createBaseIngressVideoEncodingOptions() {\n    return {\n        videoCodec: 0,\n        frameRate: 0,\n        layers: []\n    };\n}\nexports.IngressVideoEncodingOptions = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.videoCodec !== undefined && message.videoCodec !== 0) {\n            writer.uint32(8).int32(message.videoCodec);\n        }\n        if (message.frameRate !== undefined && message.frameRate !== 0) {\n            writer.uint32(17).double(message.frameRate);\n        }\n        if (message.layers !== undefined && message.layers.length !== 0) {\n            for (const v of message.layers){\n                livekit_models_1.VideoLayer.encode(v, writer.uint32(26).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressVideoEncodingOptions();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.videoCodec = reader.int32();\n                    break;\n                case 2:\n                    message.frameRate = reader.double();\n                    break;\n                case 3:\n                    message.layers.push(livekit_models_1.VideoLayer.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            videoCodec: isSet(object.videoCodec) ? livekit_models_1.videoCodecFromJSON(object.videoCodec) : 0,\n            frameRate: isSet(object.frameRate) ? Number(object.frameRate) : 0,\n            layers: Array.isArray(object === null || object === void 0 ? void 0 : object.layers) ? object.layers.map((e)=>livekit_models_1.VideoLayer.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.videoCodec !== undefined && (obj.videoCodec = livekit_models_1.videoCodecToJSON(message.videoCodec));\n        message.frameRate !== undefined && (obj.frameRate = message.frameRate);\n        if (message.layers) {\n            obj.layers = message.layers.map((e)=>e ? livekit_models_1.VideoLayer.toJSON(e) : undefined);\n        } else {\n            obj.layers = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseIngressVideoEncodingOptions();\n        message.videoCodec = (_a = object.videoCodec) !== null && _a !== void 0 ? _a : 0;\n        message.frameRate = (_b = object.frameRate) !== null && _b !== void 0 ? _b : 0;\n        message.layers = ((_c = object.layers) === null || _c === void 0 ? void 0 : _c.map((e)=>livekit_models_1.VideoLayer.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseIngressInfo() {\n    return {\n        ingressId: \"\",\n        name: \"\",\n        streamKey: \"\",\n        url: \"\",\n        inputType: 0,\n        bypassTranscoding: false,\n        audio: undefined,\n        video: undefined,\n        roomName: \"\",\n        participantIdentity: \"\",\n        participantName: \"\",\n        reusable: false,\n        state: undefined\n    };\n}\nexports.IngressInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.ingressId !== undefined && message.ingressId !== \"\") {\n            writer.uint32(10).string(message.ingressId);\n        }\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(18).string(message.name);\n        }\n        if (message.streamKey !== undefined && message.streamKey !== \"\") {\n            writer.uint32(26).string(message.streamKey);\n        }\n        if (message.url !== undefined && message.url !== \"\") {\n            writer.uint32(34).string(message.url);\n        }\n        if (message.inputType !== undefined && message.inputType !== 0) {\n            writer.uint32(40).int32(message.inputType);\n        }\n        if (message.bypassTranscoding === true) {\n            writer.uint32(104).bool(message.bypassTranscoding);\n        }\n        if (message.audio !== undefined) {\n            exports.IngressAudioOptions.encode(message.audio, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.video !== undefined) {\n            exports.IngressVideoOptions.encode(message.video, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(66).string(message.roomName);\n        }\n        if (message.participantIdentity !== undefined && message.participantIdentity !== \"\") {\n            writer.uint32(74).string(message.participantIdentity);\n        }\n        if (message.participantName !== undefined && message.participantName !== \"\") {\n            writer.uint32(82).string(message.participantName);\n        }\n        if (message.reusable === true) {\n            writer.uint32(88).bool(message.reusable);\n        }\n        if (message.state !== undefined) {\n            exports.IngressState.encode(message.state, writer.uint32(98).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.ingressId = reader.string();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 3:\n                    message.streamKey = reader.string();\n                    break;\n                case 4:\n                    message.url = reader.string();\n                    break;\n                case 5:\n                    message.inputType = reader.int32();\n                    break;\n                case 13:\n                    message.bypassTranscoding = reader.bool();\n                    break;\n                case 6:\n                    message.audio = exports.IngressAudioOptions.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.video = exports.IngressVideoOptions.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.roomName = reader.string();\n                    break;\n                case 9:\n                    message.participantIdentity = reader.string();\n                    break;\n                case 10:\n                    message.participantName = reader.string();\n                    break;\n                case 11:\n                    message.reusable = reader.bool();\n                    break;\n                case 12:\n                    message.state = exports.IngressState.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            ingressId: isSet(object.ingressId) ? String(object.ingressId) : \"\",\n            name: isSet(object.name) ? String(object.name) : \"\",\n            streamKey: isSet(object.streamKey) ? String(object.streamKey) : \"\",\n            url: isSet(object.url) ? String(object.url) : \"\",\n            inputType: isSet(object.inputType) ? ingressInputFromJSON(object.inputType) : 0,\n            bypassTranscoding: isSet(object.bypassTranscoding) ? Boolean(object.bypassTranscoding) : false,\n            audio: isSet(object.audio) ? exports.IngressAudioOptions.fromJSON(object.audio) : undefined,\n            video: isSet(object.video) ? exports.IngressVideoOptions.fromJSON(object.video) : undefined,\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            participantIdentity: isSet(object.participantIdentity) ? String(object.participantIdentity) : \"\",\n            participantName: isSet(object.participantName) ? String(object.participantName) : \"\",\n            reusable: isSet(object.reusable) ? Boolean(object.reusable) : false,\n            state: isSet(object.state) ? exports.IngressState.fromJSON(object.state) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.ingressId !== undefined && (obj.ingressId = message.ingressId);\n        message.name !== undefined && (obj.name = message.name);\n        message.streamKey !== undefined && (obj.streamKey = message.streamKey);\n        message.url !== undefined && (obj.url = message.url);\n        message.inputType !== undefined && (obj.inputType = ingressInputToJSON(message.inputType));\n        message.bypassTranscoding !== undefined && (obj.bypassTranscoding = message.bypassTranscoding);\n        message.audio !== undefined && (obj.audio = message.audio ? exports.IngressAudioOptions.toJSON(message.audio) : undefined);\n        message.video !== undefined && (obj.video = message.video ? exports.IngressVideoOptions.toJSON(message.video) : undefined);\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.participantIdentity !== undefined && (obj.participantIdentity = message.participantIdentity);\n        message.participantName !== undefined && (obj.participantName = message.participantName);\n        message.reusable !== undefined && (obj.reusable = message.reusable);\n        message.state !== undefined && (obj.state = message.state ? exports.IngressState.toJSON(message.state) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        const message = createBaseIngressInfo();\n        message.ingressId = (_a = object.ingressId) !== null && _a !== void 0 ? _a : \"\";\n        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : \"\";\n        message.streamKey = (_c = object.streamKey) !== null && _c !== void 0 ? _c : \"\";\n        message.url = (_d = object.url) !== null && _d !== void 0 ? _d : \"\";\n        message.inputType = (_e = object.inputType) !== null && _e !== void 0 ? _e : 0;\n        message.bypassTranscoding = (_f = object.bypassTranscoding) !== null && _f !== void 0 ? _f : false;\n        message.audio = object.audio !== undefined && object.audio !== null ? exports.IngressAudioOptions.fromPartial(object.audio) : undefined;\n        message.video = object.video !== undefined && object.video !== null ? exports.IngressVideoOptions.fromPartial(object.video) : undefined;\n        message.roomName = (_g = object.roomName) !== null && _g !== void 0 ? _g : \"\";\n        message.participantIdentity = (_h = object.participantIdentity) !== null && _h !== void 0 ? _h : \"\";\n        message.participantName = (_j = object.participantName) !== null && _j !== void 0 ? _j : \"\";\n        message.reusable = (_k = object.reusable) !== null && _k !== void 0 ? _k : false;\n        message.state = object.state !== undefined && object.state !== null ? exports.IngressState.fromPartial(object.state) : undefined;\n        return message;\n    }\n};\nfunction createBaseIngressState() {\n    return {\n        status: 0,\n        error: \"\",\n        video: undefined,\n        audio: undefined,\n        roomId: \"\",\n        startedAt: 0,\n        endedAt: 0,\n        resourceId: \"\",\n        tracks: []\n    };\n}\nexports.IngressState = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.status !== undefined && message.status !== 0) {\n            writer.uint32(8).int32(message.status);\n        }\n        if (message.error !== undefined && message.error !== \"\") {\n            writer.uint32(18).string(message.error);\n        }\n        if (message.video !== undefined) {\n            exports.InputVideoState.encode(message.video, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.audio !== undefined) {\n            exports.InputAudioState.encode(message.audio, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.roomId !== undefined && message.roomId !== \"\") {\n            writer.uint32(42).string(message.roomId);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(56).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(64).int64(message.endedAt);\n        }\n        if (message.resourceId !== undefined && message.resourceId !== \"\") {\n            writer.uint32(74).string(message.resourceId);\n        }\n        if (message.tracks !== undefined && message.tracks.length !== 0) {\n            for (const v of message.tracks){\n                livekit_models_1.TrackInfo.encode(v, writer.uint32(50).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressState();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.status = reader.int32();\n                    break;\n                case 2:\n                    message.error = reader.string();\n                    break;\n                case 3:\n                    message.video = exports.InputVideoState.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.audio = exports.InputAudioState.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.roomId = reader.string();\n                    break;\n                case 7:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 8:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                case 9:\n                    message.resourceId = reader.string();\n                    break;\n                case 6:\n                    message.tracks.push(livekit_models_1.TrackInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            status: isSet(object.status) ? ingressState_StatusFromJSON(object.status) : 0,\n            error: isSet(object.error) ? String(object.error) : \"\",\n            video: isSet(object.video) ? exports.InputVideoState.fromJSON(object.video) : undefined,\n            audio: isSet(object.audio) ? exports.InputAudioState.fromJSON(object.audio) : undefined,\n            roomId: isSet(object.roomId) ? String(object.roomId) : \"\",\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0,\n            resourceId: isSet(object.resourceId) ? String(object.resourceId) : \"\",\n            tracks: Array.isArray(object === null || object === void 0 ? void 0 : object.tracks) ? object.tracks.map((e)=>livekit_models_1.TrackInfo.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.status !== undefined && (obj.status = ingressState_StatusToJSON(message.status));\n        message.error !== undefined && (obj.error = message.error);\n        message.video !== undefined && (obj.video = message.video ? exports.InputVideoState.toJSON(message.video) : undefined);\n        message.audio !== undefined && (obj.audio = message.audio ? exports.InputAudioState.toJSON(message.audio) : undefined);\n        message.roomId !== undefined && (obj.roomId = message.roomId);\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        message.resourceId !== undefined && (obj.resourceId = message.resourceId);\n        if (message.tracks) {\n            obj.tracks = message.tracks.map((e)=>e ? livekit_models_1.TrackInfo.toJSON(e) : undefined);\n        } else {\n            obj.tracks = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const message = createBaseIngressState();\n        message.status = (_a = object.status) !== null && _a !== void 0 ? _a : 0;\n        message.error = (_b = object.error) !== null && _b !== void 0 ? _b : \"\";\n        message.video = object.video !== undefined && object.video !== null ? exports.InputVideoState.fromPartial(object.video) : undefined;\n        message.audio = object.audio !== undefined && object.audio !== null ? exports.InputAudioState.fromPartial(object.audio) : undefined;\n        message.roomId = (_c = object.roomId) !== null && _c !== void 0 ? _c : \"\";\n        message.startedAt = (_d = object.startedAt) !== null && _d !== void 0 ? _d : 0;\n        message.endedAt = (_e = object.endedAt) !== null && _e !== void 0 ? _e : 0;\n        message.resourceId = (_f = object.resourceId) !== null && _f !== void 0 ? _f : \"\";\n        message.tracks = ((_g = object.tracks) === null || _g === void 0 ? void 0 : _g.map((e)=>livekit_models_1.TrackInfo.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseInputVideoState() {\n    return {\n        mimeType: \"\",\n        averageBitrate: 0,\n        width: 0,\n        height: 0,\n        framerate: 0\n    };\n}\nexports.InputVideoState = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.mimeType !== undefined && message.mimeType !== \"\") {\n            writer.uint32(10).string(message.mimeType);\n        }\n        if (message.averageBitrate !== undefined && message.averageBitrate !== 0) {\n            writer.uint32(16).uint32(message.averageBitrate);\n        }\n        if (message.width !== undefined && message.width !== 0) {\n            writer.uint32(24).uint32(message.width);\n        }\n        if (message.height !== undefined && message.height !== 0) {\n            writer.uint32(32).uint32(message.height);\n        }\n        if (message.framerate !== undefined && message.framerate !== 0) {\n            writer.uint32(41).double(message.framerate);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInputVideoState();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.mimeType = reader.string();\n                    break;\n                case 2:\n                    message.averageBitrate = reader.uint32();\n                    break;\n                case 3:\n                    message.width = reader.uint32();\n                    break;\n                case 4:\n                    message.height = reader.uint32();\n                    break;\n                case 5:\n                    message.framerate = reader.double();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            mimeType: isSet(object.mimeType) ? String(object.mimeType) : \"\",\n            averageBitrate: isSet(object.averageBitrate) ? Number(object.averageBitrate) : 0,\n            width: isSet(object.width) ? Number(object.width) : 0,\n            height: isSet(object.height) ? Number(object.height) : 0,\n            framerate: isSet(object.framerate) ? Number(object.framerate) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.mimeType !== undefined && (obj.mimeType = message.mimeType);\n        message.averageBitrate !== undefined && (obj.averageBitrate = Math.round(message.averageBitrate));\n        message.width !== undefined && (obj.width = Math.round(message.width));\n        message.height !== undefined && (obj.height = Math.round(message.height));\n        message.framerate !== undefined && (obj.framerate = message.framerate);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e;\n        const message = createBaseInputVideoState();\n        message.mimeType = (_a = object.mimeType) !== null && _a !== void 0 ? _a : \"\";\n        message.averageBitrate = (_b = object.averageBitrate) !== null && _b !== void 0 ? _b : 0;\n        message.width = (_c = object.width) !== null && _c !== void 0 ? _c : 0;\n        message.height = (_d = object.height) !== null && _d !== void 0 ? _d : 0;\n        message.framerate = (_e = object.framerate) !== null && _e !== void 0 ? _e : 0;\n        return message;\n    }\n};\nfunction createBaseInputAudioState() {\n    return {\n        mimeType: \"\",\n        averageBitrate: 0,\n        channels: 0,\n        sampleRate: 0\n    };\n}\nexports.InputAudioState = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.mimeType !== undefined && message.mimeType !== \"\") {\n            writer.uint32(10).string(message.mimeType);\n        }\n        if (message.averageBitrate !== undefined && message.averageBitrate !== 0) {\n            writer.uint32(16).uint32(message.averageBitrate);\n        }\n        if (message.channels !== undefined && message.channels !== 0) {\n            writer.uint32(24).uint32(message.channels);\n        }\n        if (message.sampleRate !== undefined && message.sampleRate !== 0) {\n            writer.uint32(32).uint32(message.sampleRate);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInputAudioState();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.mimeType = reader.string();\n                    break;\n                case 2:\n                    message.averageBitrate = reader.uint32();\n                    break;\n                case 3:\n                    message.channels = reader.uint32();\n                    break;\n                case 4:\n                    message.sampleRate = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            mimeType: isSet(object.mimeType) ? String(object.mimeType) : \"\",\n            averageBitrate: isSet(object.averageBitrate) ? Number(object.averageBitrate) : 0,\n            channels: isSet(object.channels) ? Number(object.channels) : 0,\n            sampleRate: isSet(object.sampleRate) ? Number(object.sampleRate) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.mimeType !== undefined && (obj.mimeType = message.mimeType);\n        message.averageBitrate !== undefined && (obj.averageBitrate = Math.round(message.averageBitrate));\n        message.channels !== undefined && (obj.channels = Math.round(message.channels));\n        message.sampleRate !== undefined && (obj.sampleRate = Math.round(message.sampleRate));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d;\n        const message = createBaseInputAudioState();\n        message.mimeType = (_a = object.mimeType) !== null && _a !== void 0 ? _a : \"\";\n        message.averageBitrate = (_b = object.averageBitrate) !== null && _b !== void 0 ? _b : 0;\n        message.channels = (_c = object.channels) !== null && _c !== void 0 ? _c : 0;\n        message.sampleRate = (_d = object.sampleRate) !== null && _d !== void 0 ? _d : 0;\n        return message;\n    }\n};\nfunction createBaseUpdateIngressRequest() {\n    return {\n        ingressId: \"\",\n        name: \"\",\n        roomName: \"\",\n        participantIdentity: \"\",\n        participantName: \"\",\n        bypassTranscoding: undefined,\n        audio: undefined,\n        video: undefined\n    };\n}\nexports.UpdateIngressRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.ingressId !== undefined && message.ingressId !== \"\") {\n            writer.uint32(10).string(message.ingressId);\n        }\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(18).string(message.name);\n        }\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(26).string(message.roomName);\n        }\n        if (message.participantIdentity !== undefined && message.participantIdentity !== \"\") {\n            writer.uint32(34).string(message.participantIdentity);\n        }\n        if (message.participantName !== undefined && message.participantName !== \"\") {\n            writer.uint32(42).string(message.participantName);\n        }\n        if (message.bypassTranscoding !== undefined) {\n            writer.uint32(64).bool(message.bypassTranscoding);\n        }\n        if (message.audio !== undefined) {\n            exports.IngressAudioOptions.encode(message.audio, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.video !== undefined) {\n            exports.IngressVideoOptions.encode(message.video, writer.uint32(58).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateIngressRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.ingressId = reader.string();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 3:\n                    message.roomName = reader.string();\n                    break;\n                case 4:\n                    message.participantIdentity = reader.string();\n                    break;\n                case 5:\n                    message.participantName = reader.string();\n                    break;\n                case 8:\n                    message.bypassTranscoding = reader.bool();\n                    break;\n                case 6:\n                    message.audio = exports.IngressAudioOptions.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.video = exports.IngressVideoOptions.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            ingressId: isSet(object.ingressId) ? String(object.ingressId) : \"\",\n            name: isSet(object.name) ? String(object.name) : \"\",\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            participantIdentity: isSet(object.participantIdentity) ? String(object.participantIdentity) : \"\",\n            participantName: isSet(object.participantName) ? String(object.participantName) : \"\",\n            bypassTranscoding: isSet(object.bypassTranscoding) ? Boolean(object.bypassTranscoding) : undefined,\n            audio: isSet(object.audio) ? exports.IngressAudioOptions.fromJSON(object.audio) : undefined,\n            video: isSet(object.video) ? exports.IngressVideoOptions.fromJSON(object.video) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.ingressId !== undefined && (obj.ingressId = message.ingressId);\n        message.name !== undefined && (obj.name = message.name);\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.participantIdentity !== undefined && (obj.participantIdentity = message.participantIdentity);\n        message.participantName !== undefined && (obj.participantName = message.participantName);\n        message.bypassTranscoding !== undefined && (obj.bypassTranscoding = message.bypassTranscoding);\n        message.audio !== undefined && (obj.audio = message.audio ? exports.IngressAudioOptions.toJSON(message.audio) : undefined);\n        message.video !== undefined && (obj.video = message.video ? exports.IngressVideoOptions.toJSON(message.video) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseUpdateIngressRequest();\n        message.ingressId = (_a = object.ingressId) !== null && _a !== void 0 ? _a : \"\";\n        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : \"\";\n        message.roomName = (_c = object.roomName) !== null && _c !== void 0 ? _c : \"\";\n        message.participantIdentity = (_d = object.participantIdentity) !== null && _d !== void 0 ? _d : \"\";\n        message.participantName = (_e = object.participantName) !== null && _e !== void 0 ? _e : \"\";\n        message.bypassTranscoding = (_f = object.bypassTranscoding) !== null && _f !== void 0 ? _f : undefined;\n        message.audio = object.audio !== undefined && object.audio !== null ? exports.IngressAudioOptions.fromPartial(object.audio) : undefined;\n        message.video = object.video !== undefined && object.video !== null ? exports.IngressVideoOptions.fromPartial(object.video) : undefined;\n        return message;\n    }\n};\nfunction createBaseListIngressRequest() {\n    return {\n        roomName: \"\",\n        ingressId: \"\"\n    };\n}\nexports.ListIngressRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.ingressId !== undefined && message.ingressId !== \"\") {\n            writer.uint32(18).string(message.ingressId);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListIngressRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.ingressId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            ingressId: isSet(object.ingressId) ? String(object.ingressId) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.ingressId !== undefined && (obj.ingressId = message.ingressId);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseListIngressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.ingressId = (_b = object.ingressId) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    }\n};\nfunction createBaseListIngressResponse() {\n    return {\n        items: []\n    };\n}\nexports.ListIngressResponse = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.items !== undefined && message.items.length !== 0) {\n            for (const v of message.items){\n                exports.IngressInfo.encode(v, writer.uint32(10).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListIngressResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.items.push(exports.IngressInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            items: Array.isArray(object === null || object === void 0 ? void 0 : object.items) ? object.items.map((e)=>exports.IngressInfo.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.items) {\n            obj.items = message.items.map((e)=>e ? exports.IngressInfo.toJSON(e) : undefined);\n        } else {\n            obj.items = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseListIngressResponse();\n        message.items = ((_a = object.items) === null || _a === void 0 ? void 0 : _a.map((e)=>exports.IngressInfo.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseDeleteIngressRequest() {\n    return {\n        ingressId: \"\"\n    };\n}\nexports.DeleteIngressRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.ingressId !== undefined && message.ingressId !== \"\") {\n            writer.uint32(10).string(message.ingressId);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDeleteIngressRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.ingressId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            ingressId: isSet(object.ingressId) ? String(object.ingressId) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.ingressId !== undefined && (obj.ingressId = message.ingressId);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseDeleteIngressRequest();\n        message.ingressId = (_a = object.ingressId) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    }\n};\nvar globalThis = (()=>{\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (false) {}\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n} //# sourceMappingURL=livekit_ingress.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js":
/*!**********************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/livekit_models.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Room = exports.clientInfo_SDKToJSON = exports.clientInfo_SDKFromJSON = exports.ClientInfo_SDK = exports.serverInfo_EditionToJSON = exports.serverInfo_EditionFromJSON = exports.ServerInfo_Edition = exports.dataPacket_KindToJSON = exports.dataPacket_KindFromJSON = exports.DataPacket_Kind = exports.encryption_TypeToJSON = exports.encryption_TypeFromJSON = exports.Encryption_Type = exports.participantInfo_StateToJSON = exports.participantInfo_StateFromJSON = exports.ParticipantInfo_State = exports.subscriptionErrorToJSON = exports.subscriptionErrorFromJSON = exports.SubscriptionError = exports.reconnectReasonToJSON = exports.reconnectReasonFromJSON = exports.ReconnectReason = exports.disconnectReasonToJSON = exports.disconnectReasonFromJSON = exports.DisconnectReason = exports.clientConfigSettingToJSON = exports.clientConfigSettingFromJSON = exports.ClientConfigSetting = exports.connectionQualityToJSON = exports.connectionQualityFromJSON = exports.ConnectionQuality = exports.videoQualityToJSON = exports.videoQualityFromJSON = exports.VideoQuality = exports.trackSourceToJSON = exports.trackSourceFromJSON = exports.TrackSource = exports.trackTypeToJSON = exports.trackTypeFromJSON = exports.TrackType = exports.imageCodecToJSON = exports.imageCodecFromJSON = exports.ImageCodec = exports.videoCodecToJSON = exports.videoCodecFromJSON = exports.VideoCodec = exports.audioCodecToJSON = exports.audioCodecFromJSON = exports.AudioCodec = exports.protobufPackage = void 0;\nexports.TimedVersion = exports.RTPStats_GapHistogramEntry = exports.RTPStats = exports.RTPDrift = exports.DisabledCodecs = exports.VideoConfiguration = exports.ClientConfiguration = exports.ClientInfo = exports.ServerInfo = exports.ParticipantTracks = exports.UserPacket = exports.SpeakerInfo = exports.ActiveSpeakerUpdate = exports.DataPacket = exports.VideoLayer = exports.TrackInfo = exports.SimulcastCodecInfo = exports.Encryption = exports.ParticipantInfo = exports.ParticipantPermission = exports.PlayoutDelay = exports.Codec = void 0;\n/* eslint-disable */ const long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/umd/index.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst timestamp_1 = __webpack_require__(/*! ./google/protobuf/timestamp */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/google/protobuf/timestamp.js\");\nexports.protobufPackage = \"livekit\";\nvar AudioCodec;\n(function(AudioCodec) {\n    AudioCodec[AudioCodec[\"DEFAULT_AC\"] = 0] = \"DEFAULT_AC\";\n    AudioCodec[AudioCodec[\"OPUS\"] = 1] = \"OPUS\";\n    AudioCodec[AudioCodec[\"AAC\"] = 2] = \"AAC\";\n    AudioCodec[AudioCodec[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(AudioCodec = exports.AudioCodec || (exports.AudioCodec = {}));\nfunction audioCodecFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"DEFAULT_AC\":\n            return AudioCodec.DEFAULT_AC;\n        case 1:\n        case \"OPUS\":\n            return AudioCodec.OPUS;\n        case 2:\n        case \"AAC\":\n            return AudioCodec.AAC;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return AudioCodec.UNRECOGNIZED;\n    }\n}\nexports.audioCodecFromJSON = audioCodecFromJSON;\nfunction audioCodecToJSON(object) {\n    switch(object){\n        case AudioCodec.DEFAULT_AC:\n            return \"DEFAULT_AC\";\n        case AudioCodec.OPUS:\n            return \"OPUS\";\n        case AudioCodec.AAC:\n            return \"AAC\";\n        case AudioCodec.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.audioCodecToJSON = audioCodecToJSON;\nvar VideoCodec;\n(function(VideoCodec) {\n    VideoCodec[VideoCodec[\"DEFAULT_VC\"] = 0] = \"DEFAULT_VC\";\n    VideoCodec[VideoCodec[\"H264_BASELINE\"] = 1] = \"H264_BASELINE\";\n    VideoCodec[VideoCodec[\"H264_MAIN\"] = 2] = \"H264_MAIN\";\n    VideoCodec[VideoCodec[\"H264_HIGH\"] = 3] = \"H264_HIGH\";\n    VideoCodec[VideoCodec[\"VP8\"] = 4] = \"VP8\";\n    VideoCodec[VideoCodec[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(VideoCodec = exports.VideoCodec || (exports.VideoCodec = {}));\nfunction videoCodecFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"DEFAULT_VC\":\n            return VideoCodec.DEFAULT_VC;\n        case 1:\n        case \"H264_BASELINE\":\n            return VideoCodec.H264_BASELINE;\n        case 2:\n        case \"H264_MAIN\":\n            return VideoCodec.H264_MAIN;\n        case 3:\n        case \"H264_HIGH\":\n            return VideoCodec.H264_HIGH;\n        case 4:\n        case \"VP8\":\n            return VideoCodec.VP8;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return VideoCodec.UNRECOGNIZED;\n    }\n}\nexports.videoCodecFromJSON = videoCodecFromJSON;\nfunction videoCodecToJSON(object) {\n    switch(object){\n        case VideoCodec.DEFAULT_VC:\n            return \"DEFAULT_VC\";\n        case VideoCodec.H264_BASELINE:\n            return \"H264_BASELINE\";\n        case VideoCodec.H264_MAIN:\n            return \"H264_MAIN\";\n        case VideoCodec.H264_HIGH:\n            return \"H264_HIGH\";\n        case VideoCodec.VP8:\n            return \"VP8\";\n        case VideoCodec.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.videoCodecToJSON = videoCodecToJSON;\nvar ImageCodec;\n(function(ImageCodec) {\n    ImageCodec[ImageCodec[\"IC_DEFAULT\"] = 0] = \"IC_DEFAULT\";\n    ImageCodec[ImageCodec[\"IC_JPEG\"] = 1] = \"IC_JPEG\";\n    ImageCodec[ImageCodec[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ImageCodec = exports.ImageCodec || (exports.ImageCodec = {}));\nfunction imageCodecFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"IC_DEFAULT\":\n            return ImageCodec.IC_DEFAULT;\n        case 1:\n        case \"IC_JPEG\":\n            return ImageCodec.IC_JPEG;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ImageCodec.UNRECOGNIZED;\n    }\n}\nexports.imageCodecFromJSON = imageCodecFromJSON;\nfunction imageCodecToJSON(object) {\n    switch(object){\n        case ImageCodec.IC_DEFAULT:\n            return \"IC_DEFAULT\";\n        case ImageCodec.IC_JPEG:\n            return \"IC_JPEG\";\n        case ImageCodec.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.imageCodecToJSON = imageCodecToJSON;\nvar TrackType;\n(function(TrackType) {\n    TrackType[TrackType[\"AUDIO\"] = 0] = \"AUDIO\";\n    TrackType[TrackType[\"VIDEO\"] = 1] = \"VIDEO\";\n    TrackType[TrackType[\"DATA\"] = 2] = \"DATA\";\n    TrackType[TrackType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(TrackType = exports.TrackType || (exports.TrackType = {}));\nfunction trackTypeFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"AUDIO\":\n            return TrackType.AUDIO;\n        case 1:\n        case \"VIDEO\":\n            return TrackType.VIDEO;\n        case 2:\n        case \"DATA\":\n            return TrackType.DATA;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return TrackType.UNRECOGNIZED;\n    }\n}\nexports.trackTypeFromJSON = trackTypeFromJSON;\nfunction trackTypeToJSON(object) {\n    switch(object){\n        case TrackType.AUDIO:\n            return \"AUDIO\";\n        case TrackType.VIDEO:\n            return \"VIDEO\";\n        case TrackType.DATA:\n            return \"DATA\";\n        case TrackType.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.trackTypeToJSON = trackTypeToJSON;\nvar TrackSource;\n(function(TrackSource) {\n    TrackSource[TrackSource[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    TrackSource[TrackSource[\"CAMERA\"] = 1] = \"CAMERA\";\n    TrackSource[TrackSource[\"MICROPHONE\"] = 2] = \"MICROPHONE\";\n    TrackSource[TrackSource[\"SCREEN_SHARE\"] = 3] = \"SCREEN_SHARE\";\n    TrackSource[TrackSource[\"SCREEN_SHARE_AUDIO\"] = 4] = \"SCREEN_SHARE_AUDIO\";\n    TrackSource[TrackSource[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(TrackSource = exports.TrackSource || (exports.TrackSource = {}));\nfunction trackSourceFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"UNKNOWN\":\n            return TrackSource.UNKNOWN;\n        case 1:\n        case \"CAMERA\":\n            return TrackSource.CAMERA;\n        case 2:\n        case \"MICROPHONE\":\n            return TrackSource.MICROPHONE;\n        case 3:\n        case \"SCREEN_SHARE\":\n            return TrackSource.SCREEN_SHARE;\n        case 4:\n        case \"SCREEN_SHARE_AUDIO\":\n            return TrackSource.SCREEN_SHARE_AUDIO;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return TrackSource.UNRECOGNIZED;\n    }\n}\nexports.trackSourceFromJSON = trackSourceFromJSON;\nfunction trackSourceToJSON(object) {\n    switch(object){\n        case TrackSource.UNKNOWN:\n            return \"UNKNOWN\";\n        case TrackSource.CAMERA:\n            return \"CAMERA\";\n        case TrackSource.MICROPHONE:\n            return \"MICROPHONE\";\n        case TrackSource.SCREEN_SHARE:\n            return \"SCREEN_SHARE\";\n        case TrackSource.SCREEN_SHARE_AUDIO:\n            return \"SCREEN_SHARE_AUDIO\";\n        case TrackSource.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.trackSourceToJSON = trackSourceToJSON;\nvar VideoQuality;\n(function(VideoQuality) {\n    VideoQuality[VideoQuality[\"LOW\"] = 0] = \"LOW\";\n    VideoQuality[VideoQuality[\"MEDIUM\"] = 1] = \"MEDIUM\";\n    VideoQuality[VideoQuality[\"HIGH\"] = 2] = \"HIGH\";\n    VideoQuality[VideoQuality[\"OFF\"] = 3] = \"OFF\";\n    VideoQuality[VideoQuality[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(VideoQuality = exports.VideoQuality || (exports.VideoQuality = {}));\nfunction videoQualityFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"LOW\":\n            return VideoQuality.LOW;\n        case 1:\n        case \"MEDIUM\":\n            return VideoQuality.MEDIUM;\n        case 2:\n        case \"HIGH\":\n            return VideoQuality.HIGH;\n        case 3:\n        case \"OFF\":\n            return VideoQuality.OFF;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return VideoQuality.UNRECOGNIZED;\n    }\n}\nexports.videoQualityFromJSON = videoQualityFromJSON;\nfunction videoQualityToJSON(object) {\n    switch(object){\n        case VideoQuality.LOW:\n            return \"LOW\";\n        case VideoQuality.MEDIUM:\n            return \"MEDIUM\";\n        case VideoQuality.HIGH:\n            return \"HIGH\";\n        case VideoQuality.OFF:\n            return \"OFF\";\n        case VideoQuality.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.videoQualityToJSON = videoQualityToJSON;\nvar ConnectionQuality;\n(function(ConnectionQuality) {\n    ConnectionQuality[ConnectionQuality[\"POOR\"] = 0] = \"POOR\";\n    ConnectionQuality[ConnectionQuality[\"GOOD\"] = 1] = \"GOOD\";\n    ConnectionQuality[ConnectionQuality[\"EXCELLENT\"] = 2] = \"EXCELLENT\";\n    ConnectionQuality[ConnectionQuality[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ConnectionQuality = exports.ConnectionQuality || (exports.ConnectionQuality = {}));\nfunction connectionQualityFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"POOR\":\n            return ConnectionQuality.POOR;\n        case 1:\n        case \"GOOD\":\n            return ConnectionQuality.GOOD;\n        case 2:\n        case \"EXCELLENT\":\n            return ConnectionQuality.EXCELLENT;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ConnectionQuality.UNRECOGNIZED;\n    }\n}\nexports.connectionQualityFromJSON = connectionQualityFromJSON;\nfunction connectionQualityToJSON(object) {\n    switch(object){\n        case ConnectionQuality.POOR:\n            return \"POOR\";\n        case ConnectionQuality.GOOD:\n            return \"GOOD\";\n        case ConnectionQuality.EXCELLENT:\n            return \"EXCELLENT\";\n        case ConnectionQuality.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.connectionQualityToJSON = connectionQualityToJSON;\nvar ClientConfigSetting;\n(function(ClientConfigSetting) {\n    ClientConfigSetting[ClientConfigSetting[\"UNSET\"] = 0] = \"UNSET\";\n    ClientConfigSetting[ClientConfigSetting[\"DISABLED\"] = 1] = \"DISABLED\";\n    ClientConfigSetting[ClientConfigSetting[\"ENABLED\"] = 2] = \"ENABLED\";\n    ClientConfigSetting[ClientConfigSetting[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ClientConfigSetting = exports.ClientConfigSetting || (exports.ClientConfigSetting = {}));\nfunction clientConfigSettingFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"UNSET\":\n            return ClientConfigSetting.UNSET;\n        case 1:\n        case \"DISABLED\":\n            return ClientConfigSetting.DISABLED;\n        case 2:\n        case \"ENABLED\":\n            return ClientConfigSetting.ENABLED;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ClientConfigSetting.UNRECOGNIZED;\n    }\n}\nexports.clientConfigSettingFromJSON = clientConfigSettingFromJSON;\nfunction clientConfigSettingToJSON(object) {\n    switch(object){\n        case ClientConfigSetting.UNSET:\n            return \"UNSET\";\n        case ClientConfigSetting.DISABLED:\n            return \"DISABLED\";\n        case ClientConfigSetting.ENABLED:\n            return \"ENABLED\";\n        case ClientConfigSetting.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.clientConfigSettingToJSON = clientConfigSettingToJSON;\nvar DisconnectReason;\n(function(DisconnectReason) {\n    DisconnectReason[DisconnectReason[\"UNKNOWN_REASON\"] = 0] = \"UNKNOWN_REASON\";\n    DisconnectReason[DisconnectReason[\"CLIENT_INITIATED\"] = 1] = \"CLIENT_INITIATED\";\n    DisconnectReason[DisconnectReason[\"DUPLICATE_IDENTITY\"] = 2] = \"DUPLICATE_IDENTITY\";\n    DisconnectReason[DisconnectReason[\"SERVER_SHUTDOWN\"] = 3] = \"SERVER_SHUTDOWN\";\n    DisconnectReason[DisconnectReason[\"PARTICIPANT_REMOVED\"] = 4] = \"PARTICIPANT_REMOVED\";\n    DisconnectReason[DisconnectReason[\"ROOM_DELETED\"] = 5] = \"ROOM_DELETED\";\n    DisconnectReason[DisconnectReason[\"STATE_MISMATCH\"] = 6] = \"STATE_MISMATCH\";\n    DisconnectReason[DisconnectReason[\"JOIN_FAILURE\"] = 7] = \"JOIN_FAILURE\";\n    DisconnectReason[DisconnectReason[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(DisconnectReason = exports.DisconnectReason || (exports.DisconnectReason = {}));\nfunction disconnectReasonFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"UNKNOWN_REASON\":\n            return DisconnectReason.UNKNOWN_REASON;\n        case 1:\n        case \"CLIENT_INITIATED\":\n            return DisconnectReason.CLIENT_INITIATED;\n        case 2:\n        case \"DUPLICATE_IDENTITY\":\n            return DisconnectReason.DUPLICATE_IDENTITY;\n        case 3:\n        case \"SERVER_SHUTDOWN\":\n            return DisconnectReason.SERVER_SHUTDOWN;\n        case 4:\n        case \"PARTICIPANT_REMOVED\":\n            return DisconnectReason.PARTICIPANT_REMOVED;\n        case 5:\n        case \"ROOM_DELETED\":\n            return DisconnectReason.ROOM_DELETED;\n        case 6:\n        case \"STATE_MISMATCH\":\n            return DisconnectReason.STATE_MISMATCH;\n        case 7:\n        case \"JOIN_FAILURE\":\n            return DisconnectReason.JOIN_FAILURE;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return DisconnectReason.UNRECOGNIZED;\n    }\n}\nexports.disconnectReasonFromJSON = disconnectReasonFromJSON;\nfunction disconnectReasonToJSON(object) {\n    switch(object){\n        case DisconnectReason.UNKNOWN_REASON:\n            return \"UNKNOWN_REASON\";\n        case DisconnectReason.CLIENT_INITIATED:\n            return \"CLIENT_INITIATED\";\n        case DisconnectReason.DUPLICATE_IDENTITY:\n            return \"DUPLICATE_IDENTITY\";\n        case DisconnectReason.SERVER_SHUTDOWN:\n            return \"SERVER_SHUTDOWN\";\n        case DisconnectReason.PARTICIPANT_REMOVED:\n            return \"PARTICIPANT_REMOVED\";\n        case DisconnectReason.ROOM_DELETED:\n            return \"ROOM_DELETED\";\n        case DisconnectReason.STATE_MISMATCH:\n            return \"STATE_MISMATCH\";\n        case DisconnectReason.JOIN_FAILURE:\n            return \"JOIN_FAILURE\";\n        case DisconnectReason.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.disconnectReasonToJSON = disconnectReasonToJSON;\nvar ReconnectReason;\n(function(ReconnectReason) {\n    ReconnectReason[ReconnectReason[\"RR_UNKNOWN\"] = 0] = \"RR_UNKNOWN\";\n    ReconnectReason[ReconnectReason[\"RR_SIGNAL_DISCONNECTED\"] = 1] = \"RR_SIGNAL_DISCONNECTED\";\n    ReconnectReason[ReconnectReason[\"RR_PUBLISHER_FAILED\"] = 2] = \"RR_PUBLISHER_FAILED\";\n    ReconnectReason[ReconnectReason[\"RR_SUBSCRIBER_FAILED\"] = 3] = \"RR_SUBSCRIBER_FAILED\";\n    ReconnectReason[ReconnectReason[\"RR_SWITCH_CANDIDATE\"] = 4] = \"RR_SWITCH_CANDIDATE\";\n    ReconnectReason[ReconnectReason[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ReconnectReason = exports.ReconnectReason || (exports.ReconnectReason = {}));\nfunction reconnectReasonFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"RR_UNKNOWN\":\n            return ReconnectReason.RR_UNKNOWN;\n        case 1:\n        case \"RR_SIGNAL_DISCONNECTED\":\n            return ReconnectReason.RR_SIGNAL_DISCONNECTED;\n        case 2:\n        case \"RR_PUBLISHER_FAILED\":\n            return ReconnectReason.RR_PUBLISHER_FAILED;\n        case 3:\n        case \"RR_SUBSCRIBER_FAILED\":\n            return ReconnectReason.RR_SUBSCRIBER_FAILED;\n        case 4:\n        case \"RR_SWITCH_CANDIDATE\":\n            return ReconnectReason.RR_SWITCH_CANDIDATE;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ReconnectReason.UNRECOGNIZED;\n    }\n}\nexports.reconnectReasonFromJSON = reconnectReasonFromJSON;\nfunction reconnectReasonToJSON(object) {\n    switch(object){\n        case ReconnectReason.RR_UNKNOWN:\n            return \"RR_UNKNOWN\";\n        case ReconnectReason.RR_SIGNAL_DISCONNECTED:\n            return \"RR_SIGNAL_DISCONNECTED\";\n        case ReconnectReason.RR_PUBLISHER_FAILED:\n            return \"RR_PUBLISHER_FAILED\";\n        case ReconnectReason.RR_SUBSCRIBER_FAILED:\n            return \"RR_SUBSCRIBER_FAILED\";\n        case ReconnectReason.RR_SWITCH_CANDIDATE:\n            return \"RR_SWITCH_CANDIDATE\";\n        case ReconnectReason.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.reconnectReasonToJSON = reconnectReasonToJSON;\nvar SubscriptionError;\n(function(SubscriptionError) {\n    SubscriptionError[SubscriptionError[\"SE_UNKNOWN\"] = 0] = \"SE_UNKNOWN\";\n    SubscriptionError[SubscriptionError[\"SE_CODEC_UNSUPPORTED\"] = 1] = \"SE_CODEC_UNSUPPORTED\";\n    SubscriptionError[SubscriptionError[\"SE_TRACK_NOTFOUND\"] = 2] = \"SE_TRACK_NOTFOUND\";\n    SubscriptionError[SubscriptionError[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(SubscriptionError = exports.SubscriptionError || (exports.SubscriptionError = {}));\nfunction subscriptionErrorFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"SE_UNKNOWN\":\n            return SubscriptionError.SE_UNKNOWN;\n        case 1:\n        case \"SE_CODEC_UNSUPPORTED\":\n            return SubscriptionError.SE_CODEC_UNSUPPORTED;\n        case 2:\n        case \"SE_TRACK_NOTFOUND\":\n            return SubscriptionError.SE_TRACK_NOTFOUND;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return SubscriptionError.UNRECOGNIZED;\n    }\n}\nexports.subscriptionErrorFromJSON = subscriptionErrorFromJSON;\nfunction subscriptionErrorToJSON(object) {\n    switch(object){\n        case SubscriptionError.SE_UNKNOWN:\n            return \"SE_UNKNOWN\";\n        case SubscriptionError.SE_CODEC_UNSUPPORTED:\n            return \"SE_CODEC_UNSUPPORTED\";\n        case SubscriptionError.SE_TRACK_NOTFOUND:\n            return \"SE_TRACK_NOTFOUND\";\n        case SubscriptionError.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.subscriptionErrorToJSON = subscriptionErrorToJSON;\nvar ParticipantInfo_State;\n(function(ParticipantInfo_State) {\n    /** JOINING - websocket' connected, but not offered yet */ ParticipantInfo_State[ParticipantInfo_State[\"JOINING\"] = 0] = \"JOINING\";\n    /** JOINED - server received client offer */ ParticipantInfo_State[ParticipantInfo_State[\"JOINED\"] = 1] = \"JOINED\";\n    /** ACTIVE - ICE connectivity established */ ParticipantInfo_State[ParticipantInfo_State[\"ACTIVE\"] = 2] = \"ACTIVE\";\n    /** DISCONNECTED - WS disconnected */ ParticipantInfo_State[ParticipantInfo_State[\"DISCONNECTED\"] = 3] = \"DISCONNECTED\";\n    ParticipantInfo_State[ParticipantInfo_State[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ParticipantInfo_State = exports.ParticipantInfo_State || (exports.ParticipantInfo_State = {}));\nfunction participantInfo_StateFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"JOINING\":\n            return ParticipantInfo_State.JOINING;\n        case 1:\n        case \"JOINED\":\n            return ParticipantInfo_State.JOINED;\n        case 2:\n        case \"ACTIVE\":\n            return ParticipantInfo_State.ACTIVE;\n        case 3:\n        case \"DISCONNECTED\":\n            return ParticipantInfo_State.DISCONNECTED;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ParticipantInfo_State.UNRECOGNIZED;\n    }\n}\nexports.participantInfo_StateFromJSON = participantInfo_StateFromJSON;\nfunction participantInfo_StateToJSON(object) {\n    switch(object){\n        case ParticipantInfo_State.JOINING:\n            return \"JOINING\";\n        case ParticipantInfo_State.JOINED:\n            return \"JOINED\";\n        case ParticipantInfo_State.ACTIVE:\n            return \"ACTIVE\";\n        case ParticipantInfo_State.DISCONNECTED:\n            return \"DISCONNECTED\";\n        case ParticipantInfo_State.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.participantInfo_StateToJSON = participantInfo_StateToJSON;\nvar Encryption_Type;\n(function(Encryption_Type) {\n    Encryption_Type[Encryption_Type[\"NONE\"] = 0] = \"NONE\";\n    Encryption_Type[Encryption_Type[\"GCM\"] = 1] = \"GCM\";\n    Encryption_Type[Encryption_Type[\"CUSTOM\"] = 2] = \"CUSTOM\";\n    Encryption_Type[Encryption_Type[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(Encryption_Type = exports.Encryption_Type || (exports.Encryption_Type = {}));\nfunction encryption_TypeFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"NONE\":\n            return Encryption_Type.NONE;\n        case 1:\n        case \"GCM\":\n            return Encryption_Type.GCM;\n        case 2:\n        case \"CUSTOM\":\n            return Encryption_Type.CUSTOM;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return Encryption_Type.UNRECOGNIZED;\n    }\n}\nexports.encryption_TypeFromJSON = encryption_TypeFromJSON;\nfunction encryption_TypeToJSON(object) {\n    switch(object){\n        case Encryption_Type.NONE:\n            return \"NONE\";\n        case Encryption_Type.GCM:\n            return \"GCM\";\n        case Encryption_Type.CUSTOM:\n            return \"CUSTOM\";\n        case Encryption_Type.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.encryption_TypeToJSON = encryption_TypeToJSON;\nvar DataPacket_Kind;\n(function(DataPacket_Kind) {\n    DataPacket_Kind[DataPacket_Kind[\"RELIABLE\"] = 0] = \"RELIABLE\";\n    DataPacket_Kind[DataPacket_Kind[\"LOSSY\"] = 1] = \"LOSSY\";\n    DataPacket_Kind[DataPacket_Kind[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(DataPacket_Kind = exports.DataPacket_Kind || (exports.DataPacket_Kind = {}));\nfunction dataPacket_KindFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"RELIABLE\":\n            return DataPacket_Kind.RELIABLE;\n        case 1:\n        case \"LOSSY\":\n            return DataPacket_Kind.LOSSY;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return DataPacket_Kind.UNRECOGNIZED;\n    }\n}\nexports.dataPacket_KindFromJSON = dataPacket_KindFromJSON;\nfunction dataPacket_KindToJSON(object) {\n    switch(object){\n        case DataPacket_Kind.RELIABLE:\n            return \"RELIABLE\";\n        case DataPacket_Kind.LOSSY:\n            return \"LOSSY\";\n        case DataPacket_Kind.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.dataPacket_KindToJSON = dataPacket_KindToJSON;\nvar ServerInfo_Edition;\n(function(ServerInfo_Edition) {\n    ServerInfo_Edition[ServerInfo_Edition[\"Standard\"] = 0] = \"Standard\";\n    ServerInfo_Edition[ServerInfo_Edition[\"Cloud\"] = 1] = \"Cloud\";\n    ServerInfo_Edition[ServerInfo_Edition[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ServerInfo_Edition = exports.ServerInfo_Edition || (exports.ServerInfo_Edition = {}));\nfunction serverInfo_EditionFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"Standard\":\n            return ServerInfo_Edition.Standard;\n        case 1:\n        case \"Cloud\":\n            return ServerInfo_Edition.Cloud;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ServerInfo_Edition.UNRECOGNIZED;\n    }\n}\nexports.serverInfo_EditionFromJSON = serverInfo_EditionFromJSON;\nfunction serverInfo_EditionToJSON(object) {\n    switch(object){\n        case ServerInfo_Edition.Standard:\n            return \"Standard\";\n        case ServerInfo_Edition.Cloud:\n            return \"Cloud\";\n        case ServerInfo_Edition.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.serverInfo_EditionToJSON = serverInfo_EditionToJSON;\nvar ClientInfo_SDK;\n(function(ClientInfo_SDK) {\n    ClientInfo_SDK[ClientInfo_SDK[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    ClientInfo_SDK[ClientInfo_SDK[\"JS\"] = 1] = \"JS\";\n    ClientInfo_SDK[ClientInfo_SDK[\"SWIFT\"] = 2] = \"SWIFT\";\n    ClientInfo_SDK[ClientInfo_SDK[\"ANDROID\"] = 3] = \"ANDROID\";\n    ClientInfo_SDK[ClientInfo_SDK[\"FLUTTER\"] = 4] = \"FLUTTER\";\n    ClientInfo_SDK[ClientInfo_SDK[\"GO\"] = 5] = \"GO\";\n    ClientInfo_SDK[ClientInfo_SDK[\"UNITY\"] = 6] = \"UNITY\";\n    ClientInfo_SDK[ClientInfo_SDK[\"REACT_NATIVE\"] = 7] = \"REACT_NATIVE\";\n    ClientInfo_SDK[ClientInfo_SDK[\"RUST\"] = 8] = \"RUST\";\n    ClientInfo_SDK[ClientInfo_SDK[\"PYTHON\"] = 9] = \"PYTHON\";\n    ClientInfo_SDK[ClientInfo_SDK[\"CPP\"] = 10] = \"CPP\";\n    ClientInfo_SDK[ClientInfo_SDK[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ClientInfo_SDK = exports.ClientInfo_SDK || (exports.ClientInfo_SDK = {}));\nfunction clientInfo_SDKFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"UNKNOWN\":\n            return ClientInfo_SDK.UNKNOWN;\n        case 1:\n        case \"JS\":\n            return ClientInfo_SDK.JS;\n        case 2:\n        case \"SWIFT\":\n            return ClientInfo_SDK.SWIFT;\n        case 3:\n        case \"ANDROID\":\n            return ClientInfo_SDK.ANDROID;\n        case 4:\n        case \"FLUTTER\":\n            return ClientInfo_SDK.FLUTTER;\n        case 5:\n        case \"GO\":\n            return ClientInfo_SDK.GO;\n        case 6:\n        case \"UNITY\":\n            return ClientInfo_SDK.UNITY;\n        case 7:\n        case \"REACT_NATIVE\":\n            return ClientInfo_SDK.REACT_NATIVE;\n        case 8:\n        case \"RUST\":\n            return ClientInfo_SDK.RUST;\n        case 9:\n        case \"PYTHON\":\n            return ClientInfo_SDK.PYTHON;\n        case 10:\n        case \"CPP\":\n            return ClientInfo_SDK.CPP;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ClientInfo_SDK.UNRECOGNIZED;\n    }\n}\nexports.clientInfo_SDKFromJSON = clientInfo_SDKFromJSON;\nfunction clientInfo_SDKToJSON(object) {\n    switch(object){\n        case ClientInfo_SDK.UNKNOWN:\n            return \"UNKNOWN\";\n        case ClientInfo_SDK.JS:\n            return \"JS\";\n        case ClientInfo_SDK.SWIFT:\n            return \"SWIFT\";\n        case ClientInfo_SDK.ANDROID:\n            return \"ANDROID\";\n        case ClientInfo_SDK.FLUTTER:\n            return \"FLUTTER\";\n        case ClientInfo_SDK.GO:\n            return \"GO\";\n        case ClientInfo_SDK.UNITY:\n            return \"UNITY\";\n        case ClientInfo_SDK.REACT_NATIVE:\n            return \"REACT_NATIVE\";\n        case ClientInfo_SDK.RUST:\n            return \"RUST\";\n        case ClientInfo_SDK.PYTHON:\n            return \"PYTHON\";\n        case ClientInfo_SDK.CPP:\n            return \"CPP\";\n        case ClientInfo_SDK.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.clientInfo_SDKToJSON = clientInfo_SDKToJSON;\nfunction createBaseRoom() {\n    return {\n        sid: \"\",\n        name: \"\",\n        emptyTimeout: 0,\n        maxParticipants: 0,\n        creationTime: 0,\n        turnPassword: \"\",\n        enabledCodecs: [],\n        metadata: \"\",\n        numParticipants: 0,\n        numPublishers: 0,\n        activeRecording: false\n    };\n}\nexports.Room = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.sid !== \"\") {\n            writer.uint32(10).string(message.sid);\n        }\n        if (message.name !== \"\") {\n            writer.uint32(18).string(message.name);\n        }\n        if (message.emptyTimeout !== 0) {\n            writer.uint32(24).uint32(message.emptyTimeout);\n        }\n        if (message.maxParticipants !== 0) {\n            writer.uint32(32).uint32(message.maxParticipants);\n        }\n        if (message.creationTime !== 0) {\n            writer.uint32(40).int64(message.creationTime);\n        }\n        if (message.turnPassword !== \"\") {\n            writer.uint32(50).string(message.turnPassword);\n        }\n        for (const v of message.enabledCodecs){\n            exports.Codec.encode(v, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.metadata !== \"\") {\n            writer.uint32(66).string(message.metadata);\n        }\n        if (message.numParticipants !== 0) {\n            writer.uint32(72).uint32(message.numParticipants);\n        }\n        if (message.numPublishers !== 0) {\n            writer.uint32(88).uint32(message.numPublishers);\n        }\n        if (message.activeRecording === true) {\n            writer.uint32(80).bool(message.activeRecording);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRoom();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.sid = reader.string();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 3:\n                    message.emptyTimeout = reader.uint32();\n                    break;\n                case 4:\n                    message.maxParticipants = reader.uint32();\n                    break;\n                case 5:\n                    message.creationTime = longToNumber(reader.int64());\n                    break;\n                case 6:\n                    message.turnPassword = reader.string();\n                    break;\n                case 7:\n                    message.enabledCodecs.push(exports.Codec.decode(reader, reader.uint32()));\n                    break;\n                case 8:\n                    message.metadata = reader.string();\n                    break;\n                case 9:\n                    message.numParticipants = reader.uint32();\n                    break;\n                case 11:\n                    message.numPublishers = reader.uint32();\n                    break;\n                case 10:\n                    message.activeRecording = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            sid: isSet(object.sid) ? String(object.sid) : \"\",\n            name: isSet(object.name) ? String(object.name) : \"\",\n            emptyTimeout: isSet(object.emptyTimeout) ? Number(object.emptyTimeout) : 0,\n            maxParticipants: isSet(object.maxParticipants) ? Number(object.maxParticipants) : 0,\n            creationTime: isSet(object.creationTime) ? Number(object.creationTime) : 0,\n            turnPassword: isSet(object.turnPassword) ? String(object.turnPassword) : \"\",\n            enabledCodecs: Array.isArray(object === null || object === void 0 ? void 0 : object.enabledCodecs) ? object.enabledCodecs.map((e)=>exports.Codec.fromJSON(e)) : [],\n            metadata: isSet(object.metadata) ? String(object.metadata) : \"\",\n            numParticipants: isSet(object.numParticipants) ? Number(object.numParticipants) : 0,\n            numPublishers: isSet(object.numPublishers) ? Number(object.numPublishers) : 0,\n            activeRecording: isSet(object.activeRecording) ? Boolean(object.activeRecording) : false\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.sid !== undefined && (obj.sid = message.sid);\n        message.name !== undefined && (obj.name = message.name);\n        message.emptyTimeout !== undefined && (obj.emptyTimeout = Math.round(message.emptyTimeout));\n        message.maxParticipants !== undefined && (obj.maxParticipants = Math.round(message.maxParticipants));\n        message.creationTime !== undefined && (obj.creationTime = Math.round(message.creationTime));\n        message.turnPassword !== undefined && (obj.turnPassword = message.turnPassword);\n        if (message.enabledCodecs) {\n            obj.enabledCodecs = message.enabledCodecs.map((e)=>e ? exports.Codec.toJSON(e) : undefined);\n        } else {\n            obj.enabledCodecs = [];\n        }\n        message.metadata !== undefined && (obj.metadata = message.metadata);\n        message.numParticipants !== undefined && (obj.numParticipants = Math.round(message.numParticipants));\n        message.numPublishers !== undefined && (obj.numPublishers = Math.round(message.numPublishers));\n        message.activeRecording !== undefined && (obj.activeRecording = message.activeRecording);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n        const message = createBaseRoom();\n        message.sid = (_a = object.sid) !== null && _a !== void 0 ? _a : \"\";\n        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : \"\";\n        message.emptyTimeout = (_c = object.emptyTimeout) !== null && _c !== void 0 ? _c : 0;\n        message.maxParticipants = (_d = object.maxParticipants) !== null && _d !== void 0 ? _d : 0;\n        message.creationTime = (_e = object.creationTime) !== null && _e !== void 0 ? _e : 0;\n        message.turnPassword = (_f = object.turnPassword) !== null && _f !== void 0 ? _f : \"\";\n        message.enabledCodecs = ((_g = object.enabledCodecs) === null || _g === void 0 ? void 0 : _g.map((e)=>exports.Codec.fromPartial(e))) || [];\n        message.metadata = (_h = object.metadata) !== null && _h !== void 0 ? _h : \"\";\n        message.numParticipants = (_j = object.numParticipants) !== null && _j !== void 0 ? _j : 0;\n        message.numPublishers = (_k = object.numPublishers) !== null && _k !== void 0 ? _k : 0;\n        message.activeRecording = (_l = object.activeRecording) !== null && _l !== void 0 ? _l : false;\n        return message;\n    }\n};\nfunction createBaseCodec() {\n    return {\n        mime: \"\",\n        fmtpLine: \"\"\n    };\n}\nexports.Codec = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.mime !== \"\") {\n            writer.uint32(10).string(message.mime);\n        }\n        if (message.fmtpLine !== \"\") {\n            writer.uint32(18).string(message.fmtpLine);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCodec();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.mime = reader.string();\n                    break;\n                case 2:\n                    message.fmtpLine = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            mime: isSet(object.mime) ? String(object.mime) : \"\",\n            fmtpLine: isSet(object.fmtpLine) ? String(object.fmtpLine) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.mime !== undefined && (obj.mime = message.mime);\n        message.fmtpLine !== undefined && (obj.fmtpLine = message.fmtpLine);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseCodec();\n        message.mime = (_a = object.mime) !== null && _a !== void 0 ? _a : \"\";\n        message.fmtpLine = (_b = object.fmtpLine) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    }\n};\nfunction createBasePlayoutDelay() {\n    return {\n        enabled: false,\n        min: 0,\n        max: 0\n    };\n}\nexports.PlayoutDelay = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.enabled === true) {\n            writer.uint32(8).bool(message.enabled);\n        }\n        if (message.min !== 0) {\n            writer.uint32(16).uint32(message.min);\n        }\n        if (message.max !== 0) {\n            writer.uint32(24).uint32(message.max);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePlayoutDelay();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.enabled = reader.bool();\n                    break;\n                case 2:\n                    message.min = reader.uint32();\n                    break;\n                case 3:\n                    message.max = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            enabled: isSet(object.enabled) ? Boolean(object.enabled) : false,\n            min: isSet(object.min) ? Number(object.min) : 0,\n            max: isSet(object.max) ? Number(object.max) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.enabled !== undefined && (obj.enabled = message.enabled);\n        message.min !== undefined && (obj.min = Math.round(message.min));\n        message.max !== undefined && (obj.max = Math.round(message.max));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBasePlayoutDelay();\n        message.enabled = (_a = object.enabled) !== null && _a !== void 0 ? _a : false;\n        message.min = (_b = object.min) !== null && _b !== void 0 ? _b : 0;\n        message.max = (_c = object.max) !== null && _c !== void 0 ? _c : 0;\n        return message;\n    }\n};\nfunction createBaseParticipantPermission() {\n    return {\n        canSubscribe: false,\n        canPublish: false,\n        canPublishData: false,\n        canPublishSources: [],\n        hidden: false,\n        recorder: false,\n        canUpdateMetadata: false\n    };\n}\nexports.ParticipantPermission = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.canSubscribe === true) {\n            writer.uint32(8).bool(message.canSubscribe);\n        }\n        if (message.canPublish === true) {\n            writer.uint32(16).bool(message.canPublish);\n        }\n        if (message.canPublishData === true) {\n            writer.uint32(24).bool(message.canPublishData);\n        }\n        writer.uint32(74).fork();\n        for (const v of message.canPublishSources){\n            writer.int32(v);\n        }\n        writer.ldelim();\n        if (message.hidden === true) {\n            writer.uint32(56).bool(message.hidden);\n        }\n        if (message.recorder === true) {\n            writer.uint32(64).bool(message.recorder);\n        }\n        if (message.canUpdateMetadata === true) {\n            writer.uint32(80).bool(message.canUpdateMetadata);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParticipantPermission();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.canSubscribe = reader.bool();\n                    break;\n                case 2:\n                    message.canPublish = reader.bool();\n                    break;\n                case 3:\n                    message.canPublishData = reader.bool();\n                    break;\n                case 9:\n                    if ((tag & 7) === 2) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while(reader.pos < end2){\n                            message.canPublishSources.push(reader.int32());\n                        }\n                    } else {\n                        message.canPublishSources.push(reader.int32());\n                    }\n                    break;\n                case 7:\n                    message.hidden = reader.bool();\n                    break;\n                case 8:\n                    message.recorder = reader.bool();\n                    break;\n                case 10:\n                    message.canUpdateMetadata = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            canSubscribe: isSet(object.canSubscribe) ? Boolean(object.canSubscribe) : false,\n            canPublish: isSet(object.canPublish) ? Boolean(object.canPublish) : false,\n            canPublishData: isSet(object.canPublishData) ? Boolean(object.canPublishData) : false,\n            canPublishSources: Array.isArray(object === null || object === void 0 ? void 0 : object.canPublishSources) ? object.canPublishSources.map((e)=>trackSourceFromJSON(e)) : [],\n            hidden: isSet(object.hidden) ? Boolean(object.hidden) : false,\n            recorder: isSet(object.recorder) ? Boolean(object.recorder) : false,\n            canUpdateMetadata: isSet(object.canUpdateMetadata) ? Boolean(object.canUpdateMetadata) : false\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.canSubscribe !== undefined && (obj.canSubscribe = message.canSubscribe);\n        message.canPublish !== undefined && (obj.canPublish = message.canPublish);\n        message.canPublishData !== undefined && (obj.canPublishData = message.canPublishData);\n        if (message.canPublishSources) {\n            obj.canPublishSources = message.canPublishSources.map((e)=>trackSourceToJSON(e));\n        } else {\n            obj.canPublishSources = [];\n        }\n        message.hidden !== undefined && (obj.hidden = message.hidden);\n        message.recorder !== undefined && (obj.recorder = message.recorder);\n        message.canUpdateMetadata !== undefined && (obj.canUpdateMetadata = message.canUpdateMetadata);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const message = createBaseParticipantPermission();\n        message.canSubscribe = (_a = object.canSubscribe) !== null && _a !== void 0 ? _a : false;\n        message.canPublish = (_b = object.canPublish) !== null && _b !== void 0 ? _b : false;\n        message.canPublishData = (_c = object.canPublishData) !== null && _c !== void 0 ? _c : false;\n        message.canPublishSources = ((_d = object.canPublishSources) === null || _d === void 0 ? void 0 : _d.map((e)=>e)) || [];\n        message.hidden = (_e = object.hidden) !== null && _e !== void 0 ? _e : false;\n        message.recorder = (_f = object.recorder) !== null && _f !== void 0 ? _f : false;\n        message.canUpdateMetadata = (_g = object.canUpdateMetadata) !== null && _g !== void 0 ? _g : false;\n        return message;\n    }\n};\nfunction createBaseParticipantInfo() {\n    return {\n        sid: \"\",\n        identity: \"\",\n        state: 0,\n        tracks: [],\n        metadata: \"\",\n        joinedAt: 0,\n        name: \"\",\n        version: 0,\n        permission: undefined,\n        region: \"\",\n        isPublisher: false\n    };\n}\nexports.ParticipantInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.sid !== \"\") {\n            writer.uint32(10).string(message.sid);\n        }\n        if (message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        if (message.state !== 0) {\n            writer.uint32(24).int32(message.state);\n        }\n        for (const v of message.tracks){\n            exports.TrackInfo.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.metadata !== \"\") {\n            writer.uint32(42).string(message.metadata);\n        }\n        if (message.joinedAt !== 0) {\n            writer.uint32(48).int64(message.joinedAt);\n        }\n        if (message.name !== \"\") {\n            writer.uint32(74).string(message.name);\n        }\n        if (message.version !== 0) {\n            writer.uint32(80).uint32(message.version);\n        }\n        if (message.permission !== undefined) {\n            exports.ParticipantPermission.encode(message.permission, writer.uint32(90).fork()).ldelim();\n        }\n        if (message.region !== \"\") {\n            writer.uint32(98).string(message.region);\n        }\n        if (message.isPublisher === true) {\n            writer.uint32(104).bool(message.isPublisher);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParticipantInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.sid = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                case 3:\n                    message.state = reader.int32();\n                    break;\n                case 4:\n                    message.tracks.push(exports.TrackInfo.decode(reader, reader.uint32()));\n                    break;\n                case 5:\n                    message.metadata = reader.string();\n                    break;\n                case 6:\n                    message.joinedAt = longToNumber(reader.int64());\n                    break;\n                case 9:\n                    message.name = reader.string();\n                    break;\n                case 10:\n                    message.version = reader.uint32();\n                    break;\n                case 11:\n                    message.permission = exports.ParticipantPermission.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.region = reader.string();\n                    break;\n                case 13:\n                    message.isPublisher = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            sid: isSet(object.sid) ? String(object.sid) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\",\n            state: isSet(object.state) ? participantInfo_StateFromJSON(object.state) : 0,\n            tracks: Array.isArray(object === null || object === void 0 ? void 0 : object.tracks) ? object.tracks.map((e)=>exports.TrackInfo.fromJSON(e)) : [],\n            metadata: isSet(object.metadata) ? String(object.metadata) : \"\",\n            joinedAt: isSet(object.joinedAt) ? Number(object.joinedAt) : 0,\n            name: isSet(object.name) ? String(object.name) : \"\",\n            version: isSet(object.version) ? Number(object.version) : 0,\n            permission: isSet(object.permission) ? exports.ParticipantPermission.fromJSON(object.permission) : undefined,\n            region: isSet(object.region) ? String(object.region) : \"\",\n            isPublisher: isSet(object.isPublisher) ? Boolean(object.isPublisher) : false\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.sid !== undefined && (obj.sid = message.sid);\n        message.identity !== undefined && (obj.identity = message.identity);\n        message.state !== undefined && (obj.state = participantInfo_StateToJSON(message.state));\n        if (message.tracks) {\n            obj.tracks = message.tracks.map((e)=>e ? exports.TrackInfo.toJSON(e) : undefined);\n        } else {\n            obj.tracks = [];\n        }\n        message.metadata !== undefined && (obj.metadata = message.metadata);\n        message.joinedAt !== undefined && (obj.joinedAt = Math.round(message.joinedAt));\n        message.name !== undefined && (obj.name = message.name);\n        message.version !== undefined && (obj.version = Math.round(message.version));\n        message.permission !== undefined && (obj.permission = message.permission ? exports.ParticipantPermission.toJSON(message.permission) : undefined);\n        message.region !== undefined && (obj.region = message.region);\n        message.isPublisher !== undefined && (obj.isPublisher = message.isPublisher);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        const message = createBaseParticipantInfo();\n        message.sid = (_a = object.sid) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        message.state = (_c = object.state) !== null && _c !== void 0 ? _c : 0;\n        message.tracks = ((_d = object.tracks) === null || _d === void 0 ? void 0 : _d.map((e)=>exports.TrackInfo.fromPartial(e))) || [];\n        message.metadata = (_e = object.metadata) !== null && _e !== void 0 ? _e : \"\";\n        message.joinedAt = (_f = object.joinedAt) !== null && _f !== void 0 ? _f : 0;\n        message.name = (_g = object.name) !== null && _g !== void 0 ? _g : \"\";\n        message.version = (_h = object.version) !== null && _h !== void 0 ? _h : 0;\n        message.permission = object.permission !== undefined && object.permission !== null ? exports.ParticipantPermission.fromPartial(object.permission) : undefined;\n        message.region = (_j = object.region) !== null && _j !== void 0 ? _j : \"\";\n        message.isPublisher = (_k = object.isPublisher) !== null && _k !== void 0 ? _k : false;\n        return message;\n    }\n};\nfunction createBaseEncryption() {\n    return {};\n}\nexports.Encryption = {\n    encode (_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncryption();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (_) {\n        return {};\n    },\n    toJSON (_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial (_) {\n        const message = createBaseEncryption();\n        return message;\n    }\n};\nfunction createBaseSimulcastCodecInfo() {\n    return {\n        mimeType: \"\",\n        mid: \"\",\n        cid: \"\",\n        layers: []\n    };\n}\nexports.SimulcastCodecInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.mimeType !== \"\") {\n            writer.uint32(10).string(message.mimeType);\n        }\n        if (message.mid !== \"\") {\n            writer.uint32(18).string(message.mid);\n        }\n        if (message.cid !== \"\") {\n            writer.uint32(26).string(message.cid);\n        }\n        for (const v of message.layers){\n            exports.VideoLayer.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSimulcastCodecInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.mimeType = reader.string();\n                    break;\n                case 2:\n                    message.mid = reader.string();\n                    break;\n                case 3:\n                    message.cid = reader.string();\n                    break;\n                case 4:\n                    message.layers.push(exports.VideoLayer.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            mimeType: isSet(object.mimeType) ? String(object.mimeType) : \"\",\n            mid: isSet(object.mid) ? String(object.mid) : \"\",\n            cid: isSet(object.cid) ? String(object.cid) : \"\",\n            layers: Array.isArray(object === null || object === void 0 ? void 0 : object.layers) ? object.layers.map((e)=>exports.VideoLayer.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.mimeType !== undefined && (obj.mimeType = message.mimeType);\n        message.mid !== undefined && (obj.mid = message.mid);\n        message.cid !== undefined && (obj.cid = message.cid);\n        if (message.layers) {\n            obj.layers = message.layers.map((e)=>e ? exports.VideoLayer.toJSON(e) : undefined);\n        } else {\n            obj.layers = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d;\n        const message = createBaseSimulcastCodecInfo();\n        message.mimeType = (_a = object.mimeType) !== null && _a !== void 0 ? _a : \"\";\n        message.mid = (_b = object.mid) !== null && _b !== void 0 ? _b : \"\";\n        message.cid = (_c = object.cid) !== null && _c !== void 0 ? _c : \"\";\n        message.layers = ((_d = object.layers) === null || _d === void 0 ? void 0 : _d.map((e)=>exports.VideoLayer.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseTrackInfo() {\n    return {\n        sid: \"\",\n        type: 0,\n        name: \"\",\n        muted: false,\n        width: 0,\n        height: 0,\n        simulcast: false,\n        disableDtx: false,\n        source: 0,\n        layers: [],\n        mimeType: \"\",\n        mid: \"\",\n        codecs: [],\n        stereo: false,\n        disableRed: false,\n        encryption: 0,\n        stream: \"\"\n    };\n}\nexports.TrackInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.sid !== \"\") {\n            writer.uint32(10).string(message.sid);\n        }\n        if (message.type !== 0) {\n            writer.uint32(16).int32(message.type);\n        }\n        if (message.name !== \"\") {\n            writer.uint32(26).string(message.name);\n        }\n        if (message.muted === true) {\n            writer.uint32(32).bool(message.muted);\n        }\n        if (message.width !== 0) {\n            writer.uint32(40).uint32(message.width);\n        }\n        if (message.height !== 0) {\n            writer.uint32(48).uint32(message.height);\n        }\n        if (message.simulcast === true) {\n            writer.uint32(56).bool(message.simulcast);\n        }\n        if (message.disableDtx === true) {\n            writer.uint32(64).bool(message.disableDtx);\n        }\n        if (message.source !== 0) {\n            writer.uint32(72).int32(message.source);\n        }\n        for (const v of message.layers){\n            exports.VideoLayer.encode(v, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.mimeType !== \"\") {\n            writer.uint32(90).string(message.mimeType);\n        }\n        if (message.mid !== \"\") {\n            writer.uint32(98).string(message.mid);\n        }\n        for (const v of message.codecs){\n            exports.SimulcastCodecInfo.encode(v, writer.uint32(106).fork()).ldelim();\n        }\n        if (message.stereo === true) {\n            writer.uint32(112).bool(message.stereo);\n        }\n        if (message.disableRed === true) {\n            writer.uint32(120).bool(message.disableRed);\n        }\n        if (message.encryption !== 0) {\n            writer.uint32(128).int32(message.encryption);\n        }\n        if (message.stream !== \"\") {\n            writer.uint32(138).string(message.stream);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTrackInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.sid = reader.string();\n                    break;\n                case 2:\n                    message.type = reader.int32();\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.muted = reader.bool();\n                    break;\n                case 5:\n                    message.width = reader.uint32();\n                    break;\n                case 6:\n                    message.height = reader.uint32();\n                    break;\n                case 7:\n                    message.simulcast = reader.bool();\n                    break;\n                case 8:\n                    message.disableDtx = reader.bool();\n                    break;\n                case 9:\n                    message.source = reader.int32();\n                    break;\n                case 10:\n                    message.layers.push(exports.VideoLayer.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    message.mimeType = reader.string();\n                    break;\n                case 12:\n                    message.mid = reader.string();\n                    break;\n                case 13:\n                    message.codecs.push(exports.SimulcastCodecInfo.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.stereo = reader.bool();\n                    break;\n                case 15:\n                    message.disableRed = reader.bool();\n                    break;\n                case 16:\n                    message.encryption = reader.int32();\n                    break;\n                case 17:\n                    message.stream = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            sid: isSet(object.sid) ? String(object.sid) : \"\",\n            type: isSet(object.type) ? trackTypeFromJSON(object.type) : 0,\n            name: isSet(object.name) ? String(object.name) : \"\",\n            muted: isSet(object.muted) ? Boolean(object.muted) : false,\n            width: isSet(object.width) ? Number(object.width) : 0,\n            height: isSet(object.height) ? Number(object.height) : 0,\n            simulcast: isSet(object.simulcast) ? Boolean(object.simulcast) : false,\n            disableDtx: isSet(object.disableDtx) ? Boolean(object.disableDtx) : false,\n            source: isSet(object.source) ? trackSourceFromJSON(object.source) : 0,\n            layers: Array.isArray(object === null || object === void 0 ? void 0 : object.layers) ? object.layers.map((e)=>exports.VideoLayer.fromJSON(e)) : [],\n            mimeType: isSet(object.mimeType) ? String(object.mimeType) : \"\",\n            mid: isSet(object.mid) ? String(object.mid) : \"\",\n            codecs: Array.isArray(object === null || object === void 0 ? void 0 : object.codecs) ? object.codecs.map((e)=>exports.SimulcastCodecInfo.fromJSON(e)) : [],\n            stereo: isSet(object.stereo) ? Boolean(object.stereo) : false,\n            disableRed: isSet(object.disableRed) ? Boolean(object.disableRed) : false,\n            encryption: isSet(object.encryption) ? encryption_TypeFromJSON(object.encryption) : 0,\n            stream: isSet(object.stream) ? String(object.stream) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.sid !== undefined && (obj.sid = message.sid);\n        message.type !== undefined && (obj.type = trackTypeToJSON(message.type));\n        message.name !== undefined && (obj.name = message.name);\n        message.muted !== undefined && (obj.muted = message.muted);\n        message.width !== undefined && (obj.width = Math.round(message.width));\n        message.height !== undefined && (obj.height = Math.round(message.height));\n        message.simulcast !== undefined && (obj.simulcast = message.simulcast);\n        message.disableDtx !== undefined && (obj.disableDtx = message.disableDtx);\n        message.source !== undefined && (obj.source = trackSourceToJSON(message.source));\n        if (message.layers) {\n            obj.layers = message.layers.map((e)=>e ? exports.VideoLayer.toJSON(e) : undefined);\n        } else {\n            obj.layers = [];\n        }\n        message.mimeType !== undefined && (obj.mimeType = message.mimeType);\n        message.mid !== undefined && (obj.mid = message.mid);\n        if (message.codecs) {\n            obj.codecs = message.codecs.map((e)=>e ? exports.SimulcastCodecInfo.toJSON(e) : undefined);\n        } else {\n            obj.codecs = [];\n        }\n        message.stereo !== undefined && (obj.stereo = message.stereo);\n        message.disableRed !== undefined && (obj.disableRed = message.disableRed);\n        message.encryption !== undefined && (obj.encryption = encryption_TypeToJSON(message.encryption));\n        message.stream !== undefined && (obj.stream = message.stream);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;\n        const message = createBaseTrackInfo();\n        message.sid = (_a = object.sid) !== null && _a !== void 0 ? _a : \"\";\n        message.type = (_b = object.type) !== null && _b !== void 0 ? _b : 0;\n        message.name = (_c = object.name) !== null && _c !== void 0 ? _c : \"\";\n        message.muted = (_d = object.muted) !== null && _d !== void 0 ? _d : false;\n        message.width = (_e = object.width) !== null && _e !== void 0 ? _e : 0;\n        message.height = (_f = object.height) !== null && _f !== void 0 ? _f : 0;\n        message.simulcast = (_g = object.simulcast) !== null && _g !== void 0 ? _g : false;\n        message.disableDtx = (_h = object.disableDtx) !== null && _h !== void 0 ? _h : false;\n        message.source = (_j = object.source) !== null && _j !== void 0 ? _j : 0;\n        message.layers = ((_k = object.layers) === null || _k === void 0 ? void 0 : _k.map((e)=>exports.VideoLayer.fromPartial(e))) || [];\n        message.mimeType = (_l = object.mimeType) !== null && _l !== void 0 ? _l : \"\";\n        message.mid = (_m = object.mid) !== null && _m !== void 0 ? _m : \"\";\n        message.codecs = ((_o = object.codecs) === null || _o === void 0 ? void 0 : _o.map((e)=>exports.SimulcastCodecInfo.fromPartial(e))) || [];\n        message.stereo = (_p = object.stereo) !== null && _p !== void 0 ? _p : false;\n        message.disableRed = (_q = object.disableRed) !== null && _q !== void 0 ? _q : false;\n        message.encryption = (_r = object.encryption) !== null && _r !== void 0 ? _r : 0;\n        message.stream = (_s = object.stream) !== null && _s !== void 0 ? _s : \"\";\n        return message;\n    }\n};\nfunction createBaseVideoLayer() {\n    return {\n        quality: 0,\n        width: 0,\n        height: 0,\n        bitrate: 0,\n        ssrc: 0\n    };\n}\nexports.VideoLayer = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.quality !== 0) {\n            writer.uint32(8).int32(message.quality);\n        }\n        if (message.width !== 0) {\n            writer.uint32(16).uint32(message.width);\n        }\n        if (message.height !== 0) {\n            writer.uint32(24).uint32(message.height);\n        }\n        if (message.bitrate !== 0) {\n            writer.uint32(32).uint32(message.bitrate);\n        }\n        if (message.ssrc !== 0) {\n            writer.uint32(40).uint32(message.ssrc);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVideoLayer();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.quality = reader.int32();\n                    break;\n                case 2:\n                    message.width = reader.uint32();\n                    break;\n                case 3:\n                    message.height = reader.uint32();\n                    break;\n                case 4:\n                    message.bitrate = reader.uint32();\n                    break;\n                case 5:\n                    message.ssrc = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            quality: isSet(object.quality) ? videoQualityFromJSON(object.quality) : 0,\n            width: isSet(object.width) ? Number(object.width) : 0,\n            height: isSet(object.height) ? Number(object.height) : 0,\n            bitrate: isSet(object.bitrate) ? Number(object.bitrate) : 0,\n            ssrc: isSet(object.ssrc) ? Number(object.ssrc) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.quality !== undefined && (obj.quality = videoQualityToJSON(message.quality));\n        message.width !== undefined && (obj.width = Math.round(message.width));\n        message.height !== undefined && (obj.height = Math.round(message.height));\n        message.bitrate !== undefined && (obj.bitrate = Math.round(message.bitrate));\n        message.ssrc !== undefined && (obj.ssrc = Math.round(message.ssrc));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e;\n        const message = createBaseVideoLayer();\n        message.quality = (_a = object.quality) !== null && _a !== void 0 ? _a : 0;\n        message.width = (_b = object.width) !== null && _b !== void 0 ? _b : 0;\n        message.height = (_c = object.height) !== null && _c !== void 0 ? _c : 0;\n        message.bitrate = (_d = object.bitrate) !== null && _d !== void 0 ? _d : 0;\n        message.ssrc = (_e = object.ssrc) !== null && _e !== void 0 ? _e : 0;\n        return message;\n    }\n};\nfunction createBaseDataPacket() {\n    return {\n        kind: 0,\n        user: undefined,\n        speaker: undefined\n    };\n}\nexports.DataPacket = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.kind !== 0) {\n            writer.uint32(8).int32(message.kind);\n        }\n        if (message.user !== undefined) {\n            exports.UserPacket.encode(message.user, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.speaker !== undefined) {\n            exports.ActiveSpeakerUpdate.encode(message.speaker, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDataPacket();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.kind = reader.int32();\n                    break;\n                case 2:\n                    message.user = exports.UserPacket.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.speaker = exports.ActiveSpeakerUpdate.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            kind: isSet(object.kind) ? dataPacket_KindFromJSON(object.kind) : 0,\n            user: isSet(object.user) ? exports.UserPacket.fromJSON(object.user) : undefined,\n            speaker: isSet(object.speaker) ? exports.ActiveSpeakerUpdate.fromJSON(object.speaker) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.kind !== undefined && (obj.kind = dataPacket_KindToJSON(message.kind));\n        message.user !== undefined && (obj.user = message.user ? exports.UserPacket.toJSON(message.user) : undefined);\n        message.speaker !== undefined && (obj.speaker = message.speaker ? exports.ActiveSpeakerUpdate.toJSON(message.speaker) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseDataPacket();\n        message.kind = (_a = object.kind) !== null && _a !== void 0 ? _a : 0;\n        message.user = object.user !== undefined && object.user !== null ? exports.UserPacket.fromPartial(object.user) : undefined;\n        message.speaker = object.speaker !== undefined && object.speaker !== null ? exports.ActiveSpeakerUpdate.fromPartial(object.speaker) : undefined;\n        return message;\n    }\n};\nfunction createBaseActiveSpeakerUpdate() {\n    return {\n        speakers: []\n    };\n}\nexports.ActiveSpeakerUpdate = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.speakers){\n            exports.SpeakerInfo.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseActiveSpeakerUpdate();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.speakers.push(exports.SpeakerInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            speakers: Array.isArray(object === null || object === void 0 ? void 0 : object.speakers) ? object.speakers.map((e)=>exports.SpeakerInfo.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.speakers) {\n            obj.speakers = message.speakers.map((e)=>e ? exports.SpeakerInfo.toJSON(e) : undefined);\n        } else {\n            obj.speakers = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseActiveSpeakerUpdate();\n        message.speakers = ((_a = object.speakers) === null || _a === void 0 ? void 0 : _a.map((e)=>exports.SpeakerInfo.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseSpeakerInfo() {\n    return {\n        sid: \"\",\n        level: 0,\n        active: false\n    };\n}\nexports.SpeakerInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.sid !== \"\") {\n            writer.uint32(10).string(message.sid);\n        }\n        if (message.level !== 0) {\n            writer.uint32(21).float(message.level);\n        }\n        if (message.active === true) {\n            writer.uint32(24).bool(message.active);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSpeakerInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.sid = reader.string();\n                    break;\n                case 2:\n                    message.level = reader.float();\n                    break;\n                case 3:\n                    message.active = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            sid: isSet(object.sid) ? String(object.sid) : \"\",\n            level: isSet(object.level) ? Number(object.level) : 0,\n            active: isSet(object.active) ? Boolean(object.active) : false\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.sid !== undefined && (obj.sid = message.sid);\n        message.level !== undefined && (obj.level = message.level);\n        message.active !== undefined && (obj.active = message.active);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseSpeakerInfo();\n        message.sid = (_a = object.sid) !== null && _a !== void 0 ? _a : \"\";\n        message.level = (_b = object.level) !== null && _b !== void 0 ? _b : 0;\n        message.active = (_c = object.active) !== null && _c !== void 0 ? _c : false;\n        return message;\n    }\n};\nfunction createBaseUserPacket() {\n    return {\n        participantSid: \"\",\n        participantIdentity: \"\",\n        payload: new Uint8Array(),\n        destinationSids: [],\n        destinationIdentities: [],\n        topic: undefined\n    };\n}\nexports.UserPacket = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.participantSid !== \"\") {\n            writer.uint32(10).string(message.participantSid);\n        }\n        if (message.participantIdentity !== \"\") {\n            writer.uint32(42).string(message.participantIdentity);\n        }\n        if (message.payload.length !== 0) {\n            writer.uint32(18).bytes(message.payload);\n        }\n        for (const v of message.destinationSids){\n            writer.uint32(26).string(v);\n        }\n        for (const v of message.destinationIdentities){\n            writer.uint32(50).string(v);\n        }\n        if (message.topic !== undefined) {\n            writer.uint32(34).string(message.topic);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUserPacket();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.participantSid = reader.string();\n                    break;\n                case 5:\n                    message.participantIdentity = reader.string();\n                    break;\n                case 2:\n                    message.payload = reader.bytes();\n                    break;\n                case 3:\n                    message.destinationSids.push(reader.string());\n                    break;\n                case 6:\n                    message.destinationIdentities.push(reader.string());\n                    break;\n                case 4:\n                    message.topic = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            participantSid: isSet(object.participantSid) ? String(object.participantSid) : \"\",\n            participantIdentity: isSet(object.participantIdentity) ? String(object.participantIdentity) : \"\",\n            payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(),\n            destinationSids: Array.isArray(object === null || object === void 0 ? void 0 : object.destinationSids) ? object.destinationSids.map((e)=>String(e)) : [],\n            destinationIdentities: Array.isArray(object === null || object === void 0 ? void 0 : object.destinationIdentities) ? object.destinationIdentities.map((e)=>String(e)) : [],\n            topic: isSet(object.topic) ? String(object.topic) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.participantSid !== undefined && (obj.participantSid = message.participantSid);\n        message.participantIdentity !== undefined && (obj.participantIdentity = message.participantIdentity);\n        message.payload !== undefined && (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));\n        if (message.destinationSids) {\n            obj.destinationSids = message.destinationSids.map((e)=>e);\n        } else {\n            obj.destinationSids = [];\n        }\n        if (message.destinationIdentities) {\n            obj.destinationIdentities = message.destinationIdentities.map((e)=>e);\n        } else {\n            obj.destinationIdentities = [];\n        }\n        message.topic !== undefined && (obj.topic = message.topic);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseUserPacket();\n        message.participantSid = (_a = object.participantSid) !== null && _a !== void 0 ? _a : \"\";\n        message.participantIdentity = (_b = object.participantIdentity) !== null && _b !== void 0 ? _b : \"\";\n        message.payload = (_c = object.payload) !== null && _c !== void 0 ? _c : new Uint8Array();\n        message.destinationSids = ((_d = object.destinationSids) === null || _d === void 0 ? void 0 : _d.map((e)=>e)) || [];\n        message.destinationIdentities = ((_e = object.destinationIdentities) === null || _e === void 0 ? void 0 : _e.map((e)=>e)) || [];\n        message.topic = (_f = object.topic) !== null && _f !== void 0 ? _f : undefined;\n        return message;\n    }\n};\nfunction createBaseParticipantTracks() {\n    return {\n        participantSid: \"\",\n        trackSids: []\n    };\n}\nexports.ParticipantTracks = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.participantSid !== \"\") {\n            writer.uint32(10).string(message.participantSid);\n        }\n        for (const v of message.trackSids){\n            writer.uint32(18).string(v);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParticipantTracks();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.participantSid = reader.string();\n                    break;\n                case 2:\n                    message.trackSids.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            participantSid: isSet(object.participantSid) ? String(object.participantSid) : \"\",\n            trackSids: Array.isArray(object === null || object === void 0 ? void 0 : object.trackSids) ? object.trackSids.map((e)=>String(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.participantSid !== undefined && (obj.participantSid = message.participantSid);\n        if (message.trackSids) {\n            obj.trackSids = message.trackSids.map((e)=>e);\n        } else {\n            obj.trackSids = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseParticipantTracks();\n        message.participantSid = (_a = object.participantSid) !== null && _a !== void 0 ? _a : \"\";\n        message.trackSids = ((_b = object.trackSids) === null || _b === void 0 ? void 0 : _b.map((e)=>e)) || [];\n        return message;\n    }\n};\nfunction createBaseServerInfo() {\n    return {\n        edition: 0,\n        version: \"\",\n        protocol: 0,\n        region: \"\",\n        nodeId: \"\",\n        debugInfo: \"\"\n    };\n}\nexports.ServerInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.edition !== 0) {\n            writer.uint32(8).int32(message.edition);\n        }\n        if (message.version !== \"\") {\n            writer.uint32(18).string(message.version);\n        }\n        if (message.protocol !== 0) {\n            writer.uint32(24).int32(message.protocol);\n        }\n        if (message.region !== \"\") {\n            writer.uint32(34).string(message.region);\n        }\n        if (message.nodeId !== \"\") {\n            writer.uint32(42).string(message.nodeId);\n        }\n        if (message.debugInfo !== \"\") {\n            writer.uint32(50).string(message.debugInfo);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseServerInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.edition = reader.int32();\n                    break;\n                case 2:\n                    message.version = reader.string();\n                    break;\n                case 3:\n                    message.protocol = reader.int32();\n                    break;\n                case 4:\n                    message.region = reader.string();\n                    break;\n                case 5:\n                    message.nodeId = reader.string();\n                    break;\n                case 6:\n                    message.debugInfo = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            edition: isSet(object.edition) ? serverInfo_EditionFromJSON(object.edition) : 0,\n            version: isSet(object.version) ? String(object.version) : \"\",\n            protocol: isSet(object.protocol) ? Number(object.protocol) : 0,\n            region: isSet(object.region) ? String(object.region) : \"\",\n            nodeId: isSet(object.nodeId) ? String(object.nodeId) : \"\",\n            debugInfo: isSet(object.debugInfo) ? String(object.debugInfo) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.edition !== undefined && (obj.edition = serverInfo_EditionToJSON(message.edition));\n        message.version !== undefined && (obj.version = message.version);\n        message.protocol !== undefined && (obj.protocol = Math.round(message.protocol));\n        message.region !== undefined && (obj.region = message.region);\n        message.nodeId !== undefined && (obj.nodeId = message.nodeId);\n        message.debugInfo !== undefined && (obj.debugInfo = message.debugInfo);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseServerInfo();\n        message.edition = (_a = object.edition) !== null && _a !== void 0 ? _a : 0;\n        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : \"\";\n        message.protocol = (_c = object.protocol) !== null && _c !== void 0 ? _c : 0;\n        message.region = (_d = object.region) !== null && _d !== void 0 ? _d : \"\";\n        message.nodeId = (_e = object.nodeId) !== null && _e !== void 0 ? _e : \"\";\n        message.debugInfo = (_f = object.debugInfo) !== null && _f !== void 0 ? _f : \"\";\n        return message;\n    }\n};\nfunction createBaseClientInfo() {\n    return {\n        sdk: 0,\n        version: \"\",\n        protocol: 0,\n        os: \"\",\n        osVersion: \"\",\n        deviceModel: \"\",\n        browser: \"\",\n        browserVersion: \"\",\n        address: \"\",\n        network: \"\"\n    };\n}\nexports.ClientInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.sdk !== 0) {\n            writer.uint32(8).int32(message.sdk);\n        }\n        if (message.version !== \"\") {\n            writer.uint32(18).string(message.version);\n        }\n        if (message.protocol !== 0) {\n            writer.uint32(24).int32(message.protocol);\n        }\n        if (message.os !== \"\") {\n            writer.uint32(34).string(message.os);\n        }\n        if (message.osVersion !== \"\") {\n            writer.uint32(42).string(message.osVersion);\n        }\n        if (message.deviceModel !== \"\") {\n            writer.uint32(50).string(message.deviceModel);\n        }\n        if (message.browser !== \"\") {\n            writer.uint32(58).string(message.browser);\n        }\n        if (message.browserVersion !== \"\") {\n            writer.uint32(66).string(message.browserVersion);\n        }\n        if (message.address !== \"\") {\n            writer.uint32(74).string(message.address);\n        }\n        if (message.network !== \"\") {\n            writer.uint32(82).string(message.network);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseClientInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.sdk = reader.int32();\n                    break;\n                case 2:\n                    message.version = reader.string();\n                    break;\n                case 3:\n                    message.protocol = reader.int32();\n                    break;\n                case 4:\n                    message.os = reader.string();\n                    break;\n                case 5:\n                    message.osVersion = reader.string();\n                    break;\n                case 6:\n                    message.deviceModel = reader.string();\n                    break;\n                case 7:\n                    message.browser = reader.string();\n                    break;\n                case 8:\n                    message.browserVersion = reader.string();\n                    break;\n                case 9:\n                    message.address = reader.string();\n                    break;\n                case 10:\n                    message.network = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            sdk: isSet(object.sdk) ? clientInfo_SDKFromJSON(object.sdk) : 0,\n            version: isSet(object.version) ? String(object.version) : \"\",\n            protocol: isSet(object.protocol) ? Number(object.protocol) : 0,\n            os: isSet(object.os) ? String(object.os) : \"\",\n            osVersion: isSet(object.osVersion) ? String(object.osVersion) : \"\",\n            deviceModel: isSet(object.deviceModel) ? String(object.deviceModel) : \"\",\n            browser: isSet(object.browser) ? String(object.browser) : \"\",\n            browserVersion: isSet(object.browserVersion) ? String(object.browserVersion) : \"\",\n            address: isSet(object.address) ? String(object.address) : \"\",\n            network: isSet(object.network) ? String(object.network) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.sdk !== undefined && (obj.sdk = clientInfo_SDKToJSON(message.sdk));\n        message.version !== undefined && (obj.version = message.version);\n        message.protocol !== undefined && (obj.protocol = Math.round(message.protocol));\n        message.os !== undefined && (obj.os = message.os);\n        message.osVersion !== undefined && (obj.osVersion = message.osVersion);\n        message.deviceModel !== undefined && (obj.deviceModel = message.deviceModel);\n        message.browser !== undefined && (obj.browser = message.browser);\n        message.browserVersion !== undefined && (obj.browserVersion = message.browserVersion);\n        message.address !== undefined && (obj.address = message.address);\n        message.network !== undefined && (obj.network = message.network);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        const message = createBaseClientInfo();\n        message.sdk = (_a = object.sdk) !== null && _a !== void 0 ? _a : 0;\n        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : \"\";\n        message.protocol = (_c = object.protocol) !== null && _c !== void 0 ? _c : 0;\n        message.os = (_d = object.os) !== null && _d !== void 0 ? _d : \"\";\n        message.osVersion = (_e = object.osVersion) !== null && _e !== void 0 ? _e : \"\";\n        message.deviceModel = (_f = object.deviceModel) !== null && _f !== void 0 ? _f : \"\";\n        message.browser = (_g = object.browser) !== null && _g !== void 0 ? _g : \"\";\n        message.browserVersion = (_h = object.browserVersion) !== null && _h !== void 0 ? _h : \"\";\n        message.address = (_j = object.address) !== null && _j !== void 0 ? _j : \"\";\n        message.network = (_k = object.network) !== null && _k !== void 0 ? _k : \"\";\n        return message;\n    }\n};\nfunction createBaseClientConfiguration() {\n    return {\n        video: undefined,\n        screen: undefined,\n        resumeConnection: 0,\n        disabledCodecs: undefined,\n        forceRelay: 0\n    };\n}\nexports.ClientConfiguration = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.video !== undefined) {\n            exports.VideoConfiguration.encode(message.video, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.screen !== undefined) {\n            exports.VideoConfiguration.encode(message.screen, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.resumeConnection !== 0) {\n            writer.uint32(24).int32(message.resumeConnection);\n        }\n        if (message.disabledCodecs !== undefined) {\n            exports.DisabledCodecs.encode(message.disabledCodecs, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.forceRelay !== 0) {\n            writer.uint32(40).int32(message.forceRelay);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseClientConfiguration();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.video = exports.VideoConfiguration.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.screen = exports.VideoConfiguration.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.resumeConnection = reader.int32();\n                    break;\n                case 4:\n                    message.disabledCodecs = exports.DisabledCodecs.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.forceRelay = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            video: isSet(object.video) ? exports.VideoConfiguration.fromJSON(object.video) : undefined,\n            screen: isSet(object.screen) ? exports.VideoConfiguration.fromJSON(object.screen) : undefined,\n            resumeConnection: isSet(object.resumeConnection) ? clientConfigSettingFromJSON(object.resumeConnection) : 0,\n            disabledCodecs: isSet(object.disabledCodecs) ? exports.DisabledCodecs.fromJSON(object.disabledCodecs) : undefined,\n            forceRelay: isSet(object.forceRelay) ? clientConfigSettingFromJSON(object.forceRelay) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.video !== undefined && (obj.video = message.video ? exports.VideoConfiguration.toJSON(message.video) : undefined);\n        message.screen !== undefined && (obj.screen = message.screen ? exports.VideoConfiguration.toJSON(message.screen) : undefined);\n        message.resumeConnection !== undefined && (obj.resumeConnection = clientConfigSettingToJSON(message.resumeConnection));\n        message.disabledCodecs !== undefined && (obj.disabledCodecs = message.disabledCodecs ? exports.DisabledCodecs.toJSON(message.disabledCodecs) : undefined);\n        message.forceRelay !== undefined && (obj.forceRelay = clientConfigSettingToJSON(message.forceRelay));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseClientConfiguration();\n        message.video = object.video !== undefined && object.video !== null ? exports.VideoConfiguration.fromPartial(object.video) : undefined;\n        message.screen = object.screen !== undefined && object.screen !== null ? exports.VideoConfiguration.fromPartial(object.screen) : undefined;\n        message.resumeConnection = (_a = object.resumeConnection) !== null && _a !== void 0 ? _a : 0;\n        message.disabledCodecs = object.disabledCodecs !== undefined && object.disabledCodecs !== null ? exports.DisabledCodecs.fromPartial(object.disabledCodecs) : undefined;\n        message.forceRelay = (_b = object.forceRelay) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    }\n};\nfunction createBaseVideoConfiguration() {\n    return {\n        hardwareEncoder: 0\n    };\n}\nexports.VideoConfiguration = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.hardwareEncoder !== 0) {\n            writer.uint32(8).int32(message.hardwareEncoder);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVideoConfiguration();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.hardwareEncoder = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            hardwareEncoder: isSet(object.hardwareEncoder) ? clientConfigSettingFromJSON(object.hardwareEncoder) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.hardwareEncoder !== undefined && (obj.hardwareEncoder = clientConfigSettingToJSON(message.hardwareEncoder));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseVideoConfiguration();\n        message.hardwareEncoder = (_a = object.hardwareEncoder) !== null && _a !== void 0 ? _a : 0;\n        return message;\n    }\n};\nfunction createBaseDisabledCodecs() {\n    return {\n        codecs: [],\n        publish: []\n    };\n}\nexports.DisabledCodecs = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.codecs){\n            exports.Codec.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.publish){\n            exports.Codec.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDisabledCodecs();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.codecs.push(exports.Codec.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.publish.push(exports.Codec.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            codecs: Array.isArray(object === null || object === void 0 ? void 0 : object.codecs) ? object.codecs.map((e)=>exports.Codec.fromJSON(e)) : [],\n            publish: Array.isArray(object === null || object === void 0 ? void 0 : object.publish) ? object.publish.map((e)=>exports.Codec.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.codecs) {\n            obj.codecs = message.codecs.map((e)=>e ? exports.Codec.toJSON(e) : undefined);\n        } else {\n            obj.codecs = [];\n        }\n        if (message.publish) {\n            obj.publish = message.publish.map((e)=>e ? exports.Codec.toJSON(e) : undefined);\n        } else {\n            obj.publish = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseDisabledCodecs();\n        message.codecs = ((_a = object.codecs) === null || _a === void 0 ? void 0 : _a.map((e)=>exports.Codec.fromPartial(e))) || [];\n        message.publish = ((_b = object.publish) === null || _b === void 0 ? void 0 : _b.map((e)=>exports.Codec.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseRTPDrift() {\n    return {\n        startTime: undefined,\n        endTime: undefined,\n        duration: 0,\n        startTimestamp: 0,\n        endTimestamp: 0,\n        rtpClockTicks: 0,\n        driftSamples: 0,\n        driftMs: 0,\n        clockRate: 0\n    };\n}\nexports.RTPDrift = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.startTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.startTime), writer.uint32(10).fork()).ldelim();\n        }\n        if (message.endTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).ldelim();\n        }\n        if (message.duration !== 0) {\n            writer.uint32(25).double(message.duration);\n        }\n        if (message.startTimestamp !== 0) {\n            writer.uint32(32).uint64(message.startTimestamp);\n        }\n        if (message.endTimestamp !== 0) {\n            writer.uint32(40).uint64(message.endTimestamp);\n        }\n        if (message.rtpClockTicks !== 0) {\n            writer.uint32(48).uint64(message.rtpClockTicks);\n        }\n        if (message.driftSamples !== 0) {\n            writer.uint32(56).int64(message.driftSamples);\n        }\n        if (message.driftMs !== 0) {\n            writer.uint32(65).double(message.driftMs);\n        }\n        if (message.clockRate !== 0) {\n            writer.uint32(73).double(message.clockRate);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRTPDrift();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.startTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.endTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.duration = reader.double();\n                    break;\n                case 4:\n                    message.startTimestamp = longToNumber(reader.uint64());\n                    break;\n                case 5:\n                    message.endTimestamp = longToNumber(reader.uint64());\n                    break;\n                case 6:\n                    message.rtpClockTicks = longToNumber(reader.uint64());\n                    break;\n                case 7:\n                    message.driftSamples = longToNumber(reader.int64());\n                    break;\n                case 8:\n                    message.driftMs = reader.double();\n                    break;\n                case 9:\n                    message.clockRate = reader.double();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,\n            endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,\n            duration: isSet(object.duration) ? Number(object.duration) : 0,\n            startTimestamp: isSet(object.startTimestamp) ? Number(object.startTimestamp) : 0,\n            endTimestamp: isSet(object.endTimestamp) ? Number(object.endTimestamp) : 0,\n            rtpClockTicks: isSet(object.rtpClockTicks) ? Number(object.rtpClockTicks) : 0,\n            driftSamples: isSet(object.driftSamples) ? Number(object.driftSamples) : 0,\n            driftMs: isSet(object.driftMs) ? Number(object.driftMs) : 0,\n            clockRate: isSet(object.clockRate) ? Number(object.clockRate) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.startTime !== undefined && (obj.startTime = message.startTime.toISOString());\n        message.endTime !== undefined && (obj.endTime = message.endTime.toISOString());\n        message.duration !== undefined && (obj.duration = message.duration);\n        message.startTimestamp !== undefined && (obj.startTimestamp = Math.round(message.startTimestamp));\n        message.endTimestamp !== undefined && (obj.endTimestamp = Math.round(message.endTimestamp));\n        message.rtpClockTicks !== undefined && (obj.rtpClockTicks = Math.round(message.rtpClockTicks));\n        message.driftSamples !== undefined && (obj.driftSamples = Math.round(message.driftSamples));\n        message.driftMs !== undefined && (obj.driftMs = message.driftMs);\n        message.clockRate !== undefined && (obj.clockRate = message.clockRate);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const message = createBaseRTPDrift();\n        message.startTime = (_a = object.startTime) !== null && _a !== void 0 ? _a : undefined;\n        message.endTime = (_b = object.endTime) !== null && _b !== void 0 ? _b : undefined;\n        message.duration = (_c = object.duration) !== null && _c !== void 0 ? _c : 0;\n        message.startTimestamp = (_d = object.startTimestamp) !== null && _d !== void 0 ? _d : 0;\n        message.endTimestamp = (_e = object.endTimestamp) !== null && _e !== void 0 ? _e : 0;\n        message.rtpClockTicks = (_f = object.rtpClockTicks) !== null && _f !== void 0 ? _f : 0;\n        message.driftSamples = (_g = object.driftSamples) !== null && _g !== void 0 ? _g : 0;\n        message.driftMs = (_h = object.driftMs) !== null && _h !== void 0 ? _h : 0;\n        message.clockRate = (_j = object.clockRate) !== null && _j !== void 0 ? _j : 0;\n        return message;\n    }\n};\nfunction createBaseRTPStats() {\n    return {\n        startTime: undefined,\n        endTime: undefined,\n        duration: 0,\n        packets: 0,\n        packetRate: 0,\n        bytes: 0,\n        headerBytes: 0,\n        bitrate: 0,\n        packetsLost: 0,\n        packetLossRate: 0,\n        packetLossPercentage: 0,\n        packetsDuplicate: 0,\n        packetDuplicateRate: 0,\n        bytesDuplicate: 0,\n        headerBytesDuplicate: 0,\n        bitrateDuplicate: 0,\n        packetsPadding: 0,\n        packetPaddingRate: 0,\n        bytesPadding: 0,\n        headerBytesPadding: 0,\n        bitratePadding: 0,\n        packetsOutOfOrder: 0,\n        frames: 0,\n        frameRate: 0,\n        jitterCurrent: 0,\n        jitterMax: 0,\n        gapHistogram: {},\n        nacks: 0,\n        nackAcks: 0,\n        nackMisses: 0,\n        nackRepeated: 0,\n        plis: 0,\n        lastPli: undefined,\n        firs: 0,\n        lastFir: undefined,\n        rttCurrent: 0,\n        rttMax: 0,\n        keyFrames: 0,\n        lastKeyFrame: undefined,\n        layerLockPlis: 0,\n        lastLayerLockPli: undefined,\n        packetDrift: undefined,\n        reportDrift: undefined\n    };\n}\nexports.RTPStats = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.startTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.startTime), writer.uint32(10).fork()).ldelim();\n        }\n        if (message.endTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).ldelim();\n        }\n        if (message.duration !== 0) {\n            writer.uint32(25).double(message.duration);\n        }\n        if (message.packets !== 0) {\n            writer.uint32(32).uint32(message.packets);\n        }\n        if (message.packetRate !== 0) {\n            writer.uint32(41).double(message.packetRate);\n        }\n        if (message.bytes !== 0) {\n            writer.uint32(48).uint64(message.bytes);\n        }\n        if (message.headerBytes !== 0) {\n            writer.uint32(312).uint64(message.headerBytes);\n        }\n        if (message.bitrate !== 0) {\n            writer.uint32(57).double(message.bitrate);\n        }\n        if (message.packetsLost !== 0) {\n            writer.uint32(64).uint32(message.packetsLost);\n        }\n        if (message.packetLossRate !== 0) {\n            writer.uint32(73).double(message.packetLossRate);\n        }\n        if (message.packetLossPercentage !== 0) {\n            writer.uint32(85).float(message.packetLossPercentage);\n        }\n        if (message.packetsDuplicate !== 0) {\n            writer.uint32(88).uint32(message.packetsDuplicate);\n        }\n        if (message.packetDuplicateRate !== 0) {\n            writer.uint32(97).double(message.packetDuplicateRate);\n        }\n        if (message.bytesDuplicate !== 0) {\n            writer.uint32(104).uint64(message.bytesDuplicate);\n        }\n        if (message.headerBytesDuplicate !== 0) {\n            writer.uint32(320).uint64(message.headerBytesDuplicate);\n        }\n        if (message.bitrateDuplicate !== 0) {\n            writer.uint32(113).double(message.bitrateDuplicate);\n        }\n        if (message.packetsPadding !== 0) {\n            writer.uint32(120).uint32(message.packetsPadding);\n        }\n        if (message.packetPaddingRate !== 0) {\n            writer.uint32(129).double(message.packetPaddingRate);\n        }\n        if (message.bytesPadding !== 0) {\n            writer.uint32(136).uint64(message.bytesPadding);\n        }\n        if (message.headerBytesPadding !== 0) {\n            writer.uint32(328).uint64(message.headerBytesPadding);\n        }\n        if (message.bitratePadding !== 0) {\n            writer.uint32(145).double(message.bitratePadding);\n        }\n        if (message.packetsOutOfOrder !== 0) {\n            writer.uint32(152).uint32(message.packetsOutOfOrder);\n        }\n        if (message.frames !== 0) {\n            writer.uint32(160).uint32(message.frames);\n        }\n        if (message.frameRate !== 0) {\n            writer.uint32(169).double(message.frameRate);\n        }\n        if (message.jitterCurrent !== 0) {\n            writer.uint32(177).double(message.jitterCurrent);\n        }\n        if (message.jitterMax !== 0) {\n            writer.uint32(185).double(message.jitterMax);\n        }\n        Object.entries(message.gapHistogram).forEach(([key, value])=>{\n            exports.RTPStats_GapHistogramEntry.encode({\n                key: key,\n                value\n            }, writer.uint32(194).fork()).ldelim();\n        });\n        if (message.nacks !== 0) {\n            writer.uint32(200).uint32(message.nacks);\n        }\n        if (message.nackAcks !== 0) {\n            writer.uint32(296).uint32(message.nackAcks);\n        }\n        if (message.nackMisses !== 0) {\n            writer.uint32(208).uint32(message.nackMisses);\n        }\n        if (message.nackRepeated !== 0) {\n            writer.uint32(304).uint32(message.nackRepeated);\n        }\n        if (message.plis !== 0) {\n            writer.uint32(216).uint32(message.plis);\n        }\n        if (message.lastPli !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.lastPli), writer.uint32(226).fork()).ldelim();\n        }\n        if (message.firs !== 0) {\n            writer.uint32(232).uint32(message.firs);\n        }\n        if (message.lastFir !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.lastFir), writer.uint32(242).fork()).ldelim();\n        }\n        if (message.rttCurrent !== 0) {\n            writer.uint32(248).uint32(message.rttCurrent);\n        }\n        if (message.rttMax !== 0) {\n            writer.uint32(256).uint32(message.rttMax);\n        }\n        if (message.keyFrames !== 0) {\n            writer.uint32(264).uint32(message.keyFrames);\n        }\n        if (message.lastKeyFrame !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.lastKeyFrame), writer.uint32(274).fork()).ldelim();\n        }\n        if (message.layerLockPlis !== 0) {\n            writer.uint32(280).uint32(message.layerLockPlis);\n        }\n        if (message.lastLayerLockPli !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.lastLayerLockPli), writer.uint32(290).fork()).ldelim();\n        }\n        if (message.packetDrift !== undefined) {\n            exports.RTPDrift.encode(message.packetDrift, writer.uint32(354).fork()).ldelim();\n        }\n        if (message.reportDrift !== undefined) {\n            exports.RTPDrift.encode(message.reportDrift, writer.uint32(362).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRTPStats();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.startTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.endTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.duration = reader.double();\n                    break;\n                case 4:\n                    message.packets = reader.uint32();\n                    break;\n                case 5:\n                    message.packetRate = reader.double();\n                    break;\n                case 6:\n                    message.bytes = longToNumber(reader.uint64());\n                    break;\n                case 39:\n                    message.headerBytes = longToNumber(reader.uint64());\n                    break;\n                case 7:\n                    message.bitrate = reader.double();\n                    break;\n                case 8:\n                    message.packetsLost = reader.uint32();\n                    break;\n                case 9:\n                    message.packetLossRate = reader.double();\n                    break;\n                case 10:\n                    message.packetLossPercentage = reader.float();\n                    break;\n                case 11:\n                    message.packetsDuplicate = reader.uint32();\n                    break;\n                case 12:\n                    message.packetDuplicateRate = reader.double();\n                    break;\n                case 13:\n                    message.bytesDuplicate = longToNumber(reader.uint64());\n                    break;\n                case 40:\n                    message.headerBytesDuplicate = longToNumber(reader.uint64());\n                    break;\n                case 14:\n                    message.bitrateDuplicate = reader.double();\n                    break;\n                case 15:\n                    message.packetsPadding = reader.uint32();\n                    break;\n                case 16:\n                    message.packetPaddingRate = reader.double();\n                    break;\n                case 17:\n                    message.bytesPadding = longToNumber(reader.uint64());\n                    break;\n                case 41:\n                    message.headerBytesPadding = longToNumber(reader.uint64());\n                    break;\n                case 18:\n                    message.bitratePadding = reader.double();\n                    break;\n                case 19:\n                    message.packetsOutOfOrder = reader.uint32();\n                    break;\n                case 20:\n                    message.frames = reader.uint32();\n                    break;\n                case 21:\n                    message.frameRate = reader.double();\n                    break;\n                case 22:\n                    message.jitterCurrent = reader.double();\n                    break;\n                case 23:\n                    message.jitterMax = reader.double();\n                    break;\n                case 24:\n                    const entry24 = exports.RTPStats_GapHistogramEntry.decode(reader, reader.uint32());\n                    if (entry24.value !== undefined) {\n                        message.gapHistogram[entry24.key] = entry24.value;\n                    }\n                    break;\n                case 25:\n                    message.nacks = reader.uint32();\n                    break;\n                case 37:\n                    message.nackAcks = reader.uint32();\n                    break;\n                case 26:\n                    message.nackMisses = reader.uint32();\n                    break;\n                case 38:\n                    message.nackRepeated = reader.uint32();\n                    break;\n                case 27:\n                    message.plis = reader.uint32();\n                    break;\n                case 28:\n                    message.lastPli = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 29:\n                    message.firs = reader.uint32();\n                    break;\n                case 30:\n                    message.lastFir = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 31:\n                    message.rttCurrent = reader.uint32();\n                    break;\n                case 32:\n                    message.rttMax = reader.uint32();\n                    break;\n                case 33:\n                    message.keyFrames = reader.uint32();\n                    break;\n                case 34:\n                    message.lastKeyFrame = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 35:\n                    message.layerLockPlis = reader.uint32();\n                    break;\n                case 36:\n                    message.lastLayerLockPli = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 44:\n                    message.packetDrift = exports.RTPDrift.decode(reader, reader.uint32());\n                    break;\n                case 45:\n                    message.reportDrift = exports.RTPDrift.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,\n            endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,\n            duration: isSet(object.duration) ? Number(object.duration) : 0,\n            packets: isSet(object.packets) ? Number(object.packets) : 0,\n            packetRate: isSet(object.packetRate) ? Number(object.packetRate) : 0,\n            bytes: isSet(object.bytes) ? Number(object.bytes) : 0,\n            headerBytes: isSet(object.headerBytes) ? Number(object.headerBytes) : 0,\n            bitrate: isSet(object.bitrate) ? Number(object.bitrate) : 0,\n            packetsLost: isSet(object.packetsLost) ? Number(object.packetsLost) : 0,\n            packetLossRate: isSet(object.packetLossRate) ? Number(object.packetLossRate) : 0,\n            packetLossPercentage: isSet(object.packetLossPercentage) ? Number(object.packetLossPercentage) : 0,\n            packetsDuplicate: isSet(object.packetsDuplicate) ? Number(object.packetsDuplicate) : 0,\n            packetDuplicateRate: isSet(object.packetDuplicateRate) ? Number(object.packetDuplicateRate) : 0,\n            bytesDuplicate: isSet(object.bytesDuplicate) ? Number(object.bytesDuplicate) : 0,\n            headerBytesDuplicate: isSet(object.headerBytesDuplicate) ? Number(object.headerBytesDuplicate) : 0,\n            bitrateDuplicate: isSet(object.bitrateDuplicate) ? Number(object.bitrateDuplicate) : 0,\n            packetsPadding: isSet(object.packetsPadding) ? Number(object.packetsPadding) : 0,\n            packetPaddingRate: isSet(object.packetPaddingRate) ? Number(object.packetPaddingRate) : 0,\n            bytesPadding: isSet(object.bytesPadding) ? Number(object.bytesPadding) : 0,\n            headerBytesPadding: isSet(object.headerBytesPadding) ? Number(object.headerBytesPadding) : 0,\n            bitratePadding: isSet(object.bitratePadding) ? Number(object.bitratePadding) : 0,\n            packetsOutOfOrder: isSet(object.packetsOutOfOrder) ? Number(object.packetsOutOfOrder) : 0,\n            frames: isSet(object.frames) ? Number(object.frames) : 0,\n            frameRate: isSet(object.frameRate) ? Number(object.frameRate) : 0,\n            jitterCurrent: isSet(object.jitterCurrent) ? Number(object.jitterCurrent) : 0,\n            jitterMax: isSet(object.jitterMax) ? Number(object.jitterMax) : 0,\n            gapHistogram: isObject(object.gapHistogram) ? Object.entries(object.gapHistogram).reduce((acc, [key, value])=>{\n                acc[Number(key)] = Number(value);\n                return acc;\n            }, {}) : {},\n            nacks: isSet(object.nacks) ? Number(object.nacks) : 0,\n            nackAcks: isSet(object.nackAcks) ? Number(object.nackAcks) : 0,\n            nackMisses: isSet(object.nackMisses) ? Number(object.nackMisses) : 0,\n            nackRepeated: isSet(object.nackRepeated) ? Number(object.nackRepeated) : 0,\n            plis: isSet(object.plis) ? Number(object.plis) : 0,\n            lastPli: isSet(object.lastPli) ? fromJsonTimestamp(object.lastPli) : undefined,\n            firs: isSet(object.firs) ? Number(object.firs) : 0,\n            lastFir: isSet(object.lastFir) ? fromJsonTimestamp(object.lastFir) : undefined,\n            rttCurrent: isSet(object.rttCurrent) ? Number(object.rttCurrent) : 0,\n            rttMax: isSet(object.rttMax) ? Number(object.rttMax) : 0,\n            keyFrames: isSet(object.keyFrames) ? Number(object.keyFrames) : 0,\n            lastKeyFrame: isSet(object.lastKeyFrame) ? fromJsonTimestamp(object.lastKeyFrame) : undefined,\n            layerLockPlis: isSet(object.layerLockPlis) ? Number(object.layerLockPlis) : 0,\n            lastLayerLockPli: isSet(object.lastLayerLockPli) ? fromJsonTimestamp(object.lastLayerLockPli) : undefined,\n            packetDrift: isSet(object.packetDrift) ? exports.RTPDrift.fromJSON(object.packetDrift) : undefined,\n            reportDrift: isSet(object.reportDrift) ? exports.RTPDrift.fromJSON(object.reportDrift) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.startTime !== undefined && (obj.startTime = message.startTime.toISOString());\n        message.endTime !== undefined && (obj.endTime = message.endTime.toISOString());\n        message.duration !== undefined && (obj.duration = message.duration);\n        message.packets !== undefined && (obj.packets = Math.round(message.packets));\n        message.packetRate !== undefined && (obj.packetRate = message.packetRate);\n        message.bytes !== undefined && (obj.bytes = Math.round(message.bytes));\n        message.headerBytes !== undefined && (obj.headerBytes = Math.round(message.headerBytes));\n        message.bitrate !== undefined && (obj.bitrate = message.bitrate);\n        message.packetsLost !== undefined && (obj.packetsLost = Math.round(message.packetsLost));\n        message.packetLossRate !== undefined && (obj.packetLossRate = message.packetLossRate);\n        message.packetLossPercentage !== undefined && (obj.packetLossPercentage = message.packetLossPercentage);\n        message.packetsDuplicate !== undefined && (obj.packetsDuplicate = Math.round(message.packetsDuplicate));\n        message.packetDuplicateRate !== undefined && (obj.packetDuplicateRate = message.packetDuplicateRate);\n        message.bytesDuplicate !== undefined && (obj.bytesDuplicate = Math.round(message.bytesDuplicate));\n        message.headerBytesDuplicate !== undefined && (obj.headerBytesDuplicate = Math.round(message.headerBytesDuplicate));\n        message.bitrateDuplicate !== undefined && (obj.bitrateDuplicate = message.bitrateDuplicate);\n        message.packetsPadding !== undefined && (obj.packetsPadding = Math.round(message.packetsPadding));\n        message.packetPaddingRate !== undefined && (obj.packetPaddingRate = message.packetPaddingRate);\n        message.bytesPadding !== undefined && (obj.bytesPadding = Math.round(message.bytesPadding));\n        message.headerBytesPadding !== undefined && (obj.headerBytesPadding = Math.round(message.headerBytesPadding));\n        message.bitratePadding !== undefined && (obj.bitratePadding = message.bitratePadding);\n        message.packetsOutOfOrder !== undefined && (obj.packetsOutOfOrder = Math.round(message.packetsOutOfOrder));\n        message.frames !== undefined && (obj.frames = Math.round(message.frames));\n        message.frameRate !== undefined && (obj.frameRate = message.frameRate);\n        message.jitterCurrent !== undefined && (obj.jitterCurrent = message.jitterCurrent);\n        message.jitterMax !== undefined && (obj.jitterMax = message.jitterMax);\n        obj.gapHistogram = {};\n        if (message.gapHistogram) {\n            Object.entries(message.gapHistogram).forEach(([k, v])=>{\n                obj.gapHistogram[k] = Math.round(v);\n            });\n        }\n        message.nacks !== undefined && (obj.nacks = Math.round(message.nacks));\n        message.nackAcks !== undefined && (obj.nackAcks = Math.round(message.nackAcks));\n        message.nackMisses !== undefined && (obj.nackMisses = Math.round(message.nackMisses));\n        message.nackRepeated !== undefined && (obj.nackRepeated = Math.round(message.nackRepeated));\n        message.plis !== undefined && (obj.plis = Math.round(message.plis));\n        message.lastPli !== undefined && (obj.lastPli = message.lastPli.toISOString());\n        message.firs !== undefined && (obj.firs = Math.round(message.firs));\n        message.lastFir !== undefined && (obj.lastFir = message.lastFir.toISOString());\n        message.rttCurrent !== undefined && (obj.rttCurrent = Math.round(message.rttCurrent));\n        message.rttMax !== undefined && (obj.rttMax = Math.round(message.rttMax));\n        message.keyFrames !== undefined && (obj.keyFrames = Math.round(message.keyFrames));\n        message.lastKeyFrame !== undefined && (obj.lastKeyFrame = message.lastKeyFrame.toISOString());\n        message.layerLockPlis !== undefined && (obj.layerLockPlis = Math.round(message.layerLockPlis));\n        message.lastLayerLockPli !== undefined && (obj.lastLayerLockPli = message.lastLayerLockPli.toISOString());\n        message.packetDrift !== undefined && (obj.packetDrift = message.packetDrift ? exports.RTPDrift.toJSON(message.packetDrift) : undefined);\n        message.reportDrift !== undefined && (obj.reportDrift = message.reportDrift ? exports.RTPDrift.toJSON(message.reportDrift) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16;\n        const message = createBaseRTPStats();\n        message.startTime = (_a = object.startTime) !== null && _a !== void 0 ? _a : undefined;\n        message.endTime = (_b = object.endTime) !== null && _b !== void 0 ? _b : undefined;\n        message.duration = (_c = object.duration) !== null && _c !== void 0 ? _c : 0;\n        message.packets = (_d = object.packets) !== null && _d !== void 0 ? _d : 0;\n        message.packetRate = (_e = object.packetRate) !== null && _e !== void 0 ? _e : 0;\n        message.bytes = (_f = object.bytes) !== null && _f !== void 0 ? _f : 0;\n        message.headerBytes = (_g = object.headerBytes) !== null && _g !== void 0 ? _g : 0;\n        message.bitrate = (_h = object.bitrate) !== null && _h !== void 0 ? _h : 0;\n        message.packetsLost = (_j = object.packetsLost) !== null && _j !== void 0 ? _j : 0;\n        message.packetLossRate = (_k = object.packetLossRate) !== null && _k !== void 0 ? _k : 0;\n        message.packetLossPercentage = (_l = object.packetLossPercentage) !== null && _l !== void 0 ? _l : 0;\n        message.packetsDuplicate = (_m = object.packetsDuplicate) !== null && _m !== void 0 ? _m : 0;\n        message.packetDuplicateRate = (_o = object.packetDuplicateRate) !== null && _o !== void 0 ? _o : 0;\n        message.bytesDuplicate = (_p = object.bytesDuplicate) !== null && _p !== void 0 ? _p : 0;\n        message.headerBytesDuplicate = (_q = object.headerBytesDuplicate) !== null && _q !== void 0 ? _q : 0;\n        message.bitrateDuplicate = (_r = object.bitrateDuplicate) !== null && _r !== void 0 ? _r : 0;\n        message.packetsPadding = (_s = object.packetsPadding) !== null && _s !== void 0 ? _s : 0;\n        message.packetPaddingRate = (_t = object.packetPaddingRate) !== null && _t !== void 0 ? _t : 0;\n        message.bytesPadding = (_u = object.bytesPadding) !== null && _u !== void 0 ? _u : 0;\n        message.headerBytesPadding = (_v = object.headerBytesPadding) !== null && _v !== void 0 ? _v : 0;\n        message.bitratePadding = (_w = object.bitratePadding) !== null && _w !== void 0 ? _w : 0;\n        message.packetsOutOfOrder = (_x = object.packetsOutOfOrder) !== null && _x !== void 0 ? _x : 0;\n        message.frames = (_y = object.frames) !== null && _y !== void 0 ? _y : 0;\n        message.frameRate = (_z = object.frameRate) !== null && _z !== void 0 ? _z : 0;\n        message.jitterCurrent = (_0 = object.jitterCurrent) !== null && _0 !== void 0 ? _0 : 0;\n        message.jitterMax = (_1 = object.jitterMax) !== null && _1 !== void 0 ? _1 : 0;\n        message.gapHistogram = Object.entries((_2 = object.gapHistogram) !== null && _2 !== void 0 ? _2 : {}).reduce((acc, [key, value])=>{\n            if (value !== undefined) {\n                acc[Number(key)] = Number(value);\n            }\n            return acc;\n        }, {});\n        message.nacks = (_3 = object.nacks) !== null && _3 !== void 0 ? _3 : 0;\n        message.nackAcks = (_4 = object.nackAcks) !== null && _4 !== void 0 ? _4 : 0;\n        message.nackMisses = (_5 = object.nackMisses) !== null && _5 !== void 0 ? _5 : 0;\n        message.nackRepeated = (_6 = object.nackRepeated) !== null && _6 !== void 0 ? _6 : 0;\n        message.plis = (_7 = object.plis) !== null && _7 !== void 0 ? _7 : 0;\n        message.lastPli = (_8 = object.lastPli) !== null && _8 !== void 0 ? _8 : undefined;\n        message.firs = (_9 = object.firs) !== null && _9 !== void 0 ? _9 : 0;\n        message.lastFir = (_10 = object.lastFir) !== null && _10 !== void 0 ? _10 : undefined;\n        message.rttCurrent = (_11 = object.rttCurrent) !== null && _11 !== void 0 ? _11 : 0;\n        message.rttMax = (_12 = object.rttMax) !== null && _12 !== void 0 ? _12 : 0;\n        message.keyFrames = (_13 = object.keyFrames) !== null && _13 !== void 0 ? _13 : 0;\n        message.lastKeyFrame = (_14 = object.lastKeyFrame) !== null && _14 !== void 0 ? _14 : undefined;\n        message.layerLockPlis = (_15 = object.layerLockPlis) !== null && _15 !== void 0 ? _15 : 0;\n        message.lastLayerLockPli = (_16 = object.lastLayerLockPli) !== null && _16 !== void 0 ? _16 : undefined;\n        message.packetDrift = object.packetDrift !== undefined && object.packetDrift !== null ? exports.RTPDrift.fromPartial(object.packetDrift) : undefined;\n        message.reportDrift = object.reportDrift !== undefined && object.reportDrift !== null ? exports.RTPDrift.fromPartial(object.reportDrift) : undefined;\n        return message;\n    }\n};\nfunction createBaseRTPStats_GapHistogramEntry() {\n    return {\n        key: 0,\n        value: 0\n    };\n}\nexports.RTPStats_GapHistogramEntry = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.key !== 0) {\n            writer.uint32(8).int32(message.key);\n        }\n        if (message.value !== 0) {\n            writer.uint32(16).uint32(message.value);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRTPStats_GapHistogramEntry();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.key = reader.int32();\n                    break;\n                case 2:\n                    message.value = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            key: isSet(object.key) ? Number(object.key) : 0,\n            value: isSet(object.value) ? Number(object.value) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = Math.round(message.key));\n        message.value !== undefined && (obj.value = Math.round(message.value));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseRTPStats_GapHistogramEntry();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : 0;\n        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    }\n};\nfunction createBaseTimedVersion() {\n    return {\n        unixMicro: 0,\n        ticks: 0\n    };\n}\nexports.TimedVersion = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.unixMicro !== 0) {\n            writer.uint32(8).int64(message.unixMicro);\n        }\n        if (message.ticks !== 0) {\n            writer.uint32(16).int32(message.ticks);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTimedVersion();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.unixMicro = longToNumber(reader.int64());\n                    break;\n                case 2:\n                    message.ticks = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            unixMicro: isSet(object.unixMicro) ? Number(object.unixMicro) : 0,\n            ticks: isSet(object.ticks) ? Number(object.ticks) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.unixMicro !== undefined && (obj.unixMicro = Math.round(message.unixMicro));\n        message.ticks !== undefined && (obj.ticks = Math.round(message.ticks));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseTimedVersion();\n        message.unixMicro = (_a = object.unixMicro) !== null && _a !== void 0 ? _a : 0;\n        message.ticks = (_b = object.ticks) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    }\n};\nvar globalThis = (()=>{\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (false) {}\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    } else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for(let i = 0; i < bin.length; ++i){\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    } else {\n        const bin = [];\n        arr.forEach((byte)=>{\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nfunction toTimestamp(date) {\n    const seconds = date.getTime() / 1000;\n    const nanos = date.getTime() % 1000 * 1000000;\n    return {\n        seconds,\n        nanos\n    };\n}\nfunction fromTimestamp(t) {\n    let millis = t.seconds * 1000;\n    millis += t.nanos / 1000000;\n    return new Date(millis);\n}\nfunction fromJsonTimestamp(o) {\n    if (o instanceof Date) {\n        return o;\n    } else if (typeof o === \"string\") {\n        return new Date(o);\n    } else {\n        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));\n    }\n}\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n} //# sourceMappingURL=livekit_models.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_room.js":
/*!********************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/livekit_room.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UpdateRoomMetadataRequest = exports.SendDataResponse = exports.SendDataRequest = exports.UpdateSubscriptionsResponse = exports.UpdateSubscriptionsRequest = exports.UpdateParticipantRequest = exports.MuteRoomTrackResponse = exports.MuteRoomTrackRequest = exports.RemoveParticipantResponse = exports.RoomParticipantIdentity = exports.ListParticipantsResponse = exports.ListParticipantsRequest = exports.DeleteRoomResponse = exports.DeleteRoomRequest = exports.ListRoomsResponse = exports.ListRoomsRequest = exports.RoomEgress = exports.CreateRoomRequest = exports.protobufPackage = void 0;\n/* eslint-disable */ const minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst livekit_egress_1 = __webpack_require__(/*! ./livekit_egress */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js\");\nconst livekit_models_1 = __webpack_require__(/*! ./livekit_models */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nexports.protobufPackage = \"livekit\";\nfunction createBaseCreateRoomRequest() {\n    return {\n        name: \"\",\n        emptyTimeout: 0,\n        maxParticipants: 0,\n        nodeId: \"\",\n        metadata: \"\",\n        egress: undefined,\n        minPlayoutDelay: 0,\n        maxPlayoutDelay: 0,\n        syncStreams: false\n    };\n}\nexports.CreateRoomRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.emptyTimeout !== undefined && message.emptyTimeout !== 0) {\n            writer.uint32(16).uint32(message.emptyTimeout);\n        }\n        if (message.maxParticipants !== undefined && message.maxParticipants !== 0) {\n            writer.uint32(24).uint32(message.maxParticipants);\n        }\n        if (message.nodeId !== undefined && message.nodeId !== \"\") {\n            writer.uint32(34).string(message.nodeId);\n        }\n        if (message.metadata !== undefined && message.metadata !== \"\") {\n            writer.uint32(42).string(message.metadata);\n        }\n        if (message.egress !== undefined) {\n            exports.RoomEgress.encode(message.egress, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.minPlayoutDelay !== undefined && message.minPlayoutDelay !== 0) {\n            writer.uint32(56).uint32(message.minPlayoutDelay);\n        }\n        if (message.maxPlayoutDelay !== undefined && message.maxPlayoutDelay !== 0) {\n            writer.uint32(64).uint32(message.maxPlayoutDelay);\n        }\n        if (message.syncStreams === true) {\n            writer.uint32(72).bool(message.syncStreams);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCreateRoomRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.emptyTimeout = reader.uint32();\n                    break;\n                case 3:\n                    message.maxParticipants = reader.uint32();\n                    break;\n                case 4:\n                    message.nodeId = reader.string();\n                    break;\n                case 5:\n                    message.metadata = reader.string();\n                    break;\n                case 6:\n                    message.egress = exports.RoomEgress.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.minPlayoutDelay = reader.uint32();\n                    break;\n                case 8:\n                    message.maxPlayoutDelay = reader.uint32();\n                    break;\n                case 9:\n                    message.syncStreams = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            name: isSet(object.name) ? String(object.name) : \"\",\n            emptyTimeout: isSet(object.emptyTimeout) ? Number(object.emptyTimeout) : 0,\n            maxParticipants: isSet(object.maxParticipants) ? Number(object.maxParticipants) : 0,\n            nodeId: isSet(object.nodeId) ? String(object.nodeId) : \"\",\n            metadata: isSet(object.metadata) ? String(object.metadata) : \"\",\n            egress: isSet(object.egress) ? exports.RoomEgress.fromJSON(object.egress) : undefined,\n            minPlayoutDelay: isSet(object.minPlayoutDelay) ? Number(object.minPlayoutDelay) : 0,\n            maxPlayoutDelay: isSet(object.maxPlayoutDelay) ? Number(object.maxPlayoutDelay) : 0,\n            syncStreams: isSet(object.syncStreams) ? Boolean(object.syncStreams) : false\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.name !== undefined && (obj.name = message.name);\n        message.emptyTimeout !== undefined && (obj.emptyTimeout = Math.round(message.emptyTimeout));\n        message.maxParticipants !== undefined && (obj.maxParticipants = Math.round(message.maxParticipants));\n        message.nodeId !== undefined && (obj.nodeId = message.nodeId);\n        message.metadata !== undefined && (obj.metadata = message.metadata);\n        message.egress !== undefined && (obj.egress = message.egress ? exports.RoomEgress.toJSON(message.egress) : undefined);\n        message.minPlayoutDelay !== undefined && (obj.minPlayoutDelay = Math.round(message.minPlayoutDelay));\n        message.maxPlayoutDelay !== undefined && (obj.maxPlayoutDelay = Math.round(message.maxPlayoutDelay));\n        message.syncStreams !== undefined && (obj.syncStreams = message.syncStreams);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const message = createBaseCreateRoomRequest();\n        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : \"\";\n        message.emptyTimeout = (_b = object.emptyTimeout) !== null && _b !== void 0 ? _b : 0;\n        message.maxParticipants = (_c = object.maxParticipants) !== null && _c !== void 0 ? _c : 0;\n        message.nodeId = (_d = object.nodeId) !== null && _d !== void 0 ? _d : \"\";\n        message.metadata = (_e = object.metadata) !== null && _e !== void 0 ? _e : \"\";\n        message.egress = object.egress !== undefined && object.egress !== null ? exports.RoomEgress.fromPartial(object.egress) : undefined;\n        message.minPlayoutDelay = (_f = object.minPlayoutDelay) !== null && _f !== void 0 ? _f : 0;\n        message.maxPlayoutDelay = (_g = object.maxPlayoutDelay) !== null && _g !== void 0 ? _g : 0;\n        message.syncStreams = (_h = object.syncStreams) !== null && _h !== void 0 ? _h : false;\n        return message;\n    }\n};\nfunction createBaseRoomEgress() {\n    return {\n        room: undefined,\n        participant: undefined,\n        tracks: undefined\n    };\n}\nexports.RoomEgress = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined) {\n            livekit_egress_1.RoomCompositeEgressRequest.encode(message.room, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.participant !== undefined) {\n            livekit_egress_1.AutoParticipantEgress.encode(message.participant, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.tracks !== undefined) {\n            livekit_egress_1.AutoTrackEgress.encode(message.tracks, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRoomEgress();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.room = livekit_egress_1.RoomCompositeEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.participant = livekit_egress_1.AutoParticipantEgress.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.tracks = livekit_egress_1.AutoTrackEgress.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            room: isSet(object.room) ? livekit_egress_1.RoomCompositeEgressRequest.fromJSON(object.room) : undefined,\n            participant: isSet(object.participant) ? livekit_egress_1.AutoParticipantEgress.fromJSON(object.participant) : undefined,\n            tracks: isSet(object.tracks) ? livekit_egress_1.AutoTrackEgress.fromJSON(object.tracks) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room ? livekit_egress_1.RoomCompositeEgressRequest.toJSON(message.room) : undefined);\n        message.participant !== undefined && (obj.participant = message.participant ? livekit_egress_1.AutoParticipantEgress.toJSON(message.participant) : undefined);\n        message.tracks !== undefined && (obj.tracks = message.tracks ? livekit_egress_1.AutoTrackEgress.toJSON(message.tracks) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        const message = createBaseRoomEgress();\n        message.room = object.room !== undefined && object.room !== null ? livekit_egress_1.RoomCompositeEgressRequest.fromPartial(object.room) : undefined;\n        message.participant = object.participant !== undefined && object.participant !== null ? livekit_egress_1.AutoParticipantEgress.fromPartial(object.participant) : undefined;\n        message.tracks = object.tracks !== undefined && object.tracks !== null ? livekit_egress_1.AutoTrackEgress.fromPartial(object.tracks) : undefined;\n        return message;\n    }\n};\nfunction createBaseListRoomsRequest() {\n    return {\n        names: []\n    };\n}\nexports.ListRoomsRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.names !== undefined && message.names.length !== 0) {\n            for (const v of message.names){\n                writer.uint32(10).string(v);\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListRoomsRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.names.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            names: Array.isArray(object === null || object === void 0 ? void 0 : object.names) ? object.names.map((e)=>String(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.names) {\n            obj.names = message.names.map((e)=>e);\n        } else {\n            obj.names = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseListRoomsRequest();\n        message.names = ((_a = object.names) === null || _a === void 0 ? void 0 : _a.map((e)=>e)) || [];\n        return message;\n    }\n};\nfunction createBaseListRoomsResponse() {\n    return {\n        rooms: []\n    };\n}\nexports.ListRoomsResponse = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.rooms !== undefined && message.rooms.length !== 0) {\n            for (const v of message.rooms){\n                livekit_models_1.Room.encode(v, writer.uint32(10).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListRoomsResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.rooms.push(livekit_models_1.Room.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            rooms: Array.isArray(object === null || object === void 0 ? void 0 : object.rooms) ? object.rooms.map((e)=>livekit_models_1.Room.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.rooms) {\n            obj.rooms = message.rooms.map((e)=>e ? livekit_models_1.Room.toJSON(e) : undefined);\n        } else {\n            obj.rooms = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseListRoomsResponse();\n        message.rooms = ((_a = object.rooms) === null || _a === void 0 ? void 0 : _a.map((e)=>livekit_models_1.Room.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseDeleteRoomRequest() {\n    return {\n        room: \"\"\n    };\n}\nexports.DeleteRoomRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDeleteRoomRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.room = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseDeleteRoomRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    }\n};\nfunction createBaseDeleteRoomResponse() {\n    return {};\n}\nexports.DeleteRoomResponse = {\n    encode (_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDeleteRoomResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (_) {\n        return {};\n    },\n    toJSON (_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial (_) {\n        const message = createBaseDeleteRoomResponse();\n        return message;\n    }\n};\nfunction createBaseListParticipantsRequest() {\n    return {\n        room: \"\"\n    };\n}\nexports.ListParticipantsRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListParticipantsRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.room = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseListParticipantsRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    }\n};\nfunction createBaseListParticipantsResponse() {\n    return {\n        participants: []\n    };\n}\nexports.ListParticipantsResponse = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.participants !== undefined && message.participants.length !== 0) {\n            for (const v of message.participants){\n                livekit_models_1.ParticipantInfo.encode(v, writer.uint32(10).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListParticipantsResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.participants.push(livekit_models_1.ParticipantInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            participants: Array.isArray(object === null || object === void 0 ? void 0 : object.participants) ? object.participants.map((e)=>livekit_models_1.ParticipantInfo.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.participants) {\n            obj.participants = message.participants.map((e)=>e ? livekit_models_1.ParticipantInfo.toJSON(e) : undefined);\n        } else {\n            obj.participants = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseListParticipantsResponse();\n        message.participants = ((_a = object.participants) === null || _a === void 0 ? void 0 : _a.map((e)=>livekit_models_1.ParticipantInfo.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseRoomParticipantIdentity() {\n    return {\n        room: \"\",\n        identity: \"\"\n    };\n}\nexports.RoomParticipantIdentity = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.identity !== undefined && message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRoomParticipantIdentity();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.identity !== undefined && (obj.identity = message.identity);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseRoomParticipantIdentity();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    }\n};\nfunction createBaseRemoveParticipantResponse() {\n    return {};\n}\nexports.RemoveParticipantResponse = {\n    encode (_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRemoveParticipantResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (_) {\n        return {};\n    },\n    toJSON (_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial (_) {\n        const message = createBaseRemoveParticipantResponse();\n        return message;\n    }\n};\nfunction createBaseMuteRoomTrackRequest() {\n    return {\n        room: \"\",\n        identity: \"\",\n        trackSid: \"\",\n        muted: false\n    };\n}\nexports.MuteRoomTrackRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.identity !== undefined && message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        if (message.trackSid !== undefined && message.trackSid !== \"\") {\n            writer.uint32(26).string(message.trackSid);\n        }\n        if (message.muted === true) {\n            writer.uint32(32).bool(message.muted);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMuteRoomTrackRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                case 3:\n                    message.trackSid = reader.string();\n                    break;\n                case 4:\n                    message.muted = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\",\n            trackSid: isSet(object.trackSid) ? String(object.trackSid) : \"\",\n            muted: isSet(object.muted) ? Boolean(object.muted) : false\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.identity !== undefined && (obj.identity = message.identity);\n        message.trackSid !== undefined && (obj.trackSid = message.trackSid);\n        message.muted !== undefined && (obj.muted = message.muted);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d;\n        const message = createBaseMuteRoomTrackRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        message.trackSid = (_c = object.trackSid) !== null && _c !== void 0 ? _c : \"\";\n        message.muted = (_d = object.muted) !== null && _d !== void 0 ? _d : false;\n        return message;\n    }\n};\nfunction createBaseMuteRoomTrackResponse() {\n    return {\n        track: undefined\n    };\n}\nexports.MuteRoomTrackResponse = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.track !== undefined) {\n            livekit_models_1.TrackInfo.encode(message.track, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMuteRoomTrackResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.track = livekit_models_1.TrackInfo.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            track: isSet(object.track) ? livekit_models_1.TrackInfo.fromJSON(object.track) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.track !== undefined && (obj.track = message.track ? livekit_models_1.TrackInfo.toJSON(message.track) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        const message = createBaseMuteRoomTrackResponse();\n        message.track = object.track !== undefined && object.track !== null ? livekit_models_1.TrackInfo.fromPartial(object.track) : undefined;\n        return message;\n    }\n};\nfunction createBaseUpdateParticipantRequest() {\n    return {\n        room: \"\",\n        identity: \"\",\n        metadata: \"\",\n        permission: undefined,\n        name: \"\"\n    };\n}\nexports.UpdateParticipantRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.identity !== undefined && message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        if (message.metadata !== undefined && message.metadata !== \"\") {\n            writer.uint32(26).string(message.metadata);\n        }\n        if (message.permission !== undefined) {\n            livekit_models_1.ParticipantPermission.encode(message.permission, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(42).string(message.name);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateParticipantRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                case 3:\n                    message.metadata = reader.string();\n                    break;\n                case 4:\n                    message.permission = livekit_models_1.ParticipantPermission.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.name = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\",\n            metadata: isSet(object.metadata) ? String(object.metadata) : \"\",\n            permission: isSet(object.permission) ? livekit_models_1.ParticipantPermission.fromJSON(object.permission) : undefined,\n            name: isSet(object.name) ? String(object.name) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.identity !== undefined && (obj.identity = message.identity);\n        message.metadata !== undefined && (obj.metadata = message.metadata);\n        message.permission !== undefined && (obj.permission = message.permission ? livekit_models_1.ParticipantPermission.toJSON(message.permission) : undefined);\n        message.name !== undefined && (obj.name = message.name);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d;\n        const message = createBaseUpdateParticipantRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        message.metadata = (_c = object.metadata) !== null && _c !== void 0 ? _c : \"\";\n        message.permission = object.permission !== undefined && object.permission !== null ? livekit_models_1.ParticipantPermission.fromPartial(object.permission) : undefined;\n        message.name = (_d = object.name) !== null && _d !== void 0 ? _d : \"\";\n        return message;\n    }\n};\nfunction createBaseUpdateSubscriptionsRequest() {\n    return {\n        room: \"\",\n        identity: \"\",\n        trackSids: [],\n        subscribe: false,\n        participantTracks: []\n    };\n}\nexports.UpdateSubscriptionsRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.identity !== undefined && message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        if (message.trackSids !== undefined && message.trackSids.length !== 0) {\n            for (const v of message.trackSids){\n                writer.uint32(26).string(v);\n            }\n        }\n        if (message.subscribe === true) {\n            writer.uint32(32).bool(message.subscribe);\n        }\n        if (message.participantTracks !== undefined && message.participantTracks.length !== 0) {\n            for (const v of message.participantTracks){\n                livekit_models_1.ParticipantTracks.encode(v, writer.uint32(42).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateSubscriptionsRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                case 3:\n                    message.trackSids.push(reader.string());\n                    break;\n                case 4:\n                    message.subscribe = reader.bool();\n                    break;\n                case 5:\n                    message.participantTracks.push(livekit_models_1.ParticipantTracks.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\",\n            trackSids: Array.isArray(object === null || object === void 0 ? void 0 : object.trackSids) ? object.trackSids.map((e)=>String(e)) : [],\n            subscribe: isSet(object.subscribe) ? Boolean(object.subscribe) : false,\n            participantTracks: Array.isArray(object === null || object === void 0 ? void 0 : object.participantTracks) ? object.participantTracks.map((e)=>livekit_models_1.ParticipantTracks.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.identity !== undefined && (obj.identity = message.identity);\n        if (message.trackSids) {\n            obj.trackSids = message.trackSids.map((e)=>e);\n        } else {\n            obj.trackSids = [];\n        }\n        message.subscribe !== undefined && (obj.subscribe = message.subscribe);\n        if (message.participantTracks) {\n            obj.participantTracks = message.participantTracks.map((e)=>e ? livekit_models_1.ParticipantTracks.toJSON(e) : undefined);\n        } else {\n            obj.participantTracks = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e;\n        const message = createBaseUpdateSubscriptionsRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        message.trackSids = ((_c = object.trackSids) === null || _c === void 0 ? void 0 : _c.map((e)=>e)) || [];\n        message.subscribe = (_d = object.subscribe) !== null && _d !== void 0 ? _d : false;\n        message.participantTracks = ((_e = object.participantTracks) === null || _e === void 0 ? void 0 : _e.map((e)=>livekit_models_1.ParticipantTracks.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseUpdateSubscriptionsResponse() {\n    return {};\n}\nexports.UpdateSubscriptionsResponse = {\n    encode (_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateSubscriptionsResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (_) {\n        return {};\n    },\n    toJSON (_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial (_) {\n        const message = createBaseUpdateSubscriptionsResponse();\n        return message;\n    }\n};\nfunction createBaseSendDataRequest() {\n    return {\n        room: \"\",\n        data: new Uint8Array(),\n        kind: 0,\n        destinationSids: [],\n        destinationIdentities: [],\n        topic: undefined\n    };\n}\nexports.SendDataRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.data !== undefined && message.data.length !== 0) {\n            writer.uint32(18).bytes(message.data);\n        }\n        if (message.kind !== undefined && message.kind !== 0) {\n            writer.uint32(24).int32(message.kind);\n        }\n        if (message.destinationSids !== undefined && message.destinationSids.length !== 0) {\n            for (const v of message.destinationSids){\n                writer.uint32(34).string(v);\n            }\n        }\n        if (message.destinationIdentities !== undefined && message.destinationIdentities.length !== 0) {\n            for (const v of message.destinationIdentities){\n                writer.uint32(50).string(v);\n            }\n        }\n        if (message.topic !== undefined) {\n            writer.uint32(42).string(message.topic);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSendDataRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.data = reader.bytes();\n                    break;\n                case 3:\n                    message.kind = reader.int32();\n                    break;\n                case 4:\n                    message.destinationSids.push(reader.string());\n                    break;\n                case 6:\n                    message.destinationIdentities.push(reader.string());\n                    break;\n                case 5:\n                    message.topic = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(),\n            kind: isSet(object.kind) ? livekit_models_1.dataPacket_KindFromJSON(object.kind) : 0,\n            destinationSids: Array.isArray(object === null || object === void 0 ? void 0 : object.destinationSids) ? object.destinationSids.map((e)=>String(e)) : [],\n            destinationIdentities: Array.isArray(object === null || object === void 0 ? void 0 : object.destinationIdentities) ? object.destinationIdentities.map((e)=>String(e)) : [],\n            topic: isSet(object.topic) ? String(object.topic) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        message.kind !== undefined && (obj.kind = livekit_models_1.dataPacket_KindToJSON(message.kind));\n        if (message.destinationSids) {\n            obj.destinationSids = message.destinationSids.map((e)=>e);\n        } else {\n            obj.destinationSids = [];\n        }\n        if (message.destinationIdentities) {\n            obj.destinationIdentities = message.destinationIdentities.map((e)=>e);\n        } else {\n            obj.destinationIdentities = [];\n        }\n        message.topic !== undefined && (obj.topic = message.topic);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseSendDataRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.data = (_b = object.data) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.kind = (_c = object.kind) !== null && _c !== void 0 ? _c : 0;\n        message.destinationSids = ((_d = object.destinationSids) === null || _d === void 0 ? void 0 : _d.map((e)=>e)) || [];\n        message.destinationIdentities = ((_e = object.destinationIdentities) === null || _e === void 0 ? void 0 : _e.map((e)=>e)) || [];\n        message.topic = (_f = object.topic) !== null && _f !== void 0 ? _f : undefined;\n        return message;\n    }\n};\nfunction createBaseSendDataResponse() {\n    return {};\n}\nexports.SendDataResponse = {\n    encode (_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSendDataResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (_) {\n        return {};\n    },\n    toJSON (_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial (_) {\n        const message = createBaseSendDataResponse();\n        return message;\n    }\n};\nfunction createBaseUpdateRoomMetadataRequest() {\n    return {\n        room: \"\",\n        metadata: \"\"\n    };\n}\nexports.UpdateRoomMetadataRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.metadata !== undefined && message.metadata !== \"\") {\n            writer.uint32(18).string(message.metadata);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateRoomMetadataRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.metadata = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            metadata: isSet(object.metadata) ? String(object.metadata) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.metadata !== undefined && (obj.metadata = message.metadata);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseUpdateRoomMetadataRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.metadata = (_b = object.metadata) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    }\n};\nvar globalThis = (()=>{\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (false) {}\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    } else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for(let i = 0; i < bin.length; ++i){\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    } else {\n        const bin = [];\n        arr.forEach((byte)=>{\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n} //# sourceMappingURL=livekit_room.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_room.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_webhook.js":
/*!***********************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/livekit_webhook.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WebhookEvent = exports.protobufPackage = void 0;\n/* eslint-disable */ const long_1 = __importDefault(__webpack_require__(/*! long */ \"(ssr)/./node_modules/long/umd/index.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(ssr)/./node_modules/protobufjs/minimal.js\"));\nconst livekit_egress_1 = __webpack_require__(/*! ./livekit_egress */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js\");\nconst livekit_ingress_1 = __webpack_require__(/*! ./livekit_ingress */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js\");\nconst livekit_models_1 = __webpack_require__(/*! ./livekit_models */ \"(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nexports.protobufPackage = \"livekit\";\nfunction createBaseWebhookEvent() {\n    return {\n        event: \"\",\n        room: undefined,\n        participant: undefined,\n        egressInfo: undefined,\n        ingressInfo: undefined,\n        track: undefined,\n        id: \"\",\n        createdAt: 0,\n        numDropped: 0\n    };\n}\nexports.WebhookEvent = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.event !== undefined && message.event !== \"\") {\n            writer.uint32(10).string(message.event);\n        }\n        if (message.room !== undefined) {\n            livekit_models_1.Room.encode(message.room, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.participant !== undefined) {\n            livekit_models_1.ParticipantInfo.encode(message.participant, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.egressInfo !== undefined) {\n            livekit_egress_1.EgressInfo.encode(message.egressInfo, writer.uint32(74).fork()).ldelim();\n        }\n        if (message.ingressInfo !== undefined) {\n            livekit_ingress_1.IngressInfo.encode(message.ingressInfo, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.track !== undefined) {\n            livekit_models_1.TrackInfo.encode(message.track, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.id !== undefined && message.id !== \"\") {\n            writer.uint32(50).string(message.id);\n        }\n        if (message.createdAt !== undefined && message.createdAt !== 0) {\n            writer.uint32(56).int64(message.createdAt);\n        }\n        if (message.numDropped !== undefined && message.numDropped !== 0) {\n            writer.uint32(88).int32(message.numDropped);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWebhookEvent();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.event = reader.string();\n                    break;\n                case 2:\n                    message.room = livekit_models_1.Room.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.participant = livekit_models_1.ParticipantInfo.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.egressInfo = livekit_egress_1.EgressInfo.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.ingressInfo = livekit_ingress_1.IngressInfo.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.track = livekit_models_1.TrackInfo.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.id = reader.string();\n                    break;\n                case 7:\n                    message.createdAt = longToNumber(reader.int64());\n                    break;\n                case 11:\n                    message.numDropped = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            event: isSet(object.event) ? String(object.event) : \"\",\n            room: isSet(object.room) ? livekit_models_1.Room.fromJSON(object.room) : undefined,\n            participant: isSet(object.participant) ? livekit_models_1.ParticipantInfo.fromJSON(object.participant) : undefined,\n            egressInfo: isSet(object.egressInfo) ? livekit_egress_1.EgressInfo.fromJSON(object.egressInfo) : undefined,\n            ingressInfo: isSet(object.ingressInfo) ? livekit_ingress_1.IngressInfo.fromJSON(object.ingressInfo) : undefined,\n            track: isSet(object.track) ? livekit_models_1.TrackInfo.fromJSON(object.track) : undefined,\n            id: isSet(object.id) ? String(object.id) : \"\",\n            createdAt: isSet(object.createdAt) ? Number(object.createdAt) : 0,\n            numDropped: isSet(object.numDropped) ? Number(object.numDropped) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.event !== undefined && (obj.event = message.event);\n        message.room !== undefined && (obj.room = message.room ? livekit_models_1.Room.toJSON(message.room) : undefined);\n        message.participant !== undefined && (obj.participant = message.participant ? livekit_models_1.ParticipantInfo.toJSON(message.participant) : undefined);\n        message.egressInfo !== undefined && (obj.egressInfo = message.egressInfo ? livekit_egress_1.EgressInfo.toJSON(message.egressInfo) : undefined);\n        message.ingressInfo !== undefined && (obj.ingressInfo = message.ingressInfo ? livekit_ingress_1.IngressInfo.toJSON(message.ingressInfo) : undefined);\n        message.track !== undefined && (obj.track = message.track ? livekit_models_1.TrackInfo.toJSON(message.track) : undefined);\n        message.id !== undefined && (obj.id = message.id);\n        message.createdAt !== undefined && (obj.createdAt = Math.round(message.createdAt));\n        message.numDropped !== undefined && (obj.numDropped = Math.round(message.numDropped));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d;\n        const message = createBaseWebhookEvent();\n        message.event = (_a = object.event) !== null && _a !== void 0 ? _a : \"\";\n        message.room = object.room !== undefined && object.room !== null ? livekit_models_1.Room.fromPartial(object.room) : undefined;\n        message.participant = object.participant !== undefined && object.participant !== null ? livekit_models_1.ParticipantInfo.fromPartial(object.participant) : undefined;\n        message.egressInfo = object.egressInfo !== undefined && object.egressInfo !== null ? livekit_egress_1.EgressInfo.fromPartial(object.egressInfo) : undefined;\n        message.ingressInfo = object.ingressInfo !== undefined && object.ingressInfo !== null ? livekit_ingress_1.IngressInfo.fromPartial(object.ingressInfo) : undefined;\n        message.track = object.track !== undefined && object.track !== null ? livekit_models_1.TrackInfo.fromPartial(object.track) : undefined;\n        message.id = (_b = object.id) !== null && _b !== void 0 ? _b : \"\";\n        message.createdAt = (_c = object.createdAt) !== null && _c !== void 0 ? _c : 0;\n        message.numDropped = (_d = object.numDropped) !== null && _d !== void 0 ? _d : 0;\n        return message;\n    }\n};\nvar globalThis = (()=>{\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (false) {}\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n} //# sourceMappingURL=livekit_webhook.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/dist/proto/livekit_webhook.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/node_modules/camelcase-keys/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/node_modules/camelcase-keys/index.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst mapObj = __webpack_require__(/*! map-obj */ \"(ssr)/./node_modules/map-obj/index.js\");\nconst camelCase = __webpack_require__(/*! camelcase */ \"(ssr)/./node_modules/livekit-server-sdk/node_modules/camelcase/index.js\");\nconst QuickLru = __webpack_require__(/*! quick-lru */ \"(ssr)/./node_modules/livekit-server-sdk/node_modules/quick-lru/index.js\");\nconst has = (array, key)=>array.some((x)=>{\n        if (typeof x === \"string\") {\n            return x === key;\n        }\n        x.lastIndex = 0;\n        return x.test(key);\n    });\nconst cache = new QuickLru({\n    maxSize: 100000\n});\n// Reproduces behavior from `map-obj`\nconst isObject = (value)=>typeof value === \"object\" && value !== null && !(value instanceof RegExp) && !(value instanceof Error) && !(value instanceof Date);\nconst camelCaseConvert = (input, options)=>{\n    if (!isObject(input)) {\n        return input;\n    }\n    options = {\n        deep: false,\n        pascalCase: false,\n        ...options\n    };\n    const { exclude, pascalCase, stopPaths, deep } = options;\n    const stopPathsSet = new Set(stopPaths);\n    const makeMapper = (parentPath)=>(key, value)=>{\n            if (deep && isObject(value)) {\n                const path = parentPath === undefined ? key : `${parentPath}.${key}`;\n                if (!stopPathsSet.has(path)) {\n                    value = mapObj(value, makeMapper(path));\n                }\n            }\n            if (!(exclude && has(exclude, key))) {\n                const cacheKey = pascalCase ? `${key}_` : key;\n                if (cache.has(cacheKey)) {\n                    key = cache.get(cacheKey);\n                } else {\n                    const returnValue = camelCase(key, {\n                        pascalCase,\n                        locale: false\n                    });\n                    if (key.length < 100) {\n                        cache.set(cacheKey, returnValue);\n                    }\n                    key = returnValue;\n                }\n            }\n            return [\n                key,\n                value\n            ];\n        };\n    return mapObj(input, makeMapper(undefined));\n};\nmodule.exports = (input, options)=>{\n    if (Array.isArray(input)) {\n        return Object.keys(input).map((key)=>camelCaseConvert(input[key], options));\n    }\n    return camelCaseConvert(input, options);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL25vZGVfbW9kdWxlcy9jYW1lbGNhc2Uta2V5cy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU1BLFNBQVNDLG1CQUFPQSxDQUFDO0FBQ3ZCLE1BQU1DLFlBQVlELG1CQUFPQSxDQUFDO0FBQzFCLE1BQU1FLFdBQVdGLG1CQUFPQSxDQUFDO0FBRXpCLE1BQU1HLE1BQU0sQ0FBQ0MsT0FBT0MsTUFBUUQsTUFBTUUsSUFBSSxDQUFDQyxDQUFBQTtRQUN0QyxJQUFJLE9BQU9BLE1BQU0sVUFBVTtZQUMxQixPQUFPQSxNQUFNRjtRQUNkO1FBRUFFLEVBQUVDLFNBQVMsR0FBRztRQUNkLE9BQU9ELEVBQUVFLElBQUksQ0FBQ0o7SUFDZjtBQUVBLE1BQU1LLFFBQVEsSUFBSVIsU0FBUztJQUFDUyxTQUFTO0FBQU07QUFFM0MscUNBQXFDO0FBQ3JDLE1BQU1DLFdBQVdDLENBQUFBLFFBQ2hCLE9BQU9BLFVBQVUsWUFDakJBLFVBQVUsUUFDVixDQUFFQSxDQUFBQSxpQkFBaUJDLE1BQUssS0FDeEIsQ0FBRUQsQ0FBQUEsaUJBQWlCRSxLQUFJLEtBQ3ZCLENBQUVGLENBQUFBLGlCQUFpQkcsSUFBRztBQUV2QixNQUFNQyxtQkFBbUIsQ0FBQ0MsT0FBT0M7SUFDaEMsSUFBSSxDQUFDUCxTQUFTTSxRQUFRO1FBQ3JCLE9BQU9BO0lBQ1I7SUFFQUMsVUFBVTtRQUNUQyxNQUFNO1FBQ05DLFlBQVk7UUFDWixHQUFHRixPQUFPO0lBQ1g7SUFFQSxNQUFNLEVBQUNHLE9BQU8sRUFBRUQsVUFBVSxFQUFFRSxTQUFTLEVBQUVILElBQUksRUFBQyxHQUFHRDtJQUUvQyxNQUFNSyxlQUFlLElBQUlDLElBQUlGO0lBRTdCLE1BQU1HLGFBQWFDLENBQUFBLGFBQWMsQ0FBQ3RCLEtBQUtRO1lBQ3RDLElBQUlPLFFBQVFSLFNBQVNDLFFBQVE7Z0JBQzVCLE1BQU1lLE9BQU9ELGVBQWVFLFlBQVl4QixNQUFNLENBQUMsRUFBRXNCLFdBQVcsQ0FBQyxFQUFFdEIsSUFBSSxDQUFDO2dCQUVwRSxJQUFJLENBQUNtQixhQUFhckIsR0FBRyxDQUFDeUIsT0FBTztvQkFDNUJmLFFBQVFkLE9BQU9jLE9BQU9hLFdBQVdFO2dCQUNsQztZQUNEO1lBRUEsSUFBSSxDQUFFTixDQUFBQSxXQUFXbkIsSUFBSW1CLFNBQVNqQixJQUFHLEdBQUk7Z0JBQ3BDLE1BQU15QixXQUFXVCxhQUFhLENBQUMsRUFBRWhCLElBQUksQ0FBQyxDQUFDLEdBQUdBO2dCQUUxQyxJQUFJSyxNQUFNUCxHQUFHLENBQUMyQixXQUFXO29CQUN4QnpCLE1BQU1LLE1BQU1xQixHQUFHLENBQUNEO2dCQUNqQixPQUFPO29CQUNOLE1BQU1FLGNBQWMvQixVQUFVSSxLQUFLO3dCQUFDZ0I7d0JBQVlZLFFBQVE7b0JBQUs7b0JBRTdELElBQUk1QixJQUFJNkIsTUFBTSxHQUFHLEtBQUs7d0JBQ3JCeEIsTUFBTXlCLEdBQUcsQ0FBQ0wsVUFBVUU7b0JBQ3JCO29CQUVBM0IsTUFBTTJCO2dCQUNQO1lBQ0Q7WUFFQSxPQUFPO2dCQUFDM0I7Z0JBQUtRO2FBQU07UUFDcEI7SUFFQSxPQUFPZCxPQUFPbUIsT0FBT1EsV0FBV0c7QUFDakM7QUFFQU8sT0FBT0MsT0FBTyxHQUFHLENBQUNuQixPQUFPQztJQUN4QixJQUFJbUIsTUFBTUMsT0FBTyxDQUFDckIsUUFBUTtRQUN6QixPQUFPc0IsT0FBT0MsSUFBSSxDQUFDdkIsT0FBT3dCLEdBQUcsQ0FBQ3JDLENBQUFBLE1BQU9ZLGlCQUFpQkMsS0FBSyxDQUFDYixJQUFJLEVBQUVjO0lBQ25FO0lBRUEsT0FBT0YsaUJBQWlCQyxPQUFPQztBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0cmVhbWluZy12aWRlby8uL25vZGVfbW9kdWxlcy9saXZla2l0LXNlcnZlci1zZGsvbm9kZV9tb2R1bGVzL2NhbWVsY2FzZS1rZXlzL2luZGV4LmpzP2M2YmMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgbWFwT2JqID0gcmVxdWlyZSgnbWFwLW9iaicpO1xuY29uc3QgY2FtZWxDYXNlID0gcmVxdWlyZSgnY2FtZWxjYXNlJyk7XG5jb25zdCBRdWlja0xydSA9IHJlcXVpcmUoJ3F1aWNrLWxydScpO1xuXG5jb25zdCBoYXMgPSAoYXJyYXksIGtleSkgPT4gYXJyYXkuc29tZSh4ID0+IHtcblx0aWYgKHR5cGVvZiB4ID09PSAnc3RyaW5nJykge1xuXHRcdHJldHVybiB4ID09PSBrZXk7XG5cdH1cblxuXHR4Lmxhc3RJbmRleCA9IDA7XG5cdHJldHVybiB4LnRlc3Qoa2V5KTtcbn0pO1xuXG5jb25zdCBjYWNoZSA9IG5ldyBRdWlja0xydSh7bWF4U2l6ZTogMTAwMDAwfSk7XG5cbi8vIFJlcHJvZHVjZXMgYmVoYXZpb3IgZnJvbSBgbWFwLW9iamBcbmNvbnN0IGlzT2JqZWN0ID0gdmFsdWUgPT5cblx0dHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuXHR2YWx1ZSAhPT0gbnVsbCAmJlxuXHQhKHZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSAmJlxuXHQhKHZhbHVlIGluc3RhbmNlb2YgRXJyb3IpICYmXG5cdCEodmFsdWUgaW5zdGFuY2VvZiBEYXRlKTtcblxuY29uc3QgY2FtZWxDYXNlQ29udmVydCA9IChpbnB1dCwgb3B0aW9ucykgPT4ge1xuXHRpZiAoIWlzT2JqZWN0KGlucHV0KSkge1xuXHRcdHJldHVybiBpbnB1dDtcblx0fVxuXG5cdG9wdGlvbnMgPSB7XG5cdFx0ZGVlcDogZmFsc2UsXG5cdFx0cGFzY2FsQ2FzZTogZmFsc2UsXG5cdFx0Li4ub3B0aW9uc1xuXHR9O1xuXG5cdGNvbnN0IHtleGNsdWRlLCBwYXNjYWxDYXNlLCBzdG9wUGF0aHMsIGRlZXB9ID0gb3B0aW9ucztcblxuXHRjb25zdCBzdG9wUGF0aHNTZXQgPSBuZXcgU2V0KHN0b3BQYXRocyk7XG5cblx0Y29uc3QgbWFrZU1hcHBlciA9IHBhcmVudFBhdGggPT4gKGtleSwgdmFsdWUpID0+IHtcblx0XHRpZiAoZGVlcCAmJiBpc09iamVjdCh2YWx1ZSkpIHtcblx0XHRcdGNvbnN0IHBhdGggPSBwYXJlbnRQYXRoID09PSB1bmRlZmluZWQgPyBrZXkgOiBgJHtwYXJlbnRQYXRofS4ke2tleX1gO1xuXG5cdFx0XHRpZiAoIXN0b3BQYXRoc1NldC5oYXMocGF0aCkpIHtcblx0XHRcdFx0dmFsdWUgPSBtYXBPYmoodmFsdWUsIG1ha2VNYXBwZXIocGF0aCkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICghKGV4Y2x1ZGUgJiYgaGFzKGV4Y2x1ZGUsIGtleSkpKSB7XG5cdFx0XHRjb25zdCBjYWNoZUtleSA9IHBhc2NhbENhc2UgPyBgJHtrZXl9X2AgOiBrZXk7XG5cblx0XHRcdGlmIChjYWNoZS5oYXMoY2FjaGVLZXkpKSB7XG5cdFx0XHRcdGtleSA9IGNhY2hlLmdldChjYWNoZUtleSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zdCByZXR1cm5WYWx1ZSA9IGNhbWVsQ2FzZShrZXksIHtwYXNjYWxDYXNlLCBsb2NhbGU6IGZhbHNlfSk7XG5cblx0XHRcdFx0aWYgKGtleS5sZW5ndGggPCAxMDApIHsgLy8gUHJldmVudCBhYnVzZVxuXHRcdFx0XHRcdGNhY2hlLnNldChjYWNoZUtleSwgcmV0dXJuVmFsdWUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0a2V5ID0gcmV0dXJuVmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFtrZXksIHZhbHVlXTtcblx0fTtcblxuXHRyZXR1cm4gbWFwT2JqKGlucHV0LCBtYWtlTWFwcGVyKHVuZGVmaW5lZCkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHtcblx0aWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG5cdFx0cmV0dXJuIE9iamVjdC5rZXlzKGlucHV0KS5tYXAoa2V5ID0+IGNhbWVsQ2FzZUNvbnZlcnQoaW5wdXRba2V5XSwgb3B0aW9ucykpO1xuXHR9XG5cblx0cmV0dXJuIGNhbWVsQ2FzZUNvbnZlcnQoaW5wdXQsIG9wdGlvbnMpO1xufTtcbiJdLCJuYW1lcyI6WyJtYXBPYmoiLCJyZXF1aXJlIiwiY2FtZWxDYXNlIiwiUXVpY2tMcnUiLCJoYXMiLCJhcnJheSIsImtleSIsInNvbWUiLCJ4IiwibGFzdEluZGV4IiwidGVzdCIsImNhY2hlIiwibWF4U2l6ZSIsImlzT2JqZWN0IiwidmFsdWUiLCJSZWdFeHAiLCJFcnJvciIsIkRhdGUiLCJjYW1lbENhc2VDb252ZXJ0IiwiaW5wdXQiLCJvcHRpb25zIiwiZGVlcCIsInBhc2NhbENhc2UiLCJleGNsdWRlIiwic3RvcFBhdGhzIiwic3RvcFBhdGhzU2V0IiwiU2V0IiwibWFrZU1hcHBlciIsInBhcmVudFBhdGgiLCJwYXRoIiwidW5kZWZpbmVkIiwiY2FjaGVLZXkiLCJnZXQiLCJyZXR1cm5WYWx1ZSIsImxvY2FsZSIsImxlbmd0aCIsInNldCIsIm1vZHVsZSIsImV4cG9ydHMiLCJBcnJheSIsImlzQXJyYXkiLCJPYmplY3QiLCJrZXlzIiwibWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/node_modules/camelcase-keys/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/node_modules/camelcase/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/node_modules/camelcase/index.js ***!
  \*************************************************************************/
/***/ ((module) => {

eval("\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\nconst LEADING_SEPARATORS = new RegExp(\"^\" + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, \"gu\");\nconst NUMBERS_AND_IDENTIFIER = new RegExp(\"\\\\d+\" + IDENTIFIER.source, \"gu\");\nconst preserveCamelCase = (string, toLowerCase, toUpperCase)=>{\n    let isLastCharLower = false;\n    let isLastCharUpper = false;\n    let isLastLastCharUpper = false;\n    for(let i = 0; i < string.length; i++){\n        const character = string[i];\n        if (isLastCharLower && UPPERCASE.test(character)) {\n            string = string.slice(0, i) + \"-\" + string.slice(i);\n            isLastCharLower = false;\n            isLastLastCharUpper = isLastCharUpper;\n            isLastCharUpper = true;\n            i++;\n        } else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {\n            string = string.slice(0, i - 1) + \"-\" + string.slice(i - 1);\n            isLastLastCharUpper = isLastCharUpper;\n            isLastCharUpper = false;\n            isLastCharLower = true;\n        } else {\n            isLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n            isLastLastCharUpper = isLastCharUpper;\n            isLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n        }\n    }\n    return string;\n};\nconst preserveConsecutiveUppercase = (input, toLowerCase)=>{\n    LEADING_CAPITAL.lastIndex = 0;\n    return input.replace(LEADING_CAPITAL, (m1)=>toLowerCase(m1));\n};\nconst postProcess = (input, toUpperCase)=>{\n    SEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n    NUMBERS_AND_IDENTIFIER.lastIndex = 0;\n    return input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier)=>toUpperCase(identifier)).replace(NUMBERS_AND_IDENTIFIER, (m)=>toUpperCase(m));\n};\nconst camelCase = (input, options)=>{\n    if (!(typeof input === \"string\" || Array.isArray(input))) {\n        throw new TypeError(\"Expected the input to be `string | string[]`\");\n    }\n    options = {\n        pascalCase: false,\n        preserveConsecutiveUppercase: false,\n        ...options\n    };\n    if (Array.isArray(input)) {\n        input = input.map((x)=>x.trim()).filter((x)=>x.length).join(\"-\");\n    } else {\n        input = input.trim();\n    }\n    if (input.length === 0) {\n        return \"\";\n    }\n    const toLowerCase = options.locale === false ? (string)=>string.toLowerCase() : (string)=>string.toLocaleLowerCase(options.locale);\n    const toUpperCase = options.locale === false ? (string)=>string.toUpperCase() : (string)=>string.toLocaleUpperCase(options.locale);\n    if (input.length === 1) {\n        return options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n    }\n    const hasUpperCase = input !== toLowerCase(input);\n    if (hasUpperCase) {\n        input = preserveCamelCase(input, toLowerCase, toUpperCase);\n    }\n    input = input.replace(LEADING_SEPARATORS, \"\");\n    if (options.preserveConsecutiveUppercase) {\n        input = preserveConsecutiveUppercase(input, toLowerCase);\n    } else {\n        input = toLowerCase(input);\n    }\n    if (options.pascalCase) {\n        input = toUpperCase(input.charAt(0)) + input.slice(1);\n    }\n    return postProcess(input, toUpperCase);\n};\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports[\"default\"] = camelCase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/node_modules/camelcase/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/livekit-server-sdk/node_modules/quick-lru/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/node_modules/quick-lru/index.js ***!
  \*************************************************************************/
/***/ ((module) => {

eval("\nclass QuickLRU {\n    constructor(options = {}){\n        if (!(options.maxSize && options.maxSize > 0)) {\n            throw new TypeError(\"`maxSize` must be a number greater than 0\");\n        }\n        this.maxSize = options.maxSize;\n        this.onEviction = options.onEviction;\n        this.cache = new Map();\n        this.oldCache = new Map();\n        this._size = 0;\n    }\n    _set(key, value) {\n        this.cache.set(key, value);\n        this._size++;\n        if (this._size >= this.maxSize) {\n            this._size = 0;\n            if (typeof this.onEviction === \"function\") {\n                for (const [key, value] of this.oldCache.entries()){\n                    this.onEviction(key, value);\n                }\n            }\n            this.oldCache = this.cache;\n            this.cache = new Map();\n        }\n    }\n    get(key) {\n        if (this.cache.has(key)) {\n            return this.cache.get(key);\n        }\n        if (this.oldCache.has(key)) {\n            const value = this.oldCache.get(key);\n            this.oldCache.delete(key);\n            this._set(key, value);\n            return value;\n        }\n    }\n    set(key, value) {\n        if (this.cache.has(key)) {\n            this.cache.set(key, value);\n        } else {\n            this._set(key, value);\n        }\n        return this;\n    }\n    has(key) {\n        return this.cache.has(key) || this.oldCache.has(key);\n    }\n    peek(key) {\n        if (this.cache.has(key)) {\n            return this.cache.get(key);\n        }\n        if (this.oldCache.has(key)) {\n            return this.oldCache.get(key);\n        }\n    }\n    delete(key) {\n        const deleted = this.cache.delete(key);\n        if (deleted) {\n            this._size--;\n        }\n        return this.oldCache.delete(key) || deleted;\n    }\n    clear() {\n        this.cache.clear();\n        this.oldCache.clear();\n        this._size = 0;\n    }\n    *keys() {\n        for (const [key] of this){\n            yield key;\n        }\n    }\n    *values() {\n        for (const [, value] of this){\n            yield value;\n        }\n    }\n    *[Symbol.iterator]() {\n        for (const item of this.cache){\n            yield item;\n        }\n        for (const item of this.oldCache){\n            const [key] = item;\n            if (!this.cache.has(key)) {\n                yield item;\n            }\n        }\n    }\n    get size() {\n        let oldCacheSize = 0;\n        for (const key of this.oldCache.keys()){\n            if (!this.cache.has(key)) {\n                oldCacheSize++;\n            }\n        }\n        return Math.min(this._size + oldCacheSize, this.maxSize);\n    }\n}\nmodule.exports = QuickLRU;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL25vZGVfbW9kdWxlcy9xdWljay1scnUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQTtJQUNMQyxZQUFZQyxVQUFVLENBQUMsQ0FBQyxDQUFFO1FBQ3pCLElBQUksQ0FBRUEsQ0FBQUEsUUFBUUMsT0FBTyxJQUFJRCxRQUFRQyxPQUFPLEdBQUcsSUFBSTtZQUM5QyxNQUFNLElBQUlDLFVBQVU7UUFDckI7UUFFQSxJQUFJLENBQUNELE9BQU8sR0FBR0QsUUFBUUMsT0FBTztRQUM5QixJQUFJLENBQUNFLFVBQVUsR0FBR0gsUUFBUUcsVUFBVTtRQUNwQyxJQUFJLENBQUNDLEtBQUssR0FBRyxJQUFJQztRQUNqQixJQUFJLENBQUNDLFFBQVEsR0FBRyxJQUFJRDtRQUNwQixJQUFJLENBQUNFLEtBQUssR0FBRztJQUNkO0lBRUFDLEtBQUtDLEdBQUcsRUFBRUMsS0FBSyxFQUFFO1FBQ2hCLElBQUksQ0FBQ04sS0FBSyxDQUFDTyxHQUFHLENBQUNGLEtBQUtDO1FBQ3BCLElBQUksQ0FBQ0gsS0FBSztRQUVWLElBQUksSUFBSSxDQUFDQSxLQUFLLElBQUksSUFBSSxDQUFDTixPQUFPLEVBQUU7WUFDL0IsSUFBSSxDQUFDTSxLQUFLLEdBQUc7WUFFYixJQUFJLE9BQU8sSUFBSSxDQUFDSixVQUFVLEtBQUssWUFBWTtnQkFDMUMsS0FBSyxNQUFNLENBQUNNLEtBQUtDLE1BQU0sSUFBSSxJQUFJLENBQUNKLFFBQVEsQ0FBQ00sT0FBTyxHQUFJO29CQUNuRCxJQUFJLENBQUNULFVBQVUsQ0FBQ00sS0FBS0M7Z0JBQ3RCO1lBQ0Q7WUFFQSxJQUFJLENBQUNKLFFBQVEsR0FBRyxJQUFJLENBQUNGLEtBQUs7WUFDMUIsSUFBSSxDQUFDQSxLQUFLLEdBQUcsSUFBSUM7UUFDbEI7SUFDRDtJQUVBUSxJQUFJSixHQUFHLEVBQUU7UUFDUixJQUFJLElBQUksQ0FBQ0wsS0FBSyxDQUFDVSxHQUFHLENBQUNMLE1BQU07WUFDeEIsT0FBTyxJQUFJLENBQUNMLEtBQUssQ0FBQ1MsR0FBRyxDQUFDSjtRQUN2QjtRQUVBLElBQUksSUFBSSxDQUFDSCxRQUFRLENBQUNRLEdBQUcsQ0FBQ0wsTUFBTTtZQUMzQixNQUFNQyxRQUFRLElBQUksQ0FBQ0osUUFBUSxDQUFDTyxHQUFHLENBQUNKO1lBQ2hDLElBQUksQ0FBQ0gsUUFBUSxDQUFDUyxNQUFNLENBQUNOO1lBQ3JCLElBQUksQ0FBQ0QsSUFBSSxDQUFDQyxLQUFLQztZQUNmLE9BQU9BO1FBQ1I7SUFDRDtJQUVBQyxJQUFJRixHQUFHLEVBQUVDLEtBQUssRUFBRTtRQUNmLElBQUksSUFBSSxDQUFDTixLQUFLLENBQUNVLEdBQUcsQ0FBQ0wsTUFBTTtZQUN4QixJQUFJLENBQUNMLEtBQUssQ0FBQ08sR0FBRyxDQUFDRixLQUFLQztRQUNyQixPQUFPO1lBQ04sSUFBSSxDQUFDRixJQUFJLENBQUNDLEtBQUtDO1FBQ2hCO1FBRUEsT0FBTyxJQUFJO0lBQ1o7SUFFQUksSUFBSUwsR0FBRyxFQUFFO1FBQ1IsT0FBTyxJQUFJLENBQUNMLEtBQUssQ0FBQ1UsR0FBRyxDQUFDTCxRQUFRLElBQUksQ0FBQ0gsUUFBUSxDQUFDUSxHQUFHLENBQUNMO0lBQ2pEO0lBRUFPLEtBQUtQLEdBQUcsRUFBRTtRQUNULElBQUksSUFBSSxDQUFDTCxLQUFLLENBQUNVLEdBQUcsQ0FBQ0wsTUFBTTtZQUN4QixPQUFPLElBQUksQ0FBQ0wsS0FBSyxDQUFDUyxHQUFHLENBQUNKO1FBQ3ZCO1FBRUEsSUFBSSxJQUFJLENBQUNILFFBQVEsQ0FBQ1EsR0FBRyxDQUFDTCxNQUFNO1lBQzNCLE9BQU8sSUFBSSxDQUFDSCxRQUFRLENBQUNPLEdBQUcsQ0FBQ0o7UUFDMUI7SUFDRDtJQUVBTSxPQUFPTixHQUFHLEVBQUU7UUFDWCxNQUFNUSxVQUFVLElBQUksQ0FBQ2IsS0FBSyxDQUFDVyxNQUFNLENBQUNOO1FBQ2xDLElBQUlRLFNBQVM7WUFDWixJQUFJLENBQUNWLEtBQUs7UUFDWDtRQUVBLE9BQU8sSUFBSSxDQUFDRCxRQUFRLENBQUNTLE1BQU0sQ0FBQ04sUUFBUVE7SUFDckM7SUFFQUMsUUFBUTtRQUNQLElBQUksQ0FBQ2QsS0FBSyxDQUFDYyxLQUFLO1FBQ2hCLElBQUksQ0FBQ1osUUFBUSxDQUFDWSxLQUFLO1FBQ25CLElBQUksQ0FBQ1gsS0FBSyxHQUFHO0lBQ2Q7SUFFQSxDQUFFWSxPQUFPO1FBQ1IsS0FBSyxNQUFNLENBQUNWLElBQUksSUFBSSxJQUFJLENBQUU7WUFDekIsTUFBTUE7UUFDUDtJQUNEO0lBRUEsQ0FBRVcsU0FBUztRQUNWLEtBQUssTUFBTSxHQUFHVixNQUFNLElBQUksSUFBSSxDQUFFO1lBQzdCLE1BQU1BO1FBQ1A7SUFDRDtJQUVBLENBQUUsQ0FBQ1csT0FBT0MsUUFBUSxDQUFDLEdBQUc7UUFDckIsS0FBSyxNQUFNQyxRQUFRLElBQUksQ0FBQ25CLEtBQUssQ0FBRTtZQUM5QixNQUFNbUI7UUFDUDtRQUVBLEtBQUssTUFBTUEsUUFBUSxJQUFJLENBQUNqQixRQUFRLENBQUU7WUFDakMsTUFBTSxDQUFDRyxJQUFJLEdBQUdjO1lBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQ25CLEtBQUssQ0FBQ1UsR0FBRyxDQUFDTCxNQUFNO2dCQUN6QixNQUFNYztZQUNQO1FBQ0Q7SUFDRDtJQUVBLElBQUlDLE9BQU87UUFDVixJQUFJQyxlQUFlO1FBQ25CLEtBQUssTUFBTWhCLE9BQU8sSUFBSSxDQUFDSCxRQUFRLENBQUNhLElBQUksR0FBSTtZQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDZixLQUFLLENBQUNVLEdBQUcsQ0FBQ0wsTUFBTTtnQkFDekJnQjtZQUNEO1FBQ0Q7UUFFQSxPQUFPQyxLQUFLQyxHQUFHLENBQUMsSUFBSSxDQUFDcEIsS0FBSyxHQUFHa0IsY0FBYyxJQUFJLENBQUN4QixPQUFPO0lBQ3hEO0FBQ0Q7QUFFQTJCLE9BQU9DLE9BQU8sR0FBRy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RyZWFtaW5nLXZpZGVvLy4vbm9kZV9tb2R1bGVzL2xpdmVraXQtc2VydmVyLXNkay9ub2RlX21vZHVsZXMvcXVpY2stbHJ1L2luZGV4LmpzPzk3MzQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jbGFzcyBRdWlja0xSVSB7XG5cdGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuXHRcdGlmICghKG9wdGlvbnMubWF4U2l6ZSAmJiBvcHRpb25zLm1heFNpemUgPiAwKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignYG1heFNpemVgIG11c3QgYmUgYSBudW1iZXIgZ3JlYXRlciB0aGFuIDAnKTtcblx0XHR9XG5cblx0XHR0aGlzLm1heFNpemUgPSBvcHRpb25zLm1heFNpemU7XG5cdFx0dGhpcy5vbkV2aWN0aW9uID0gb3B0aW9ucy5vbkV2aWN0aW9uO1xuXHRcdHRoaXMuY2FjaGUgPSBuZXcgTWFwKCk7XG5cdFx0dGhpcy5vbGRDYWNoZSA9IG5ldyBNYXAoKTtcblx0XHR0aGlzLl9zaXplID0gMDtcblx0fVxuXG5cdF9zZXQoa2V5LCB2YWx1ZSkge1xuXHRcdHRoaXMuY2FjaGUuc2V0KGtleSwgdmFsdWUpO1xuXHRcdHRoaXMuX3NpemUrKztcblxuXHRcdGlmICh0aGlzLl9zaXplID49IHRoaXMubWF4U2l6ZSkge1xuXHRcdFx0dGhpcy5fc2l6ZSA9IDA7XG5cblx0XHRcdGlmICh0eXBlb2YgdGhpcy5vbkV2aWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHRoaXMub2xkQ2FjaGUuZW50cmllcygpKSB7XG5cdFx0XHRcdFx0dGhpcy5vbkV2aWN0aW9uKGtleSwgdmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMub2xkQ2FjaGUgPSB0aGlzLmNhY2hlO1xuXHRcdFx0dGhpcy5jYWNoZSA9IG5ldyBNYXAoKTtcblx0XHR9XG5cdH1cblxuXHRnZXQoa2V5KSB7XG5cdFx0aWYgKHRoaXMuY2FjaGUuaGFzKGtleSkpIHtcblx0XHRcdHJldHVybiB0aGlzLmNhY2hlLmdldChrZXkpO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLm9sZENhY2hlLmhhcyhrZXkpKSB7XG5cdFx0XHRjb25zdCB2YWx1ZSA9IHRoaXMub2xkQ2FjaGUuZ2V0KGtleSk7XG5cdFx0XHR0aGlzLm9sZENhY2hlLmRlbGV0ZShrZXkpO1xuXHRcdFx0dGhpcy5fc2V0KGtleSwgdmFsdWUpO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblx0fVxuXG5cdHNldChrZXksIHZhbHVlKSB7XG5cdFx0aWYgKHRoaXMuY2FjaGUuaGFzKGtleSkpIHtcblx0XHRcdHRoaXMuY2FjaGUuc2V0KGtleSwgdmFsdWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9zZXQoa2V5LCB2YWx1ZSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRoYXMoa2V5KSB7XG5cdFx0cmV0dXJuIHRoaXMuY2FjaGUuaGFzKGtleSkgfHwgdGhpcy5vbGRDYWNoZS5oYXMoa2V5KTtcblx0fVxuXG5cdHBlZWsoa2V5KSB7XG5cdFx0aWYgKHRoaXMuY2FjaGUuaGFzKGtleSkpIHtcblx0XHRcdHJldHVybiB0aGlzLmNhY2hlLmdldChrZXkpO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLm9sZENhY2hlLmhhcyhrZXkpKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vbGRDYWNoZS5nZXQoa2V5KTtcblx0XHR9XG5cdH1cblxuXHRkZWxldGUoa2V5KSB7XG5cdFx0Y29uc3QgZGVsZXRlZCA9IHRoaXMuY2FjaGUuZGVsZXRlKGtleSk7XG5cdFx0aWYgKGRlbGV0ZWQpIHtcblx0XHRcdHRoaXMuX3NpemUtLTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5vbGRDYWNoZS5kZWxldGUoa2V5KSB8fCBkZWxldGVkO1xuXHR9XG5cblx0Y2xlYXIoKSB7XG5cdFx0dGhpcy5jYWNoZS5jbGVhcigpO1xuXHRcdHRoaXMub2xkQ2FjaGUuY2xlYXIoKTtcblx0XHR0aGlzLl9zaXplID0gMDtcblx0fVxuXG5cdCoga2V5cygpIHtcblx0XHRmb3IgKGNvbnN0IFtrZXldIG9mIHRoaXMpIHtcblx0XHRcdHlpZWxkIGtleTtcblx0XHR9XG5cdH1cblxuXHQqIHZhbHVlcygpIHtcblx0XHRmb3IgKGNvbnN0IFssIHZhbHVlXSBvZiB0aGlzKSB7XG5cdFx0XHR5aWVsZCB2YWx1ZTtcblx0XHR9XG5cdH1cblxuXHQqIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuXHRcdGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLmNhY2hlKSB7XG5cdFx0XHR5aWVsZCBpdGVtO1xuXHRcdH1cblxuXHRcdGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLm9sZENhY2hlKSB7XG5cdFx0XHRjb25zdCBba2V5XSA9IGl0ZW07XG5cdFx0XHRpZiAoIXRoaXMuY2FjaGUuaGFzKGtleSkpIHtcblx0XHRcdFx0eWllbGQgaXRlbTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRnZXQgc2l6ZSgpIHtcblx0XHRsZXQgb2xkQ2FjaGVTaXplID0gMDtcblx0XHRmb3IgKGNvbnN0IGtleSBvZiB0aGlzLm9sZENhY2hlLmtleXMoKSkge1xuXHRcdFx0aWYgKCF0aGlzLmNhY2hlLmhhcyhrZXkpKSB7XG5cdFx0XHRcdG9sZENhY2hlU2l6ZSsrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBNYXRoLm1pbih0aGlzLl9zaXplICsgb2xkQ2FjaGVTaXplLCB0aGlzLm1heFNpemUpO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUXVpY2tMUlU7XG4iXSwibmFtZXMiOlsiUXVpY2tMUlUiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJtYXhTaXplIiwiVHlwZUVycm9yIiwib25FdmljdGlvbiIsImNhY2hlIiwiTWFwIiwib2xkQ2FjaGUiLCJfc2l6ZSIsIl9zZXQiLCJrZXkiLCJ2YWx1ZSIsInNldCIsImVudHJpZXMiLCJnZXQiLCJoYXMiLCJkZWxldGUiLCJwZWVrIiwiZGVsZXRlZCIsImNsZWFyIiwia2V5cyIsInZhbHVlcyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiaXRlbSIsInNpemUiLCJvbGRDYWNoZVNpemUiLCJNYXRoIiwibWluIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-server-sdk/node_modules/quick-lru/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/AccessToken.js":
/*!*************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/AccessToken.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TokenVerifier = exports.AccessToken = void 0;\nconst jwt = __importStar(__webpack_require__(/*! jsonwebtoken */ \"(action-browser)/./node_modules/jsonwebtoken/index.js\"));\n// 6 hours\nconst defaultTTL = 6 * 60 * 60;\nclass AccessToken {\n    /**\n     * Creates a new AccessToken\n     * @param apiKey API Key, can be set in env LIVEKIT_API_KEY\n     * @param apiSecret Secret, can be set in env LIVEKIT_API_SECRET\n     */ constructor(apiKey, apiSecret, options){\n        if (!apiKey) {\n            apiKey = process.env.LIVEKIT_API_KEY;\n        }\n        if (!apiSecret) {\n            apiSecret = process.env.LIVEKIT_API_SECRET;\n        }\n        if (!apiKey || !apiSecret) {\n            throw Error(\"api-key and api-secret must be set\");\n        } else if (typeof document !== \"undefined\") {\n            // check against document rather than window because deno provides window\n            console.error(\"You should not include your API secret in your web client bundle.\\n\\n\" + \"Your web client should request a token from your backend server which should then use \" + \"the API secret to generate a token. See https://docs.livekit.io/client/connect/\");\n        }\n        this.apiKey = apiKey;\n        this.apiSecret = apiSecret;\n        this.grants = {};\n        this.identity = options === null || options === void 0 ? void 0 : options.identity;\n        this.ttl = (options === null || options === void 0 ? void 0 : options.ttl) || defaultTTL;\n        if (options === null || options === void 0 ? void 0 : options.metadata) {\n            this.metadata = options.metadata;\n        }\n        if (options === null || options === void 0 ? void 0 : options.name) {\n            this.name = options.name;\n        }\n    }\n    /**\n     * Adds a video grant to this token.\n     * @param grant\n     */ addGrant(grant) {\n        this.grants.video = grant;\n    }\n    /**\n     * Set metadata to be passed to the Participant, used only when joining the room\n     */ set metadata(md) {\n        this.grants.metadata = md;\n    }\n    set name(name) {\n        this.grants.name = name;\n    }\n    get sha256() {\n        return this.grants.sha256;\n    }\n    set sha256(sha) {\n        this.grants.sha256 = sha;\n    }\n    /**\n     * @returns JWT encoded token\n     */ toJwt() {\n        // TODO: check for video grant validity\n        var _a;\n        const opts = {\n            issuer: this.apiKey,\n            expiresIn: this.ttl,\n            notBefore: 0\n        };\n        if (this.identity) {\n            opts.subject = this.identity;\n            opts.jwtid = this.identity;\n        } else if ((_a = this.grants.video) === null || _a === void 0 ? void 0 : _a.roomJoin) {\n            throw Error(\"identity is required for join but not set\");\n        }\n        return jwt.sign(this.grants, this.apiSecret, opts);\n    }\n}\nexports.AccessToken = AccessToken;\nclass TokenVerifier {\n    constructor(apiKey, apiSecret){\n        this.apiKey = apiKey;\n        this.apiSecret = apiSecret;\n    }\n    verify(token) {\n        const decoded = jwt.verify(token, this.apiSecret, {\n            issuer: this.apiKey\n        });\n        if (!decoded) {\n            throw Error(\"invalid token\");\n        }\n        return decoded;\n    }\n}\nexports.TokenVerifier = TokenVerifier; //# sourceMappingURL=AccessToken.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/AccessToken.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/EgressClient.js":
/*!**************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/EgressClient.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.EgressClient = void 0;\nconst livekit_egress_1 = __webpack_require__(/*! ./proto/livekit_egress */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js\");\nconst ServiceBase_1 = __importDefault(__webpack_require__(/*! ./ServiceBase */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/ServiceBase.js\"));\nconst TwirpRPC_1 = __webpack_require__(/*! ./TwirpRPC */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js\");\nconst svc = \"Egress\";\n/**\n * Client to access Egress APIs\n */ class EgressClient extends ServiceBase_1.default {\n    /**\n     * @param host hostname including protocol. i.e. 'https://cluster.livekit.io'\n     * @param apiKey API Key, can be set in env var LIVEKIT_API_KEY\n     * @param secret API Secret, can be set in env var LIVEKIT_API_SECRET\n     */ constructor(host, apiKey, secret){\n        super(apiKey, secret);\n        this.rpc = new TwirpRPC_1.TwirpRpc(host, TwirpRPC_1.livekitPackage);\n    }\n    startRoomCompositeEgress(roomName, output, optsOrLayout, options, audioOnly, videoOnly, customBaseUrl) {\n        return __awaiter(this, void 0, void 0, function*() {\n            let layout;\n            if (optsOrLayout !== undefined) {\n                if (typeof optsOrLayout === \"string\") {\n                    layout = optsOrLayout;\n                } else {\n                    const opts = optsOrLayout;\n                    layout = opts.layout;\n                    options = opts.encodingOptions;\n                    audioOnly = opts.audioOnly;\n                    videoOnly = opts.videoOnly;\n                    customBaseUrl = opts.customBaseUrl;\n                }\n            }\n            layout !== null && layout !== void 0 ? layout : layout = \"\";\n            audioOnly !== null && audioOnly !== void 0 ? audioOnly : audioOnly = false;\n            videoOnly !== null && videoOnly !== void 0 ? videoOnly : videoOnly = false;\n            customBaseUrl !== null && customBaseUrl !== void 0 ? customBaseUrl : customBaseUrl = \"\";\n            const { file, stream, segments, preset, advanced, fileOutputs, streamOutputs, segmentOutputs } = this.getOutputParams(output, options);\n            const req = livekit_egress_1.RoomCompositeEgressRequest.toJSON({\n                roomName,\n                layout,\n                audioOnly,\n                videoOnly,\n                customBaseUrl,\n                file,\n                stream,\n                segments,\n                preset,\n                advanced,\n                fileOutputs,\n                streamOutputs,\n                segmentOutputs\n            });\n            const data = yield this.rpc.request(svc, \"StartRoomCompositeEgress\", req, this.authHeader({\n                roomRecord: true\n            }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * @param url url\n     * @param output file or stream output\n     * @param opts WebOptions\n     */ startWebEgress(url, output, opts) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const audioOnly = (opts === null || opts === void 0 ? void 0 : opts.audioOnly) || false;\n            const videoOnly = (opts === null || opts === void 0 ? void 0 : opts.videoOnly) || false;\n            const awaitStartSignal = (opts === null || opts === void 0 ? void 0 : opts.awaitStartSignal) || false;\n            const { file, stream, segments, preset, advanced, fileOutputs, streamOutputs, segmentOutputs } = this.getOutputParams(output, opts === null || opts === void 0 ? void 0 : opts.encodingOptions);\n            const req = livekit_egress_1.WebEgressRequest.toJSON({\n                url,\n                audioOnly,\n                videoOnly,\n                awaitStartSignal,\n                file,\n                stream,\n                segments,\n                preset,\n                advanced,\n                fileOutputs,\n                streamOutputs,\n                segmentOutputs\n            });\n            const data = yield this.rpc.request(svc, \"StartWebEgress\", req, this.authHeader({\n                roomRecord: true\n            }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * Export a participant's audio and video tracks,\n     *\n     * @param roomName room name\n     * @param output one or more outputs\n     * @param opts ParticipantEgressOptions\n     */ startParticipantEgress(roomName, identity, output, opts) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const { preset, advanced, fileOutputs, streamOutputs, segmentOutputs } = this.getOutputParams(output, opts === null || opts === void 0 ? void 0 : opts.encodingOptions);\n            const req = livekit_egress_1.ParticipantEgressRequest.toJSON({\n                roomName,\n                identity,\n                preset,\n                advanced,\n                fileOutputs,\n                streamOutputs,\n                segmentOutputs\n            });\n            const data = yield this.rpc.request(svc, \"StartParticipantEgress\", req, this.authHeader({\n                roomRecord: true\n            }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    startTrackCompositeEgress(roomName, output, optsOrAudioTrackId, videoTrackId, options) {\n        return __awaiter(this, void 0, void 0, function*() {\n            let audioTrackId;\n            if (optsOrAudioTrackId !== undefined) {\n                if (typeof optsOrAudioTrackId === \"string\") {\n                    audioTrackId = optsOrAudioTrackId;\n                } else {\n                    const opts = optsOrAudioTrackId;\n                    audioTrackId = opts.audioTrackId;\n                    videoTrackId = opts.videoTrackId;\n                    options = opts.encodingOptions;\n                }\n            }\n            audioTrackId !== null && audioTrackId !== void 0 ? audioTrackId : audioTrackId = \"\";\n            videoTrackId !== null && videoTrackId !== void 0 ? videoTrackId : videoTrackId = \"\";\n            const { file, stream, segments, preset, advanced, fileOutputs, streamOutputs, segmentOutputs } = this.getOutputParams(output, options);\n            const req = livekit_egress_1.TrackCompositeEgressRequest.toJSON({\n                roomName,\n                audioTrackId,\n                videoTrackId,\n                file,\n                stream,\n                segments,\n                preset,\n                advanced,\n                fileOutputs,\n                streamOutputs,\n                segmentOutputs\n            });\n            const data = yield this.rpc.request(svc, \"StartTrackCompositeEgress\", req, this.authHeader({\n                roomRecord: true\n            }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    isEncodedOutputs(output) {\n        return output.file !== undefined || output.stream !== undefined || output.segments !== undefined;\n    }\n    isEncodedFileOutput(output) {\n        return output.filepath !== undefined || output.fileType !== undefined;\n    }\n    isSegmentedFileOutput(output) {\n        return output.filenamePrefix !== undefined || output.playlistName !== undefined || output.filenameSuffix !== undefined;\n    }\n    isStreamOutput(output) {\n        return output.protocol !== undefined || output.urls !== undefined;\n    }\n    getOutputParams(output, options) {\n        let file;\n        let fileOutputs;\n        let stream;\n        let streamOutputs;\n        let segments;\n        let segmentOutputs;\n        let preset;\n        let advanced;\n        if (this.isEncodedOutputs(output)) {\n            if (output.file !== undefined) {\n                fileOutputs = [\n                    output.file\n                ];\n            }\n            if (output.stream !== undefined) {\n                streamOutputs = [\n                    output.stream\n                ];\n            }\n            if (output.segments !== undefined) {\n                segmentOutputs = [\n                    output.segments\n                ];\n            }\n        } else if (this.isEncodedFileOutput(output)) {\n            file = output;\n            fileOutputs = [\n                file\n            ];\n        } else if (this.isSegmentedFileOutput(output)) {\n            segments = output;\n            segmentOutputs = [\n                segments\n            ];\n        } else if (this.isStreamOutput(output)) {\n            stream = output;\n            streamOutputs = [\n                stream\n            ];\n        }\n        if (options) {\n            if (typeof options === \"number\") {\n                preset = options;\n            } else {\n                advanced = options;\n            }\n        }\n        return {\n            file,\n            stream,\n            segments,\n            preset,\n            advanced,\n            fileOutputs,\n            streamOutputs,\n            segmentOutputs\n        };\n    }\n    /**\n     * @param roomName room name\n     * @param output file or websocket output\n     * @param trackId track Id\n     */ startTrackEgress(roomName, output, trackId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            let file;\n            let websocketUrl;\n            if (typeof output === \"string\") {\n                websocketUrl = output;\n            } else {\n                file = output;\n            }\n            const req = livekit_egress_1.TrackEgressRequest.toJSON({\n                roomName,\n                trackId,\n                file,\n                websocketUrl\n            });\n            const data = yield this.rpc.request(svc, \"StartTrackEgress\", req, this.authHeader({\n                roomRecord: true\n            }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * @param egressId\n     * @param layout\n     */ updateLayout(egressId, layout) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const data = yield this.rpc.request(svc, \"UpdateLayout\", livekit_egress_1.UpdateLayoutRequest.toJSON({\n                egressId,\n                layout\n            }), this.authHeader({\n                roomRecord: true\n            }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * @param egressId\n     * @param addOutputUrls\n     * @param removeOutputUrls\n     */ updateStream(egressId, addOutputUrls, removeOutputUrls) {\n        return __awaiter(this, void 0, void 0, function*() {\n            addOutputUrls !== null && addOutputUrls !== void 0 ? addOutputUrls : addOutputUrls = [];\n            removeOutputUrls !== null && removeOutputUrls !== void 0 ? removeOutputUrls : removeOutputUrls = [];\n            const data = yield this.rpc.request(svc, \"UpdateStream\", livekit_egress_1.UpdateStreamRequest.toJSON({\n                egressId,\n                addOutputUrls,\n                removeOutputUrls\n            }), this.authHeader({\n                roomRecord: true\n            }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * @param roomName list egress for one room only\n     */ listEgress(options) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            let req = {};\n            if (typeof options === \"string\") {\n                req.roomName = options;\n            } else if (options !== undefined) {\n                req = options;\n            }\n            const data = yield this.rpc.request(svc, \"ListEgress\", livekit_egress_1.ListEgressRequest.toJSON(req), this.authHeader({\n                roomRecord: true\n            }));\n            return (_a = livekit_egress_1.ListEgressResponse.fromJSON(data).items) !== null && _a !== void 0 ? _a : [];\n        });\n    }\n    /**\n     * @param egressId\n     */ stopEgress(egressId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const data = yield this.rpc.request(svc, \"StopEgress\", livekit_egress_1.StopEgressRequest.toJSON({\n                egressId\n            }), this.authHeader({\n                roomRecord: true\n            }));\n            return livekit_egress_1.EgressInfo.fromJSON(data);\n        });\n    }\n}\nexports.EgressClient = EgressClient; //# sourceMappingURL=EgressClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/EgressClient.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/IngressClient.js":
/*!***************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/IngressClient.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.IngressClient = void 0;\nconst livekit_ingress_1 = __webpack_require__(/*! ./proto/livekit_ingress */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js\");\nconst ServiceBase_1 = __importDefault(__webpack_require__(/*! ./ServiceBase */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/ServiceBase.js\"));\nconst TwirpRPC_1 = __webpack_require__(/*! ./TwirpRPC */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js\");\nconst svc = \"Ingress\";\n/**\n * Client to access Ingress APIs\n */ class IngressClient extends ServiceBase_1.default {\n    /**\n     * @param host hostname including protocol. i.e. 'https://cluster.livekit.io'\n     * @param apiKey API Key, can be set in env var LIVEKIT_API_KEY\n     * @param secret API Secret, can be set in env var LIVEKIT_API_SECRET\n     */ constructor(host, apiKey, secret){\n        super(apiKey, secret);\n        this.rpc = new TwirpRPC_1.TwirpRpc(host, TwirpRPC_1.livekitPackage);\n    }\n    /**\n     * @param inputType protocol for the ingress\n     * @param opts CreateIngressOptions\n     */ createIngress(inputType, opts) {\n        return __awaiter(this, void 0, void 0, function*() {\n            let name = \"\";\n            let roomName = \"\";\n            let participantName = \"\";\n            let participantIdentity = \"\";\n            let bypassTranscoding = false;\n            let url = \"\";\n            let audio;\n            let video;\n            if (opts !== undefined) {\n                name = opts.name || \"\";\n                roomName = opts.roomName || \"\";\n                participantName = opts.participantName || \"\";\n                participantIdentity = opts.participantIdentity || \"\";\n                bypassTranscoding = opts.bypassTranscoding || false;\n                url = opts.url || \"\";\n                audio = opts.audio;\n                video = opts.video;\n            }\n            const req = livekit_ingress_1.CreateIngressRequest.toJSON({\n                inputType,\n                name,\n                roomName,\n                participantIdentity,\n                participantName,\n                bypassTranscoding,\n                url,\n                audio,\n                video\n            });\n            const data = yield this.rpc.request(svc, \"CreateIngress\", req, this.authHeader({\n                ingressAdmin: true\n            }));\n            return livekit_ingress_1.IngressInfo.fromJSON(data);\n        });\n    }\n    /**\n     * @param ingressId ID of the ingress to update\n     * @param opts UpdateIngressOptions\n     */ updateIngress(ingressId, opts) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const name = opts.name || \"\";\n            const roomName = opts.roomName || \"\";\n            const participantName = opts.participantName || \"\";\n            const participantIdentity = opts.participantIdentity || \"\";\n            const { audio, video, bypassTranscoding } = opts;\n            const req = livekit_ingress_1.UpdateIngressRequest.toJSON({\n                ingressId,\n                name,\n                roomName,\n                participantIdentity,\n                participantName,\n                bypassTranscoding,\n                audio,\n                video\n            });\n            const data = yield this.rpc.request(svc, \"UpdateIngress\", req, this.authHeader({\n                ingressAdmin: true\n            }));\n            return livekit_ingress_1.IngressInfo.fromJSON(data);\n        });\n    }\n    listIngress(arg) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            let req = {};\n            if (typeof arg === \"string\") {\n                req.roomName = arg;\n            } else if (arg) {\n                req = arg;\n            }\n            const data = yield this.rpc.request(svc, \"ListIngress\", livekit_ingress_1.ListIngressRequest.toJSON(req), this.authHeader({\n                ingressAdmin: true\n            }));\n            return (_a = livekit_ingress_1.ListIngressResponse.fromJSON(data).items) !== null && _a !== void 0 ? _a : [];\n        });\n    }\n    /**\n     * @param ingressId ingress to delete\n     */ deleteIngress(ingressId) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const data = yield this.rpc.request(svc, \"DeleteIngress\", livekit_ingress_1.DeleteIngressRequest.toJSON({\n                ingressId\n            }), this.authHeader({\n                ingressAdmin: true\n            }));\n            return livekit_ingress_1.IngressInfo.fromJSON(data);\n        });\n    }\n}\nexports.IngressClient = IngressClient; //# sourceMappingURL=IngressClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/IngressClient.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/RoomServiceClient.js":
/*!*******************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/RoomServiceClient.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RoomServiceClient = void 0;\nconst livekit_models_1 = __webpack_require__(/*! ./proto/livekit_models */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nconst livekit_room_1 = __webpack_require__(/*! ./proto/livekit_room */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_room.js\");\nconst ServiceBase_1 = __importDefault(__webpack_require__(/*! ./ServiceBase */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/ServiceBase.js\"));\nconst TwirpRPC_1 = __webpack_require__(/*! ./TwirpRPC */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js\");\nconst svc = \"RoomService\";\n/**\n * Client to access Room APIs\n */ class RoomServiceClient extends ServiceBase_1.default {\n    /**\n     *\n     * @param host hostname including protocol. i.e. 'https://cluster.livekit.io'\n     * @param apiKey API Key, can be set in env var LIVEKIT_API_KEY\n     * @param secret API Secret, can be set in env var LIVEKIT_API_SECRET\n     */ constructor(host, apiKey, secret){\n        super(apiKey, secret);\n        this.rpc = new TwirpRPC_1.TwirpRpc(host, TwirpRPC_1.livekitPackage);\n    }\n    /**\n     * Creates a new room. Explicit room creation is not required, since rooms will\n     * be automatically created when the first participant joins. This method can be\n     * used to customize room settings.\n     * @param options\n     */ createRoom(options) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const data = yield this.rpc.request(svc, \"CreateRoom\", livekit_room_1.CreateRoomRequest.toJSON(livekit_room_1.CreateRoomRequest.fromPartial(options)), this.authHeader({\n                roomCreate: true\n            }));\n            return livekit_models_1.Room.fromJSON(data);\n        });\n    }\n    /**\n     * List active rooms\n     * @param names when undefined or empty, list all rooms.\n     *              otherwise returns rooms with matching names\n     * @returns\n     */ listRooms(names) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            const data = yield this.rpc.request(svc, \"ListRooms\", livekit_room_1.ListRoomsRequest.toJSON({\n                names: names !== null && names !== void 0 ? names : []\n            }), this.authHeader({\n                roomList: true\n            }));\n            const res = livekit_room_1.ListRoomsResponse.fromJSON(data);\n            return (_a = res.rooms) !== null && _a !== void 0 ? _a : [];\n        });\n    }\n    deleteRoom(room) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.rpc.request(svc, \"DeleteRoom\", livekit_room_1.DeleteRoomRequest.toJSON({\n                room\n            }), this.authHeader({\n                roomCreate: true\n            }));\n        });\n    }\n    /**\n     * Update metadata of a room\n     * @param room name of the room\n     * @param metadata the new metadata for the room\n     */ updateRoomMetadata(room, metadata) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const data = yield this.rpc.request(svc, \"UpdateRoomMetadata\", livekit_room_1.UpdateRoomMetadataRequest.toJSON({\n                room,\n                metadata\n            }), this.authHeader({\n                roomAdmin: true,\n                room\n            }));\n            return livekit_models_1.Room.fromJSON(data);\n        });\n    }\n    /**\n     * List participants in a room\n     * @param room name of the room\n     */ listParticipants(room) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            const data = yield this.rpc.request(svc, \"ListParticipants\", livekit_room_1.ListParticipantsRequest.toJSON({\n                room\n            }), this.authHeader({\n                roomAdmin: true,\n                room\n            }));\n            const res = livekit_room_1.ListParticipantsResponse.fromJSON(data);\n            return (_a = res.participants) !== null && _a !== void 0 ? _a : [];\n        });\n    }\n    /**\n     * Get information on a specific participant, including the tracks that participant\n     * has published\n     * @param room name of the room\n     * @param identity identity of the participant to return\n     */ getParticipant(room, identity) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const data = yield this.rpc.request(svc, \"GetParticipant\", livekit_room_1.RoomParticipantIdentity.toJSON({\n                room,\n                identity\n            }), this.authHeader({\n                roomAdmin: true,\n                room\n            }));\n            return livekit_models_1.ParticipantInfo.fromJSON(data);\n        });\n    }\n    /**\n     * Removes a participant in the room. This will disconnect the participant\n     * and will emit a Disconnected event for that participant.\n     * Even after being removed, the participant can still re-join the room.\n     * @param room\n     * @param identity\n     */ removeParticipant(room, identity) {\n        return __awaiter(this, void 0, void 0, function*() {\n            yield this.rpc.request(svc, \"RemoveParticipant\", livekit_room_1.RoomParticipantIdentity.toJSON({\n                room,\n                identity\n            }), this.authHeader({\n                roomAdmin: true,\n                room\n            }));\n        });\n    }\n    /**\n     * Mutes a track that the participant has published.\n     * @param room\n     * @param identity\n     * @param trackSid sid of the track to be muted\n     * @param muted true to mute, false to unmute\n     */ mutePublishedTrack(room, identity, trackSid, muted) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const req = livekit_room_1.MuteRoomTrackRequest.toJSON({\n                room,\n                identity,\n                trackSid,\n                muted\n            });\n            const data = yield this.rpc.request(svc, \"MutePublishedTrack\", req, this.authHeader({\n                roomAdmin: true,\n                room\n            }));\n            const res = livekit_room_1.MuteRoomTrackResponse.fromJSON(data);\n            return res.track;\n        });\n    }\n    /**\n     * Updates a participant's metadata or permissions\n     * @param room\n     * @param identity\n     * @param metadata optional, metadata to update\n     * @param permission optional, new permissions to assign to participant\n     * @param name optional, new name for participant\n     */ updateParticipant(room, identity, metadata, permission, name) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const req = {\n                room,\n                identity,\n                metadata: metadata || \"\",\n                name: name || \"\"\n            };\n            if (permission) {\n                req.permission = livekit_models_1.ParticipantPermission.fromPartial(permission);\n            }\n            const data = yield this.rpc.request(svc, \"UpdateParticipant\", livekit_room_1.UpdateParticipantRequest.toJSON(req), this.authHeader({\n                roomAdmin: true,\n                room\n            }));\n            return livekit_models_1.ParticipantInfo.fromJSON(data);\n        });\n    }\n    /**\n     * Updates a participant's subscription to tracks\n     * @param room\n     * @param identity\n     * @param trackSids\n     * @param subscribe true to subscribe, false to unsubscribe\n     */ updateSubscriptions(room, identity, trackSids, subscribe) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const req = livekit_room_1.UpdateSubscriptionsRequest.toJSON({\n                room,\n                identity,\n                trackSids,\n                subscribe,\n                participantTracks: []\n            });\n            yield this.rpc.request(svc, \"UpdateSubscriptions\", req, this.authHeader({\n                roomAdmin: true,\n                room\n            }));\n        });\n    }\n    sendData(room, data, kind, options = {}) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const destinationSids = Array.isArray(options) ? options : options.destinationSids;\n            const topic = Array.isArray(options) ? undefined : options.topic;\n            const req = {\n                room,\n                data,\n                kind,\n                destinationSids: destinationSids !== null && destinationSids !== void 0 ? destinationSids : [],\n                topic\n            };\n            if (!Array.isArray(options) && options.destinationIdentities) {\n                req.destinationIdentities = options.destinationIdentities;\n            }\n            yield this.rpc.request(svc, \"SendData\", livekit_room_1.SendDataRequest.toJSON(req), this.authHeader({\n                roomAdmin: true,\n                room\n            }));\n        });\n    }\n}\nexports.RoomServiceClient = RoomServiceClient; //# sourceMappingURL=RoomServiceClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/RoomServiceClient.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/ServiceBase.js":
/*!*************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/ServiceBase.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst AccessToken_1 = __webpack_require__(/*! ./AccessToken */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/AccessToken.js\");\n/**\n * Utilities to handle authentication\n */ class ServiceBase {\n    /**\n     * @param apiKey API Key.\n     * @param secret API Secret.\n     * @param ttl token TTL\n     */ constructor(apiKey, secret, ttl){\n        this.apiKey = apiKey;\n        this.secret = secret;\n        this.ttl = ttl || \"10m\";\n    }\n    authHeader(grant) {\n        const at = new AccessToken_1.AccessToken(this.apiKey, this.secret, {\n            ttl: this.ttl\n        });\n        at.addGrant(grant);\n        return {\n            Authorization: `Bearer ${at.toJwt()}`\n        };\n    }\n}\nexports[\"default\"] = ServiceBase; //# sourceMappingURL=ServiceBase.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9saXZla2l0LXNlcnZlci1zZGsvZGlzdC9TZXJ2aWNlQmFzZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxnQkFBZ0JDLG1CQUFPQSxDQUFDLDZGQUFlO0FBQzdDOztDQUVDLEdBQ0QsTUFBTUM7SUFDRjs7OztLQUlDLEdBQ0RDLFlBQVlDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxHQUFHLENBQUU7UUFDN0IsSUFBSSxDQUFDRixNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDQyxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDQyxHQUFHLEdBQUdBLE9BQU87SUFDdEI7SUFDQUMsV0FBV0MsS0FBSyxFQUFFO1FBQ2QsTUFBTUMsS0FBSyxJQUFJVCxjQUFjVSxXQUFXLENBQUMsSUFBSSxDQUFDTixNQUFNLEVBQUUsSUFBSSxDQUFDQyxNQUFNLEVBQUU7WUFBRUMsS0FBSyxJQUFJLENBQUNBLEdBQUc7UUFBQztRQUNuRkcsR0FBR0UsUUFBUSxDQUFDSDtRQUNaLE9BQU87WUFDSEksZUFBZSxDQUFDLE9BQU8sRUFBRUgsR0FBR0ksS0FBSyxHQUFHLENBQUM7UUFDekM7SUFDSjtBQUNKO0FBQ0FmLGtCQUFlLEdBQUdJLGFBQ2xCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0cmVhbWluZy12aWRlby8uL25vZGVfbW9kdWxlcy9saXZla2l0LXNlcnZlci1zZGsvZGlzdC9TZXJ2aWNlQmFzZS5qcz9lZjdiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgQWNjZXNzVG9rZW5fMSA9IHJlcXVpcmUoXCIuL0FjY2Vzc1Rva2VuXCIpO1xuLyoqXG4gKiBVdGlsaXRpZXMgdG8gaGFuZGxlIGF1dGhlbnRpY2F0aW9uXG4gKi9cbmNsYXNzIFNlcnZpY2VCYXNlIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gYXBpS2V5IEFQSSBLZXkuXG4gICAgICogQHBhcmFtIHNlY3JldCBBUEkgU2VjcmV0LlxuICAgICAqIEBwYXJhbSB0dGwgdG9rZW4gVFRMXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYXBpS2V5LCBzZWNyZXQsIHR0bCkge1xuICAgICAgICB0aGlzLmFwaUtleSA9IGFwaUtleTtcbiAgICAgICAgdGhpcy5zZWNyZXQgPSBzZWNyZXQ7XG4gICAgICAgIHRoaXMudHRsID0gdHRsIHx8ICcxMG0nO1xuICAgIH1cbiAgICBhdXRoSGVhZGVyKGdyYW50KSB7XG4gICAgICAgIGNvbnN0IGF0ID0gbmV3IEFjY2Vzc1Rva2VuXzEuQWNjZXNzVG9rZW4odGhpcy5hcGlLZXksIHRoaXMuc2VjcmV0LCB7IHR0bDogdGhpcy50dGwgfSk7XG4gICAgICAgIGF0LmFkZEdyYW50KGdyYW50KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHthdC50b0p3dCgpfWAsXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gU2VydmljZUJhc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TZXJ2aWNlQmFzZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJBY2Nlc3NUb2tlbl8xIiwicmVxdWlyZSIsIlNlcnZpY2VCYXNlIiwiY29uc3RydWN0b3IiLCJhcGlLZXkiLCJzZWNyZXQiLCJ0dGwiLCJhdXRoSGVhZGVyIiwiZ3JhbnQiLCJhdCIsIkFjY2Vzc1Rva2VuIiwiYWRkR3JhbnQiLCJBdXRob3JpemF0aW9uIiwidG9Kd3QiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/ServiceBase.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js":
/*!**********************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/TwirpRPC.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TwirpRpc = exports.livekitPackage = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(action-browser)/./node_modules/axios/dist/node/axios.cjs\"));\nconst camelcase_keys_1 = __importDefault(__webpack_require__(/*! camelcase-keys */ \"(action-browser)/./node_modules/livekit-server-sdk/node_modules/camelcase-keys/index.js\"));\n// twirp RPC adapter for client implementation\nconst defaultPrefix = \"/twirp\";\nexports.livekitPackage = \"livekit\";\n/**\n * JSON based Twirp V7 RPC\n */ class TwirpRpc {\n    constructor(host, pkg, prefix){\n        if (host.startsWith(\"ws\")) {\n            host = host.replace(\"ws\", \"http\");\n        }\n        this.host = host;\n        this.pkg = pkg;\n        this.prefix = prefix || defaultPrefix;\n        this.instance = axios_1.default.create({\n            baseURL: host\n        });\n    }\n    request(service, method, data, headers) {\n        return new Promise((resolve, reject)=>{\n            const path = `${this.prefix}/${this.pkg}.${service}/${method}`;\n            this.instance.post(path, data, {\n                headers\n            }).then((res)=>{\n                resolve(camelcase_keys_1.default(res.data, {\n                    deep: true\n                }));\n            }).catch(reject);\n        });\n    }\n}\nexports.TwirpRpc = TwirpRpc; //# sourceMappingURL=TwirpRPC.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9saXZla2l0LXNlcnZlci1zZGsvZGlzdC9Ud2lycFJQQy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixJQUFLLElBQUksSUFBSSxDQUFDQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdCQUFnQixHQUFHQSxzQkFBc0IsR0FBRyxLQUFLO0FBQ2pELE1BQU1JLFVBQVVULGdCQUFnQlUsbUJBQU9BLENBQUMsd0VBQU87QUFDL0MsTUFBTUMsbUJBQW1CWCxnQkFBZ0JVLG1CQUFPQSxDQUFDLCtHQUFnQjtBQUNqRSw4Q0FBOEM7QUFDOUMsTUFBTUUsZ0JBQWdCO0FBQ3RCUCxzQkFBc0IsR0FBRztBQUN6Qjs7Q0FFQyxHQUNELE1BQU1FO0lBQ0ZNLFlBQVlDLElBQUksRUFBRUMsR0FBRyxFQUFFQyxNQUFNLENBQUU7UUFDM0IsSUFBSUYsS0FBS0csVUFBVSxDQUFDLE9BQU87WUFDdkJILE9BQU9BLEtBQUtJLE9BQU8sQ0FBQyxNQUFNO1FBQzlCO1FBQ0EsSUFBSSxDQUFDSixJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDQyxHQUFHLEdBQUdBO1FBQ1gsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLFVBQVVKO1FBQ3hCLElBQUksQ0FBQ08sUUFBUSxHQUFHVixRQUFRVyxPQUFPLENBQUNDLE1BQU0sQ0FBQztZQUNuQ0MsU0FBU1I7UUFDYjtJQUNKO0lBQ0FTLFFBQVFDLE9BQU8sRUFBRUMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNwQyxPQUFPLElBQUlDLFFBQVEsQ0FBQ0MsU0FBU0M7WUFDekIsTUFBTUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDZixNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ0QsR0FBRyxDQUFDLENBQUMsRUFBRVMsUUFBUSxDQUFDLEVBQUVDLE9BQU8sQ0FBQztZQUM5RCxJQUFJLENBQUNOLFFBQVEsQ0FDUmEsSUFBSSxDQUFDRCxNQUFNTCxNQUFNO2dCQUFFQztZQUFRLEdBQzNCTSxJQUFJLENBQUMsQ0FBQ0M7Z0JBQ1BMLFFBQVFsQixpQkFBaUJTLE9BQU8sQ0FBQ2MsSUFBSVIsSUFBSSxFQUFFO29CQUFFUyxNQUFNO2dCQUFLO1lBQzVELEdBQ0tDLEtBQUssQ0FBQ047UUFDZjtJQUNKO0FBQ0o7QUFDQXpCLGdCQUFnQixHQUFHRSxVQUNuQixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdHJlYW1pbmctdmlkZW8vLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL2Rpc3QvVHdpcnBSUEMuanM/ZDY1NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVHdpcnBScGMgPSBleHBvcnRzLmxpdmVraXRQYWNrYWdlID0gdm9pZCAwO1xuY29uc3QgYXhpb3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYXhpb3NcIikpO1xuY29uc3QgY2FtZWxjYXNlX2tleXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiY2FtZWxjYXNlLWtleXNcIikpO1xuLy8gdHdpcnAgUlBDIGFkYXB0ZXIgZm9yIGNsaWVudCBpbXBsZW1lbnRhdGlvblxuY29uc3QgZGVmYXVsdFByZWZpeCA9ICcvdHdpcnAnO1xuZXhwb3J0cy5saXZla2l0UGFja2FnZSA9ICdsaXZla2l0Jztcbi8qKlxuICogSlNPTiBiYXNlZCBUd2lycCBWNyBSUENcbiAqL1xuY2xhc3MgVHdpcnBScGMge1xuICAgIGNvbnN0cnVjdG9yKGhvc3QsIHBrZywgcHJlZml4KSB7XG4gICAgICAgIGlmIChob3N0LnN0YXJ0c1dpdGgoJ3dzJykpIHtcbiAgICAgICAgICAgIGhvc3QgPSBob3N0LnJlcGxhY2UoJ3dzJywgJ2h0dHAnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhvc3QgPSBob3N0O1xuICAgICAgICB0aGlzLnBrZyA9IHBrZztcbiAgICAgICAgdGhpcy5wcmVmaXggPSBwcmVmaXggfHwgZGVmYXVsdFByZWZpeDtcbiAgICAgICAgdGhpcy5pbnN0YW5jZSA9IGF4aW9zXzEuZGVmYXVsdC5jcmVhdGUoe1xuICAgICAgICAgICAgYmFzZVVSTDogaG9zdCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlcXVlc3Qoc2VydmljZSwgbWV0aG9kLCBkYXRhLCBoZWFkZXJzKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXRoID0gYCR7dGhpcy5wcmVmaXh9LyR7dGhpcy5wa2d9LiR7c2VydmljZX0vJHttZXRob2R9YDtcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAucG9zdChwYXRoLCBkYXRhLCB7IGhlYWRlcnMgfSlcbiAgICAgICAgICAgICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShjYW1lbGNhc2Vfa2V5c18xLmRlZmF1bHQocmVzLmRhdGEsIHsgZGVlcDogdHJ1ZSB9KSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaChyZWplY3QpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLlR3aXJwUnBjID0gVHdpcnBScGM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ud2lycFJQQy5qcy5tYXAiXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVHdpcnBScGMiLCJsaXZla2l0UGFja2FnZSIsImF4aW9zXzEiLCJyZXF1aXJlIiwiY2FtZWxjYXNlX2tleXNfMSIsImRlZmF1bHRQcmVmaXgiLCJjb25zdHJ1Y3RvciIsImhvc3QiLCJwa2ciLCJwcmVmaXgiLCJzdGFydHNXaXRoIiwicmVwbGFjZSIsImluc3RhbmNlIiwiZGVmYXVsdCIsImNyZWF0ZSIsImJhc2VVUkwiLCJyZXF1ZXN0Iiwic2VydmljZSIsIm1ldGhvZCIsImRhdGEiLCJoZWFkZXJzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJwYXRoIiwicG9zdCIsInRoZW4iLCJyZXMiLCJkZWVwIiwiY2F0Y2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/TwirpRPC.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/WebhookReceiver.js":
/*!*****************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/WebhookReceiver.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WebhookReceiver = exports.authorizeHeader = void 0;\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\nconst AccessToken_1 = __webpack_require__(/*! ./AccessToken */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/AccessToken.js\");\nconst livekit_webhook_1 = __webpack_require__(/*! ./proto/livekit_webhook */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_webhook.js\");\nexports.authorizeHeader = \"Authorize\";\nclass WebhookReceiver {\n    constructor(apiKey, apiSecret){\n        this.verifier = new AccessToken_1.TokenVerifier(apiKey, apiSecret);\n    }\n    /**\n     *\n     * @param body string of the posted body\n     * @param authHeader `Authorization` header from the request\n     * @param skipAuth true to skip auth validation\n     * @returns\n     */ receive(body, authHeader, skipAuth = false) {\n        // verify token\n        if (!skipAuth) {\n            if (!authHeader) {\n                throw new Error(\"authorization header is empty\");\n            }\n            const claims = this.verifier.verify(authHeader);\n            // confirm sha\n            const hash = crypto_1.default.createHash(\"sha256\");\n            hash.update(body);\n            if (claims.sha256 !== hash.digest(\"base64\")) {\n                throw new Error(\"sha256 checksum of body does not match\");\n            }\n        }\n        return livekit_webhook_1.WebhookEvent.fromJSON(JSON.parse(body));\n    }\n}\nexports.WebhookReceiver = WebhookReceiver; //# sourceMappingURL=WebhookReceiver.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9saXZla2l0LXNlcnZlci1zZGsvZGlzdC9XZWJob29rUmVjZWl2ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsSUFBSyxJQUFJLElBQUksQ0FBQ0EsZUFBZSxJQUFLLFNBQVVDLEdBQUc7SUFDakUsT0FBTyxPQUFRQSxJQUFJQyxVQUFVLEdBQUlELE1BQU07UUFBRSxXQUFXQTtJQUFJO0FBQzVEO0FBQ0FFLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx1QkFBdUIsR0FBR0EsdUJBQXVCLEdBQUcsS0FBSztBQUN6RCxNQUFNSSxXQUFXVCxnQkFBZ0JVLG1CQUFPQSxDQUFDLHNCQUFRO0FBQ2pELE1BQU1DLGdCQUFnQkQsbUJBQU9BLENBQUMsNkZBQWU7QUFDN0MsTUFBTUUsb0JBQW9CRixtQkFBT0EsQ0FBQyxpSEFBeUI7QUFDM0RMLHVCQUF1QixHQUFHO0FBQzFCLE1BQU1FO0lBQ0ZNLFlBQVlDLE1BQU0sRUFBRUMsU0FBUyxDQUFFO1FBQzNCLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUlMLGNBQWNNLGFBQWEsQ0FBQ0gsUUFBUUM7SUFDNUQ7SUFDQTs7Ozs7O0tBTUMsR0FDREcsUUFBUUMsSUFBSSxFQUFFQyxVQUFVLEVBQUVDLFdBQVcsS0FBSyxFQUFFO1FBQ3hDLGVBQWU7UUFDZixJQUFJLENBQUNBLFVBQVU7WUFDWCxJQUFJLENBQUNELFlBQVk7Z0JBQ2IsTUFBTSxJQUFJRSxNQUFNO1lBQ3BCO1lBQ0EsTUFBTUMsU0FBUyxJQUFJLENBQUNQLFFBQVEsQ0FBQ1EsTUFBTSxDQUFDSjtZQUNwQyxjQUFjO1lBQ2QsTUFBTUssT0FBT2hCLFNBQVNpQixPQUFPLENBQUNDLFVBQVUsQ0FBQztZQUN6Q0YsS0FBS0csTUFBTSxDQUFDVDtZQUNaLElBQUlJLE9BQU9NLE1BQU0sS0FBS0osS0FBS0ssTUFBTSxDQUFDLFdBQVc7Z0JBQ3pDLE1BQU0sSUFBSVIsTUFBTTtZQUNwQjtRQUNKO1FBQ0EsT0FBT1Ysa0JBQWtCbUIsWUFBWSxDQUFDQyxRQUFRLENBQUNDLEtBQUtDLEtBQUssQ0FBQ2Y7SUFDOUQ7QUFDSjtBQUNBZCx1QkFBdUIsR0FBR0UsaUJBQzFCLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0cmVhbWluZy12aWRlby8uL25vZGVfbW9kdWxlcy9saXZla2l0LXNlcnZlci1zZGsvZGlzdC9XZWJob29rUmVjZWl2ZXIuanM/NzIyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV2ViaG9va1JlY2VpdmVyID0gZXhwb3J0cy5hdXRob3JpemVIZWFkZXIgPSB2b2lkIDA7XG5jb25zdCBjcnlwdG9fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiY3J5cHRvXCIpKTtcbmNvbnN0IEFjY2Vzc1Rva2VuXzEgPSByZXF1aXJlKFwiLi9BY2Nlc3NUb2tlblwiKTtcbmNvbnN0IGxpdmVraXRfd2ViaG9va18xID0gcmVxdWlyZShcIi4vcHJvdG8vbGl2ZWtpdF93ZWJob29rXCIpO1xuZXhwb3J0cy5hdXRob3JpemVIZWFkZXIgPSAnQXV0aG9yaXplJztcbmNsYXNzIFdlYmhvb2tSZWNlaXZlciB7XG4gICAgY29uc3RydWN0b3IoYXBpS2V5LCBhcGlTZWNyZXQpIHtcbiAgICAgICAgdGhpcy52ZXJpZmllciA9IG5ldyBBY2Nlc3NUb2tlbl8xLlRva2VuVmVyaWZpZXIoYXBpS2V5LCBhcGlTZWNyZXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBib2R5IHN0cmluZyBvZiB0aGUgcG9zdGVkIGJvZHlcbiAgICAgKiBAcGFyYW0gYXV0aEhlYWRlciBgQXV0aG9yaXphdGlvbmAgaGVhZGVyIGZyb20gdGhlIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0gc2tpcEF1dGggdHJ1ZSB0byBza2lwIGF1dGggdmFsaWRhdGlvblxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgcmVjZWl2ZShib2R5LCBhdXRoSGVhZGVyLCBza2lwQXV0aCA9IGZhbHNlKSB7XG4gICAgICAgIC8vIHZlcmlmeSB0b2tlblxuICAgICAgICBpZiAoIXNraXBBdXRoKSB7XG4gICAgICAgICAgICBpZiAoIWF1dGhIZWFkZXIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2F1dGhvcml6YXRpb24gaGVhZGVyIGlzIGVtcHR5Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjbGFpbXMgPSB0aGlzLnZlcmlmaWVyLnZlcmlmeShhdXRoSGVhZGVyKTtcbiAgICAgICAgICAgIC8vIGNvbmZpcm0gc2hhXG4gICAgICAgICAgICBjb25zdCBoYXNoID0gY3J5cHRvXzEuZGVmYXVsdC5jcmVhdGVIYXNoKCdzaGEyNTYnKTtcbiAgICAgICAgICAgIGhhc2gudXBkYXRlKGJvZHkpO1xuICAgICAgICAgICAgaWYgKGNsYWltcy5zaGEyNTYgIT09IGhhc2guZGlnZXN0KCdiYXNlNjQnKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc2hhMjU2IGNoZWNrc3VtIG9mIGJvZHkgZG9lcyBub3QgbWF0Y2gnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGl2ZWtpdF93ZWJob29rXzEuV2ViaG9va0V2ZW50LmZyb21KU09OKEpTT04ucGFyc2UoYm9keSkpO1xuICAgIH1cbn1cbmV4cG9ydHMuV2ViaG9va1JlY2VpdmVyID0gV2ViaG9va1JlY2VpdmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9V2ViaG9va1JlY2VpdmVyLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJXZWJob29rUmVjZWl2ZXIiLCJhdXRob3JpemVIZWFkZXIiLCJjcnlwdG9fMSIsInJlcXVpcmUiLCJBY2Nlc3NUb2tlbl8xIiwibGl2ZWtpdF93ZWJob29rXzEiLCJjb25zdHJ1Y3RvciIsImFwaUtleSIsImFwaVNlY3JldCIsInZlcmlmaWVyIiwiVG9rZW5WZXJpZmllciIsInJlY2VpdmUiLCJib2R5IiwiYXV0aEhlYWRlciIsInNraXBBdXRoIiwiRXJyb3IiLCJjbGFpbXMiLCJ2ZXJpZnkiLCJoYXNoIiwiZGVmYXVsdCIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJzaGEyNTYiLCJkaWdlc3QiLCJXZWJob29rRXZlbnQiLCJmcm9tSlNPTiIsIkpTT04iLCJwYXJzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/WebhookReceiver.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/grants.js":
/*!********************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/grants.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TrackSource = void 0;\nvar TrackSource;\n(function(TrackSource) {\n    TrackSource[\"CAMERA\"] = \"camera\";\n    TrackSource[\"MICROPHONE\"] = \"microphone\";\n    TrackSource[\"SCREEN_SHARE\"] = \"screen_share\";\n    TrackSource[\"SCREEN_SHARE_AUDIO\"] = \"screen_share_audio\";\n})(TrackSource = exports.TrackSource || (exports.TrackSource = {})); //# sourceMappingURL=grants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9saXZla2l0LXNlcnZlci1zZGsvZGlzdC9ncmFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG1CQUFtQixHQUFHLEtBQUs7QUFDM0IsSUFBSUU7QUFDSCxVQUFVQSxXQUFXO0lBQ2xCQSxXQUFXLENBQUMsU0FBUyxHQUFHO0lBQ3hCQSxXQUFXLENBQUMsYUFBYSxHQUFHO0lBQzVCQSxXQUFXLENBQUMsZUFBZSxHQUFHO0lBQzlCQSxXQUFXLENBQUMscUJBQXFCLEdBQUc7QUFDeEMsR0FBR0EsY0FBY0YsUUFBUUUsV0FBVyxJQUFLRixDQUFBQSxtQkFBbUIsR0FBRyxDQUFDLEtBQ2hFLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0cmVhbWluZy12aWRlby8uL25vZGVfbW9kdWxlcy9saXZla2l0LXNlcnZlci1zZGsvZGlzdC9ncmFudHMuanM/ZDYyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVHJhY2tTb3VyY2UgPSB2b2lkIDA7XG52YXIgVHJhY2tTb3VyY2U7XG4oZnVuY3Rpb24gKFRyYWNrU291cmNlKSB7XG4gICAgVHJhY2tTb3VyY2VbXCJDQU1FUkFcIl0gPSBcImNhbWVyYVwiO1xuICAgIFRyYWNrU291cmNlW1wiTUlDUk9QSE9ORVwiXSA9IFwibWljcm9waG9uZVwiO1xuICAgIFRyYWNrU291cmNlW1wiU0NSRUVOX1NIQVJFXCJdID0gXCJzY3JlZW5fc2hhcmVcIjtcbiAgICBUcmFja1NvdXJjZVtcIlNDUkVFTl9TSEFSRV9BVURJT1wiXSA9IFwic2NyZWVuX3NoYXJlX2F1ZGlvXCI7XG59KShUcmFja1NvdXJjZSA9IGV4cG9ydHMuVHJhY2tTb3VyY2UgfHwgKGV4cG9ydHMuVHJhY2tTb3VyY2UgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3JhbnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlRyYWNrU291cmNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/grants.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TrackType = exports.TrackInfo = exports.Room = exports.ParticipantPermission = exports.ParticipantInfo_State = exports.ParticipantInfo = exports.DataPacket_Kind = exports.IngressVideoOptions = exports.IngressVideoEncodingPreset = exports.IngressVideoEncodingOptions = exports.IngressState = exports.IngressInput = exports.IngressInfo = exports.IngressAudioOptions = exports.IngressAudioEncodingPreset = exports.IngressAudioEncodingOptions = exports.StreamProtocol = exports.StreamOutput = exports.SegmentedFileProtocol = exports.SegmentedFileOutput = exports.EncodingOptionsPreset = exports.EncodingOptions = exports.EncodedFileType = exports.EncodedFileOutput = exports.EgressInfo = exports.DirectFileOutput = void 0;\n__exportStar(__webpack_require__(/*! ./AccessToken */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/AccessToken.js\"), exports);\n__exportStar(__webpack_require__(/*! ./EgressClient */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/EgressClient.js\"), exports);\n__exportStar(__webpack_require__(/*! ./IngressClient */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/IngressClient.js\"), exports);\n__exportStar(__webpack_require__(/*! ./RoomServiceClient */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/RoomServiceClient.js\"), exports);\n__exportStar(__webpack_require__(/*! ./WebhookReceiver */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/WebhookReceiver.js\"), exports);\n__exportStar(__webpack_require__(/*! ./grants */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/grants.js\"), exports);\nvar livekit_egress_1 = __webpack_require__(/*! ./proto/livekit_egress */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js\");\nObject.defineProperty(exports, \"DirectFileOutput\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_egress_1.DirectFileOutput;\n    }\n}));\nObject.defineProperty(exports, \"EgressInfo\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_egress_1.EgressInfo;\n    }\n}));\nObject.defineProperty(exports, \"EncodedFileOutput\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_egress_1.EncodedFileOutput;\n    }\n}));\nObject.defineProperty(exports, \"EncodedFileType\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_egress_1.EncodedFileType;\n    }\n}));\nObject.defineProperty(exports, \"EncodingOptions\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_egress_1.EncodingOptions;\n    }\n}));\nObject.defineProperty(exports, \"EncodingOptionsPreset\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_egress_1.EncodingOptionsPreset;\n    }\n}));\nObject.defineProperty(exports, \"SegmentedFileOutput\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_egress_1.SegmentedFileOutput;\n    }\n}));\nObject.defineProperty(exports, \"SegmentedFileProtocol\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_egress_1.SegmentedFileProtocol;\n    }\n}));\nObject.defineProperty(exports, \"StreamOutput\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_egress_1.StreamOutput;\n    }\n}));\nObject.defineProperty(exports, \"StreamProtocol\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_egress_1.StreamProtocol;\n    }\n}));\nvar livekit_ingress_1 = __webpack_require__(/*! ./proto/livekit_ingress */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js\");\nObject.defineProperty(exports, \"IngressAudioEncodingOptions\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_ingress_1.IngressAudioEncodingOptions;\n    }\n}));\nObject.defineProperty(exports, \"IngressAudioEncodingPreset\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_ingress_1.IngressAudioEncodingPreset;\n    }\n}));\nObject.defineProperty(exports, \"IngressAudioOptions\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_ingress_1.IngressAudioOptions;\n    }\n}));\nObject.defineProperty(exports, \"IngressInfo\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_ingress_1.IngressInfo;\n    }\n}));\nObject.defineProperty(exports, \"IngressInput\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_ingress_1.IngressInput;\n    }\n}));\nObject.defineProperty(exports, \"IngressState\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_ingress_1.IngressState;\n    }\n}));\nObject.defineProperty(exports, \"IngressVideoEncodingOptions\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_ingress_1.IngressVideoEncodingOptions;\n    }\n}));\nObject.defineProperty(exports, \"IngressVideoEncodingPreset\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_ingress_1.IngressVideoEncodingPreset;\n    }\n}));\nObject.defineProperty(exports, \"IngressVideoOptions\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_ingress_1.IngressVideoOptions;\n    }\n}));\nvar livekit_models_1 = __webpack_require__(/*! ./proto/livekit_models */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nObject.defineProperty(exports, \"DataPacket_Kind\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_models_1.DataPacket_Kind;\n    }\n}));\nObject.defineProperty(exports, \"ParticipantInfo\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_models_1.ParticipantInfo;\n    }\n}));\nObject.defineProperty(exports, \"ParticipantInfo_State\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_models_1.ParticipantInfo_State;\n    }\n}));\nObject.defineProperty(exports, \"ParticipantPermission\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_models_1.ParticipantPermission;\n    }\n}));\nObject.defineProperty(exports, \"Room\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_models_1.Room;\n    }\n}));\nObject.defineProperty(exports, \"TrackInfo\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_models_1.TrackInfo;\n    }\n}));\nObject.defineProperty(exports, \"TrackType\", ({\n    enumerable: true,\n    get: function() {\n        return livekit_models_1.TrackType;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/proto/google/protobuf/timestamp.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/google/protobuf/timestamp.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Timestamp = exports.protobufPackage = void 0;\n/* eslint-disable */ const long_1 = __importDefault(__webpack_require__(/*! long */ \"(action-browser)/./node_modules/long/umd/index.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(action-browser)/./node_modules/protobufjs/minimal.js\"));\nexports.protobufPackage = \"google.protobuf\";\nfunction createBaseTimestamp() {\n    return {\n        seconds: 0,\n        nanos: 0\n    };\n}\nexports.Timestamp = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.seconds !== 0) {\n            writer.uint32(8).int64(message.seconds);\n        }\n        if (message.nanos !== 0) {\n            writer.uint32(16).int32(message.nanos);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTimestamp();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.seconds = longToNumber(reader.int64());\n                    break;\n                case 2:\n                    message.nanos = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            seconds: isSet(object.seconds) ? Number(object.seconds) : 0,\n            nanos: isSet(object.nanos) ? Number(object.nanos) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.seconds !== undefined && (obj.seconds = Math.round(message.seconds));\n        message.nanos !== undefined && (obj.nanos = Math.round(message.nanos));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseTimestamp();\n        message.seconds = (_a = object.seconds) !== null && _a !== void 0 ? _a : 0;\n        message.nanos = (_b = object.nanos) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    }\n};\nvar globalThis = (()=>{\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (false) {}\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n} //# sourceMappingURL=timestamp.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/proto/google/protobuf/timestamp.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js":
/*!**********************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.StreamInfo = exports.StreamInfoList = exports.EgressInfo = exports.StopEgressRequest = exports.ListEgressResponse = exports.ListEgressRequest = exports.UpdateOutputsRequest = exports.UpdateStreamRequest = exports.UpdateLayoutRequest = exports.EncodingOptions = exports.StreamOutput = exports.AliOSSUpload = exports.AzureBlobUpload = exports.GCPUpload = exports.S3Upload_MetadataEntry = exports.S3Upload = exports.ImageOutput = exports.DirectFileOutput = exports.SegmentedFileOutput = exports.EncodedFileOutput = exports.TrackEgressRequest = exports.TrackCompositeEgressRequest = exports.ParticipantEgressRequest = exports.WebEgressRequest = exports.RoomCompositeEgressRequest = exports.streamInfo_StatusToJSON = exports.streamInfo_StatusFromJSON = exports.StreamInfo_Status = exports.egressStatusToJSON = exports.egressStatusFromJSON = exports.EgressStatus = exports.encodingOptionsPresetToJSON = exports.encodingOptionsPresetFromJSON = exports.EncodingOptionsPreset = exports.streamProtocolToJSON = exports.streamProtocolFromJSON = exports.StreamProtocol = exports.imageFileSuffixToJSON = exports.imageFileSuffixFromJSON = exports.ImageFileSuffix = exports.segmentedFileSuffixToJSON = exports.segmentedFileSuffixFromJSON = exports.SegmentedFileSuffix = exports.segmentedFileProtocolToJSON = exports.segmentedFileProtocolFromJSON = exports.SegmentedFileProtocol = exports.encodedFileTypeToJSON = exports.encodedFileTypeFromJSON = exports.EncodedFileType = exports.protobufPackage = void 0;\nexports.AutoTrackEgress = exports.AutoParticipantEgress = exports.ImagesInfo = exports.SegmentsInfo = exports.FileInfo = void 0;\n/* eslint-disable */ const long_1 = __importDefault(__webpack_require__(/*! long */ \"(action-browser)/./node_modules/long/umd/index.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(action-browser)/./node_modules/protobufjs/minimal.js\"));\nconst livekit_models_1 = __webpack_require__(/*! ./livekit_models */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nexports.protobufPackage = \"livekit\";\nvar EncodedFileType;\n(function(EncodedFileType) {\n    /** DEFAULT_FILETYPE - file type chosen based on codecs */ EncodedFileType[EncodedFileType[\"DEFAULT_FILETYPE\"] = 0] = \"DEFAULT_FILETYPE\";\n    EncodedFileType[EncodedFileType[\"MP4\"] = 1] = \"MP4\";\n    EncodedFileType[EncodedFileType[\"OGG\"] = 2] = \"OGG\";\n    EncodedFileType[EncodedFileType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(EncodedFileType = exports.EncodedFileType || (exports.EncodedFileType = {}));\nfunction encodedFileTypeFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"DEFAULT_FILETYPE\":\n            return EncodedFileType.DEFAULT_FILETYPE;\n        case 1:\n        case \"MP4\":\n            return EncodedFileType.MP4;\n        case 2:\n        case \"OGG\":\n            return EncodedFileType.OGG;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return EncodedFileType.UNRECOGNIZED;\n    }\n}\nexports.encodedFileTypeFromJSON = encodedFileTypeFromJSON;\nfunction encodedFileTypeToJSON(object) {\n    switch(object){\n        case EncodedFileType.DEFAULT_FILETYPE:\n            return \"DEFAULT_FILETYPE\";\n        case EncodedFileType.MP4:\n            return \"MP4\";\n        case EncodedFileType.OGG:\n            return \"OGG\";\n        case EncodedFileType.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.encodedFileTypeToJSON = encodedFileTypeToJSON;\nvar SegmentedFileProtocol;\n(function(SegmentedFileProtocol) {\n    SegmentedFileProtocol[SegmentedFileProtocol[\"DEFAULT_SEGMENTED_FILE_PROTOCOL\"] = 0] = \"DEFAULT_SEGMENTED_FILE_PROTOCOL\";\n    SegmentedFileProtocol[SegmentedFileProtocol[\"HLS_PROTOCOL\"] = 1] = \"HLS_PROTOCOL\";\n    SegmentedFileProtocol[SegmentedFileProtocol[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(SegmentedFileProtocol = exports.SegmentedFileProtocol || (exports.SegmentedFileProtocol = {}));\nfunction segmentedFileProtocolFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"DEFAULT_SEGMENTED_FILE_PROTOCOL\":\n            return SegmentedFileProtocol.DEFAULT_SEGMENTED_FILE_PROTOCOL;\n        case 1:\n        case \"HLS_PROTOCOL\":\n            return SegmentedFileProtocol.HLS_PROTOCOL;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return SegmentedFileProtocol.UNRECOGNIZED;\n    }\n}\nexports.segmentedFileProtocolFromJSON = segmentedFileProtocolFromJSON;\nfunction segmentedFileProtocolToJSON(object) {\n    switch(object){\n        case SegmentedFileProtocol.DEFAULT_SEGMENTED_FILE_PROTOCOL:\n            return \"DEFAULT_SEGMENTED_FILE_PROTOCOL\";\n        case SegmentedFileProtocol.HLS_PROTOCOL:\n            return \"HLS_PROTOCOL\";\n        case SegmentedFileProtocol.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.segmentedFileProtocolToJSON = segmentedFileProtocolToJSON;\nvar SegmentedFileSuffix;\n(function(SegmentedFileSuffix) {\n    SegmentedFileSuffix[SegmentedFileSuffix[\"INDEX\"] = 0] = \"INDEX\";\n    SegmentedFileSuffix[SegmentedFileSuffix[\"TIMESTAMP\"] = 1] = \"TIMESTAMP\";\n    SegmentedFileSuffix[SegmentedFileSuffix[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(SegmentedFileSuffix = exports.SegmentedFileSuffix || (exports.SegmentedFileSuffix = {}));\nfunction segmentedFileSuffixFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"INDEX\":\n            return SegmentedFileSuffix.INDEX;\n        case 1:\n        case \"TIMESTAMP\":\n            return SegmentedFileSuffix.TIMESTAMP;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return SegmentedFileSuffix.UNRECOGNIZED;\n    }\n}\nexports.segmentedFileSuffixFromJSON = segmentedFileSuffixFromJSON;\nfunction segmentedFileSuffixToJSON(object) {\n    switch(object){\n        case SegmentedFileSuffix.INDEX:\n            return \"INDEX\";\n        case SegmentedFileSuffix.TIMESTAMP:\n            return \"TIMESTAMP\";\n        case SegmentedFileSuffix.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.segmentedFileSuffixToJSON = segmentedFileSuffixToJSON;\nvar ImageFileSuffix;\n(function(ImageFileSuffix) {\n    ImageFileSuffix[ImageFileSuffix[\"IMAGE_SUFFIX_INDEX\"] = 0] = \"IMAGE_SUFFIX_INDEX\";\n    ImageFileSuffix[ImageFileSuffix[\"IMAGE_SUFFIX_TIMESTAMP\"] = 1] = \"IMAGE_SUFFIX_TIMESTAMP\";\n    ImageFileSuffix[ImageFileSuffix[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ImageFileSuffix = exports.ImageFileSuffix || (exports.ImageFileSuffix = {}));\nfunction imageFileSuffixFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"IMAGE_SUFFIX_INDEX\":\n            return ImageFileSuffix.IMAGE_SUFFIX_INDEX;\n        case 1:\n        case \"IMAGE_SUFFIX_TIMESTAMP\":\n            return ImageFileSuffix.IMAGE_SUFFIX_TIMESTAMP;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ImageFileSuffix.UNRECOGNIZED;\n    }\n}\nexports.imageFileSuffixFromJSON = imageFileSuffixFromJSON;\nfunction imageFileSuffixToJSON(object) {\n    switch(object){\n        case ImageFileSuffix.IMAGE_SUFFIX_INDEX:\n            return \"IMAGE_SUFFIX_INDEX\";\n        case ImageFileSuffix.IMAGE_SUFFIX_TIMESTAMP:\n            return \"IMAGE_SUFFIX_TIMESTAMP\";\n        case ImageFileSuffix.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.imageFileSuffixToJSON = imageFileSuffixToJSON;\nvar StreamProtocol;\n(function(StreamProtocol) {\n    /** DEFAULT_PROTOCOL - protocol chosen based on urls */ StreamProtocol[StreamProtocol[\"DEFAULT_PROTOCOL\"] = 0] = \"DEFAULT_PROTOCOL\";\n    StreamProtocol[StreamProtocol[\"RTMP\"] = 1] = \"RTMP\";\n    StreamProtocol[StreamProtocol[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(StreamProtocol = exports.StreamProtocol || (exports.StreamProtocol = {}));\nfunction streamProtocolFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"DEFAULT_PROTOCOL\":\n            return StreamProtocol.DEFAULT_PROTOCOL;\n        case 1:\n        case \"RTMP\":\n            return StreamProtocol.RTMP;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return StreamProtocol.UNRECOGNIZED;\n    }\n}\nexports.streamProtocolFromJSON = streamProtocolFromJSON;\nfunction streamProtocolToJSON(object) {\n    switch(object){\n        case StreamProtocol.DEFAULT_PROTOCOL:\n            return \"DEFAULT_PROTOCOL\";\n        case StreamProtocol.RTMP:\n            return \"RTMP\";\n        case StreamProtocol.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.streamProtocolToJSON = streamProtocolToJSON;\nvar EncodingOptionsPreset;\n(function(EncodingOptionsPreset) {\n    /** H264_720P_30 - 1280x720, 30fps, 3000kpbs, H.264_MAIN / OPUS */ EncodingOptionsPreset[EncodingOptionsPreset[\"H264_720P_30\"] = 0] = \"H264_720P_30\";\n    /** H264_720P_60 - 1280x720, 60fps, 4500kbps, H.264_MAIN / OPUS */ EncodingOptionsPreset[EncodingOptionsPreset[\"H264_720P_60\"] = 1] = \"H264_720P_60\";\n    /** H264_1080P_30 - 1920x1080, 30fps, 4500kbps, H.264_MAIN / OPUS */ EncodingOptionsPreset[EncodingOptionsPreset[\"H264_1080P_30\"] = 2] = \"H264_1080P_30\";\n    /** H264_1080P_60 - 1920x1080, 60fps, 6000kbps, H.264_MAIN / OPUS */ EncodingOptionsPreset[EncodingOptionsPreset[\"H264_1080P_60\"] = 3] = \"H264_1080P_60\";\n    /** PORTRAIT_H264_720P_30 - 720x1280, 30fps, 3000kpbs, H.264_MAIN / OPUS */ EncodingOptionsPreset[EncodingOptionsPreset[\"PORTRAIT_H264_720P_30\"] = 4] = \"PORTRAIT_H264_720P_30\";\n    /** PORTRAIT_H264_720P_60 - 720x1280, 60fps, 4500kbps, H.264_MAIN / OPUS */ EncodingOptionsPreset[EncodingOptionsPreset[\"PORTRAIT_H264_720P_60\"] = 5] = \"PORTRAIT_H264_720P_60\";\n    /** PORTRAIT_H264_1080P_30 - 1080x1920, 30fps, 4500kbps, H.264_MAIN / OPUS */ EncodingOptionsPreset[EncodingOptionsPreset[\"PORTRAIT_H264_1080P_30\"] = 6] = \"PORTRAIT_H264_1080P_30\";\n    /** PORTRAIT_H264_1080P_60 - 1080x1920, 60fps, 6000kbps, H.264_MAIN / OPUS */ EncodingOptionsPreset[EncodingOptionsPreset[\"PORTRAIT_H264_1080P_60\"] = 7] = \"PORTRAIT_H264_1080P_60\";\n    EncodingOptionsPreset[EncodingOptionsPreset[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(EncodingOptionsPreset = exports.EncodingOptionsPreset || (exports.EncodingOptionsPreset = {}));\nfunction encodingOptionsPresetFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"H264_720P_30\":\n            return EncodingOptionsPreset.H264_720P_30;\n        case 1:\n        case \"H264_720P_60\":\n            return EncodingOptionsPreset.H264_720P_60;\n        case 2:\n        case \"H264_1080P_30\":\n            return EncodingOptionsPreset.H264_1080P_30;\n        case 3:\n        case \"H264_1080P_60\":\n            return EncodingOptionsPreset.H264_1080P_60;\n        case 4:\n        case \"PORTRAIT_H264_720P_30\":\n            return EncodingOptionsPreset.PORTRAIT_H264_720P_30;\n        case 5:\n        case \"PORTRAIT_H264_720P_60\":\n            return EncodingOptionsPreset.PORTRAIT_H264_720P_60;\n        case 6:\n        case \"PORTRAIT_H264_1080P_30\":\n            return EncodingOptionsPreset.PORTRAIT_H264_1080P_30;\n        case 7:\n        case \"PORTRAIT_H264_1080P_60\":\n            return EncodingOptionsPreset.PORTRAIT_H264_1080P_60;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return EncodingOptionsPreset.UNRECOGNIZED;\n    }\n}\nexports.encodingOptionsPresetFromJSON = encodingOptionsPresetFromJSON;\nfunction encodingOptionsPresetToJSON(object) {\n    switch(object){\n        case EncodingOptionsPreset.H264_720P_30:\n            return \"H264_720P_30\";\n        case EncodingOptionsPreset.H264_720P_60:\n            return \"H264_720P_60\";\n        case EncodingOptionsPreset.H264_1080P_30:\n            return \"H264_1080P_30\";\n        case EncodingOptionsPreset.H264_1080P_60:\n            return \"H264_1080P_60\";\n        case EncodingOptionsPreset.PORTRAIT_H264_720P_30:\n            return \"PORTRAIT_H264_720P_30\";\n        case EncodingOptionsPreset.PORTRAIT_H264_720P_60:\n            return \"PORTRAIT_H264_720P_60\";\n        case EncodingOptionsPreset.PORTRAIT_H264_1080P_30:\n            return \"PORTRAIT_H264_1080P_30\";\n        case EncodingOptionsPreset.PORTRAIT_H264_1080P_60:\n            return \"PORTRAIT_H264_1080P_60\";\n        case EncodingOptionsPreset.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.encodingOptionsPresetToJSON = encodingOptionsPresetToJSON;\nvar EgressStatus;\n(function(EgressStatus) {\n    EgressStatus[EgressStatus[\"EGRESS_STARTING\"] = 0] = \"EGRESS_STARTING\";\n    EgressStatus[EgressStatus[\"EGRESS_ACTIVE\"] = 1] = \"EGRESS_ACTIVE\";\n    EgressStatus[EgressStatus[\"EGRESS_ENDING\"] = 2] = \"EGRESS_ENDING\";\n    EgressStatus[EgressStatus[\"EGRESS_COMPLETE\"] = 3] = \"EGRESS_COMPLETE\";\n    EgressStatus[EgressStatus[\"EGRESS_FAILED\"] = 4] = \"EGRESS_FAILED\";\n    EgressStatus[EgressStatus[\"EGRESS_ABORTED\"] = 5] = \"EGRESS_ABORTED\";\n    EgressStatus[EgressStatus[\"EGRESS_LIMIT_REACHED\"] = 6] = \"EGRESS_LIMIT_REACHED\";\n    EgressStatus[EgressStatus[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(EgressStatus = exports.EgressStatus || (exports.EgressStatus = {}));\nfunction egressStatusFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"EGRESS_STARTING\":\n            return EgressStatus.EGRESS_STARTING;\n        case 1:\n        case \"EGRESS_ACTIVE\":\n            return EgressStatus.EGRESS_ACTIVE;\n        case 2:\n        case \"EGRESS_ENDING\":\n            return EgressStatus.EGRESS_ENDING;\n        case 3:\n        case \"EGRESS_COMPLETE\":\n            return EgressStatus.EGRESS_COMPLETE;\n        case 4:\n        case \"EGRESS_FAILED\":\n            return EgressStatus.EGRESS_FAILED;\n        case 5:\n        case \"EGRESS_ABORTED\":\n            return EgressStatus.EGRESS_ABORTED;\n        case 6:\n        case \"EGRESS_LIMIT_REACHED\":\n            return EgressStatus.EGRESS_LIMIT_REACHED;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return EgressStatus.UNRECOGNIZED;\n    }\n}\nexports.egressStatusFromJSON = egressStatusFromJSON;\nfunction egressStatusToJSON(object) {\n    switch(object){\n        case EgressStatus.EGRESS_STARTING:\n            return \"EGRESS_STARTING\";\n        case EgressStatus.EGRESS_ACTIVE:\n            return \"EGRESS_ACTIVE\";\n        case EgressStatus.EGRESS_ENDING:\n            return \"EGRESS_ENDING\";\n        case EgressStatus.EGRESS_COMPLETE:\n            return \"EGRESS_COMPLETE\";\n        case EgressStatus.EGRESS_FAILED:\n            return \"EGRESS_FAILED\";\n        case EgressStatus.EGRESS_ABORTED:\n            return \"EGRESS_ABORTED\";\n        case EgressStatus.EGRESS_LIMIT_REACHED:\n            return \"EGRESS_LIMIT_REACHED\";\n        case EgressStatus.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.egressStatusToJSON = egressStatusToJSON;\nvar StreamInfo_Status;\n(function(StreamInfo_Status) {\n    StreamInfo_Status[StreamInfo_Status[\"ACTIVE\"] = 0] = \"ACTIVE\";\n    StreamInfo_Status[StreamInfo_Status[\"FINISHED\"] = 1] = \"FINISHED\";\n    StreamInfo_Status[StreamInfo_Status[\"FAILED\"] = 2] = \"FAILED\";\n    StreamInfo_Status[StreamInfo_Status[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(StreamInfo_Status = exports.StreamInfo_Status || (exports.StreamInfo_Status = {}));\nfunction streamInfo_StatusFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"ACTIVE\":\n            return StreamInfo_Status.ACTIVE;\n        case 1:\n        case \"FINISHED\":\n            return StreamInfo_Status.FINISHED;\n        case 2:\n        case \"FAILED\":\n            return StreamInfo_Status.FAILED;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return StreamInfo_Status.UNRECOGNIZED;\n    }\n}\nexports.streamInfo_StatusFromJSON = streamInfo_StatusFromJSON;\nfunction streamInfo_StatusToJSON(object) {\n    switch(object){\n        case StreamInfo_Status.ACTIVE:\n            return \"ACTIVE\";\n        case StreamInfo_Status.FINISHED:\n            return \"FINISHED\";\n        case StreamInfo_Status.FAILED:\n            return \"FAILED\";\n        case StreamInfo_Status.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.streamInfo_StatusToJSON = streamInfo_StatusToJSON;\nfunction createBaseRoomCompositeEgressRequest() {\n    return {\n        roomName: \"\",\n        layout: \"\",\n        audioOnly: false,\n        videoOnly: false,\n        customBaseUrl: \"\",\n        file: undefined,\n        stream: undefined,\n        segments: undefined,\n        preset: undefined,\n        advanced: undefined,\n        fileOutputs: [],\n        streamOutputs: [],\n        segmentOutputs: [],\n        imageOutputs: []\n    };\n}\nexports.RoomCompositeEgressRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.layout !== undefined && message.layout !== \"\") {\n            writer.uint32(18).string(message.layout);\n        }\n        if (message.audioOnly === true) {\n            writer.uint32(24).bool(message.audioOnly);\n        }\n        if (message.videoOnly === true) {\n            writer.uint32(32).bool(message.videoOnly);\n        }\n        if (message.customBaseUrl !== undefined && message.customBaseUrl !== \"\") {\n            writer.uint32(42).string(message.customBaseUrl);\n        }\n        if (message.file !== undefined) {\n            exports.EncodedFileOutput.encode(message.file, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.stream !== undefined) {\n            exports.StreamOutput.encode(message.stream, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.segments !== undefined) {\n            exports.SegmentedFileOutput.encode(message.segments, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(64).int32(message.preset);\n        }\n        if (message.advanced !== undefined) {\n            exports.EncodingOptions.encode(message.advanced, writer.uint32(74).fork()).ldelim();\n        }\n        if (message.fileOutputs !== undefined && message.fileOutputs.length !== 0) {\n            for (const v of message.fileOutputs){\n                exports.EncodedFileOutput.encode(v, writer.uint32(90).fork()).ldelim();\n            }\n        }\n        if (message.streamOutputs !== undefined && message.streamOutputs.length !== 0) {\n            for (const v of message.streamOutputs){\n                exports.StreamOutput.encode(v, writer.uint32(98).fork()).ldelim();\n            }\n        }\n        if (message.segmentOutputs !== undefined && message.segmentOutputs.length !== 0) {\n            for (const v of message.segmentOutputs){\n                exports.SegmentedFileOutput.encode(v, writer.uint32(106).fork()).ldelim();\n            }\n        }\n        if (message.imageOutputs !== undefined && message.imageOutputs.length !== 0) {\n            for (const v of message.imageOutputs){\n                exports.ImageOutput.encode(v, writer.uint32(114).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRoomCompositeEgressRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.layout = reader.string();\n                    break;\n                case 3:\n                    message.audioOnly = reader.bool();\n                    break;\n                case 4:\n                    message.videoOnly = reader.bool();\n                    break;\n                case 5:\n                    message.customBaseUrl = reader.string();\n                    break;\n                case 6:\n                    message.file = exports.EncodedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.stream = exports.StreamOutput.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.segments = exports.SegmentedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.preset = reader.int32();\n                    break;\n                case 9:\n                    message.advanced = exports.EncodingOptions.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.fileOutputs.push(exports.EncodedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    message.streamOutputs.push(exports.StreamOutput.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    message.segmentOutputs.push(exports.SegmentedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.imageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            layout: isSet(object.layout) ? String(object.layout) : \"\",\n            audioOnly: isSet(object.audioOnly) ? Boolean(object.audioOnly) : false,\n            videoOnly: isSet(object.videoOnly) ? Boolean(object.videoOnly) : false,\n            customBaseUrl: isSet(object.customBaseUrl) ? String(object.customBaseUrl) : \"\",\n            file: isSet(object.file) ? exports.EncodedFileOutput.fromJSON(object.file) : undefined,\n            stream: isSet(object.stream) ? exports.StreamOutput.fromJSON(object.stream) : undefined,\n            segments: isSet(object.segments) ? exports.SegmentedFileOutput.fromJSON(object.segments) : undefined,\n            preset: isSet(object.preset) ? encodingOptionsPresetFromJSON(object.preset) : undefined,\n            advanced: isSet(object.advanced) ? exports.EncodingOptions.fromJSON(object.advanced) : undefined,\n            fileOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.fileOutputs) ? object.fileOutputs.map((e)=>exports.EncodedFileOutput.fromJSON(e)) : [],\n            streamOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.streamOutputs) ? object.streamOutputs.map((e)=>exports.StreamOutput.fromJSON(e)) : [],\n            segmentOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentOutputs) ? object.segmentOutputs.map((e)=>exports.SegmentedFileOutput.fromJSON(e)) : [],\n            imageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.imageOutputs) ? object.imageOutputs.map((e)=>exports.ImageOutput.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.layout !== undefined && (obj.layout = message.layout);\n        message.audioOnly !== undefined && (obj.audioOnly = message.audioOnly);\n        message.videoOnly !== undefined && (obj.videoOnly = message.videoOnly);\n        message.customBaseUrl !== undefined && (obj.customBaseUrl = message.customBaseUrl);\n        message.file !== undefined && (obj.file = message.file ? exports.EncodedFileOutput.toJSON(message.file) : undefined);\n        message.stream !== undefined && (obj.stream = message.stream ? exports.StreamOutput.toJSON(message.stream) : undefined);\n        message.segments !== undefined && (obj.segments = message.segments ? exports.SegmentedFileOutput.toJSON(message.segments) : undefined);\n        message.preset !== undefined && (obj.preset = message.preset !== undefined ? encodingOptionsPresetToJSON(message.preset) : undefined);\n        message.advanced !== undefined && (obj.advanced = message.advanced ? exports.EncodingOptions.toJSON(message.advanced) : undefined);\n        if (message.fileOutputs) {\n            obj.fileOutputs = message.fileOutputs.map((e)=>e ? exports.EncodedFileOutput.toJSON(e) : undefined);\n        } else {\n            obj.fileOutputs = [];\n        }\n        if (message.streamOutputs) {\n            obj.streamOutputs = message.streamOutputs.map((e)=>e ? exports.StreamOutput.toJSON(e) : undefined);\n        } else {\n            obj.streamOutputs = [];\n        }\n        if (message.segmentOutputs) {\n            obj.segmentOutputs = message.segmentOutputs.map((e)=>e ? exports.SegmentedFileOutput.toJSON(e) : undefined);\n        } else {\n            obj.segmentOutputs = [];\n        }\n        if (message.imageOutputs) {\n            obj.imageOutputs = message.imageOutputs.map((e)=>e ? exports.ImageOutput.toJSON(e) : undefined);\n        } else {\n            obj.imageOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        const message = createBaseRoomCompositeEgressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.layout = (_b = object.layout) !== null && _b !== void 0 ? _b : \"\";\n        message.audioOnly = (_c = object.audioOnly) !== null && _c !== void 0 ? _c : false;\n        message.videoOnly = (_d = object.videoOnly) !== null && _d !== void 0 ? _d : false;\n        message.customBaseUrl = (_e = object.customBaseUrl) !== null && _e !== void 0 ? _e : \"\";\n        message.file = object.file !== undefined && object.file !== null ? exports.EncodedFileOutput.fromPartial(object.file) : undefined;\n        message.stream = object.stream !== undefined && object.stream !== null ? exports.StreamOutput.fromPartial(object.stream) : undefined;\n        message.segments = object.segments !== undefined && object.segments !== null ? exports.SegmentedFileOutput.fromPartial(object.segments) : undefined;\n        message.preset = (_f = object.preset) !== null && _f !== void 0 ? _f : undefined;\n        message.advanced = object.advanced !== undefined && object.advanced !== null ? exports.EncodingOptions.fromPartial(object.advanced) : undefined;\n        message.fileOutputs = ((_g = object.fileOutputs) === null || _g === void 0 ? void 0 : _g.map((e)=>exports.EncodedFileOutput.fromPartial(e))) || [];\n        message.streamOutputs = ((_h = object.streamOutputs) === null || _h === void 0 ? void 0 : _h.map((e)=>exports.StreamOutput.fromPartial(e))) || [];\n        message.segmentOutputs = ((_j = object.segmentOutputs) === null || _j === void 0 ? void 0 : _j.map((e)=>exports.SegmentedFileOutput.fromPartial(e))) || [];\n        message.imageOutputs = ((_k = object.imageOutputs) === null || _k === void 0 ? void 0 : _k.map((e)=>exports.ImageOutput.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseWebEgressRequest() {\n    return {\n        url: \"\",\n        audioOnly: false,\n        videoOnly: false,\n        awaitStartSignal: false,\n        file: undefined,\n        stream: undefined,\n        segments: undefined,\n        preset: undefined,\n        advanced: undefined,\n        fileOutputs: [],\n        streamOutputs: [],\n        segmentOutputs: [],\n        imageOutputs: []\n    };\n}\nexports.WebEgressRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.url !== undefined && message.url !== \"\") {\n            writer.uint32(10).string(message.url);\n        }\n        if (message.audioOnly === true) {\n            writer.uint32(16).bool(message.audioOnly);\n        }\n        if (message.videoOnly === true) {\n            writer.uint32(24).bool(message.videoOnly);\n        }\n        if (message.awaitStartSignal === true) {\n            writer.uint32(96).bool(message.awaitStartSignal);\n        }\n        if (message.file !== undefined) {\n            exports.EncodedFileOutput.encode(message.file, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.stream !== undefined) {\n            exports.StreamOutput.encode(message.stream, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.segments !== undefined) {\n            exports.SegmentedFileOutput.encode(message.segments, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(56).int32(message.preset);\n        }\n        if (message.advanced !== undefined) {\n            exports.EncodingOptions.encode(message.advanced, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.fileOutputs !== undefined && message.fileOutputs.length !== 0) {\n            for (const v of message.fileOutputs){\n                exports.EncodedFileOutput.encode(v, writer.uint32(74).fork()).ldelim();\n            }\n        }\n        if (message.streamOutputs !== undefined && message.streamOutputs.length !== 0) {\n            for (const v of message.streamOutputs){\n                exports.StreamOutput.encode(v, writer.uint32(82).fork()).ldelim();\n            }\n        }\n        if (message.segmentOutputs !== undefined && message.segmentOutputs.length !== 0) {\n            for (const v of message.segmentOutputs){\n                exports.SegmentedFileOutput.encode(v, writer.uint32(90).fork()).ldelim();\n            }\n        }\n        if (message.imageOutputs !== undefined && message.imageOutputs.length !== 0) {\n            for (const v of message.imageOutputs){\n                exports.ImageOutput.encode(v, writer.uint32(106).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWebEgressRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.url = reader.string();\n                    break;\n                case 2:\n                    message.audioOnly = reader.bool();\n                    break;\n                case 3:\n                    message.videoOnly = reader.bool();\n                    break;\n                case 12:\n                    message.awaitStartSignal = reader.bool();\n                    break;\n                case 4:\n                    message.file = exports.EncodedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.stream = exports.StreamOutput.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.segments = exports.SegmentedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.preset = reader.int32();\n                    break;\n                case 8:\n                    message.advanced = exports.EncodingOptions.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.fileOutputs.push(exports.EncodedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.streamOutputs.push(exports.StreamOutput.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    message.segmentOutputs.push(exports.SegmentedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    message.imageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            url: isSet(object.url) ? String(object.url) : \"\",\n            audioOnly: isSet(object.audioOnly) ? Boolean(object.audioOnly) : false,\n            videoOnly: isSet(object.videoOnly) ? Boolean(object.videoOnly) : false,\n            awaitStartSignal: isSet(object.awaitStartSignal) ? Boolean(object.awaitStartSignal) : false,\n            file: isSet(object.file) ? exports.EncodedFileOutput.fromJSON(object.file) : undefined,\n            stream: isSet(object.stream) ? exports.StreamOutput.fromJSON(object.stream) : undefined,\n            segments: isSet(object.segments) ? exports.SegmentedFileOutput.fromJSON(object.segments) : undefined,\n            preset: isSet(object.preset) ? encodingOptionsPresetFromJSON(object.preset) : undefined,\n            advanced: isSet(object.advanced) ? exports.EncodingOptions.fromJSON(object.advanced) : undefined,\n            fileOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.fileOutputs) ? object.fileOutputs.map((e)=>exports.EncodedFileOutput.fromJSON(e)) : [],\n            streamOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.streamOutputs) ? object.streamOutputs.map((e)=>exports.StreamOutput.fromJSON(e)) : [],\n            segmentOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentOutputs) ? object.segmentOutputs.map((e)=>exports.SegmentedFileOutput.fromJSON(e)) : [],\n            imageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.imageOutputs) ? object.imageOutputs.map((e)=>exports.ImageOutput.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.url !== undefined && (obj.url = message.url);\n        message.audioOnly !== undefined && (obj.audioOnly = message.audioOnly);\n        message.videoOnly !== undefined && (obj.videoOnly = message.videoOnly);\n        message.awaitStartSignal !== undefined && (obj.awaitStartSignal = message.awaitStartSignal);\n        message.file !== undefined && (obj.file = message.file ? exports.EncodedFileOutput.toJSON(message.file) : undefined);\n        message.stream !== undefined && (obj.stream = message.stream ? exports.StreamOutput.toJSON(message.stream) : undefined);\n        message.segments !== undefined && (obj.segments = message.segments ? exports.SegmentedFileOutput.toJSON(message.segments) : undefined);\n        message.preset !== undefined && (obj.preset = message.preset !== undefined ? encodingOptionsPresetToJSON(message.preset) : undefined);\n        message.advanced !== undefined && (obj.advanced = message.advanced ? exports.EncodingOptions.toJSON(message.advanced) : undefined);\n        if (message.fileOutputs) {\n            obj.fileOutputs = message.fileOutputs.map((e)=>e ? exports.EncodedFileOutput.toJSON(e) : undefined);\n        } else {\n            obj.fileOutputs = [];\n        }\n        if (message.streamOutputs) {\n            obj.streamOutputs = message.streamOutputs.map((e)=>e ? exports.StreamOutput.toJSON(e) : undefined);\n        } else {\n            obj.streamOutputs = [];\n        }\n        if (message.segmentOutputs) {\n            obj.segmentOutputs = message.segmentOutputs.map((e)=>e ? exports.SegmentedFileOutput.toJSON(e) : undefined);\n        } else {\n            obj.segmentOutputs = [];\n        }\n        if (message.imageOutputs) {\n            obj.imageOutputs = message.imageOutputs.map((e)=>e ? exports.ImageOutput.toJSON(e) : undefined);\n        } else {\n            obj.imageOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const message = createBaseWebEgressRequest();\n        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : \"\";\n        message.audioOnly = (_b = object.audioOnly) !== null && _b !== void 0 ? _b : false;\n        message.videoOnly = (_c = object.videoOnly) !== null && _c !== void 0 ? _c : false;\n        message.awaitStartSignal = (_d = object.awaitStartSignal) !== null && _d !== void 0 ? _d : false;\n        message.file = object.file !== undefined && object.file !== null ? exports.EncodedFileOutput.fromPartial(object.file) : undefined;\n        message.stream = object.stream !== undefined && object.stream !== null ? exports.StreamOutput.fromPartial(object.stream) : undefined;\n        message.segments = object.segments !== undefined && object.segments !== null ? exports.SegmentedFileOutput.fromPartial(object.segments) : undefined;\n        message.preset = (_e = object.preset) !== null && _e !== void 0 ? _e : undefined;\n        message.advanced = object.advanced !== undefined && object.advanced !== null ? exports.EncodingOptions.fromPartial(object.advanced) : undefined;\n        message.fileOutputs = ((_f = object.fileOutputs) === null || _f === void 0 ? void 0 : _f.map((e)=>exports.EncodedFileOutput.fromPartial(e))) || [];\n        message.streamOutputs = ((_g = object.streamOutputs) === null || _g === void 0 ? void 0 : _g.map((e)=>exports.StreamOutput.fromPartial(e))) || [];\n        message.segmentOutputs = ((_h = object.segmentOutputs) === null || _h === void 0 ? void 0 : _h.map((e)=>exports.SegmentedFileOutput.fromPartial(e))) || [];\n        message.imageOutputs = ((_j = object.imageOutputs) === null || _j === void 0 ? void 0 : _j.map((e)=>exports.ImageOutput.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseParticipantEgressRequest() {\n    return {\n        roomName: \"\",\n        identity: \"\",\n        screenShare: false,\n        preset: undefined,\n        advanced: undefined,\n        fileOutputs: [],\n        streamOutputs: [],\n        segmentOutputs: [],\n        imageOutputs: []\n    };\n}\nexports.ParticipantEgressRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.identity !== undefined && message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        if (message.screenShare === true) {\n            writer.uint32(24).bool(message.screenShare);\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(32).int32(message.preset);\n        }\n        if (message.advanced !== undefined) {\n            exports.EncodingOptions.encode(message.advanced, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.fileOutputs !== undefined && message.fileOutputs.length !== 0) {\n            for (const v of message.fileOutputs){\n                exports.EncodedFileOutput.encode(v, writer.uint32(50).fork()).ldelim();\n            }\n        }\n        if (message.streamOutputs !== undefined && message.streamOutputs.length !== 0) {\n            for (const v of message.streamOutputs){\n                exports.StreamOutput.encode(v, writer.uint32(58).fork()).ldelim();\n            }\n        }\n        if (message.segmentOutputs !== undefined && message.segmentOutputs.length !== 0) {\n            for (const v of message.segmentOutputs){\n                exports.SegmentedFileOutput.encode(v, writer.uint32(66).fork()).ldelim();\n            }\n        }\n        if (message.imageOutputs !== undefined && message.imageOutputs.length !== 0) {\n            for (const v of message.imageOutputs){\n                exports.ImageOutput.encode(v, writer.uint32(74).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParticipantEgressRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                case 3:\n                    message.screenShare = reader.bool();\n                    break;\n                case 4:\n                    message.preset = reader.int32();\n                    break;\n                case 5:\n                    message.advanced = exports.EncodingOptions.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.fileOutputs.push(exports.EncodedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 7:\n                    message.streamOutputs.push(exports.StreamOutput.decode(reader, reader.uint32()));\n                    break;\n                case 8:\n                    message.segmentOutputs.push(exports.SegmentedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 9:\n                    message.imageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\",\n            screenShare: isSet(object.screenShare) ? Boolean(object.screenShare) : false,\n            preset: isSet(object.preset) ? encodingOptionsPresetFromJSON(object.preset) : undefined,\n            advanced: isSet(object.advanced) ? exports.EncodingOptions.fromJSON(object.advanced) : undefined,\n            fileOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.fileOutputs) ? object.fileOutputs.map((e)=>exports.EncodedFileOutput.fromJSON(e)) : [],\n            streamOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.streamOutputs) ? object.streamOutputs.map((e)=>exports.StreamOutput.fromJSON(e)) : [],\n            segmentOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentOutputs) ? object.segmentOutputs.map((e)=>exports.SegmentedFileOutput.fromJSON(e)) : [],\n            imageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.imageOutputs) ? object.imageOutputs.map((e)=>exports.ImageOutput.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.identity !== undefined && (obj.identity = message.identity);\n        message.screenShare !== undefined && (obj.screenShare = message.screenShare);\n        message.preset !== undefined && (obj.preset = message.preset !== undefined ? encodingOptionsPresetToJSON(message.preset) : undefined);\n        message.advanced !== undefined && (obj.advanced = message.advanced ? exports.EncodingOptions.toJSON(message.advanced) : undefined);\n        if (message.fileOutputs) {\n            obj.fileOutputs = message.fileOutputs.map((e)=>e ? exports.EncodedFileOutput.toJSON(e) : undefined);\n        } else {\n            obj.fileOutputs = [];\n        }\n        if (message.streamOutputs) {\n            obj.streamOutputs = message.streamOutputs.map((e)=>e ? exports.StreamOutput.toJSON(e) : undefined);\n        } else {\n            obj.streamOutputs = [];\n        }\n        if (message.segmentOutputs) {\n            obj.segmentOutputs = message.segmentOutputs.map((e)=>e ? exports.SegmentedFileOutput.toJSON(e) : undefined);\n        } else {\n            obj.segmentOutputs = [];\n        }\n        if (message.imageOutputs) {\n            obj.imageOutputs = message.imageOutputs.map((e)=>e ? exports.ImageOutput.toJSON(e) : undefined);\n        } else {\n            obj.imageOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const message = createBaseParticipantEgressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        message.screenShare = (_c = object.screenShare) !== null && _c !== void 0 ? _c : false;\n        message.preset = (_d = object.preset) !== null && _d !== void 0 ? _d : undefined;\n        message.advanced = object.advanced !== undefined && object.advanced !== null ? exports.EncodingOptions.fromPartial(object.advanced) : undefined;\n        message.fileOutputs = ((_e = object.fileOutputs) === null || _e === void 0 ? void 0 : _e.map((e)=>exports.EncodedFileOutput.fromPartial(e))) || [];\n        message.streamOutputs = ((_f = object.streamOutputs) === null || _f === void 0 ? void 0 : _f.map((e)=>exports.StreamOutput.fromPartial(e))) || [];\n        message.segmentOutputs = ((_g = object.segmentOutputs) === null || _g === void 0 ? void 0 : _g.map((e)=>exports.SegmentedFileOutput.fromPartial(e))) || [];\n        message.imageOutputs = ((_h = object.imageOutputs) === null || _h === void 0 ? void 0 : _h.map((e)=>exports.ImageOutput.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseTrackCompositeEgressRequest() {\n    return {\n        roomName: \"\",\n        audioTrackId: \"\",\n        videoTrackId: \"\",\n        file: undefined,\n        stream: undefined,\n        segments: undefined,\n        preset: undefined,\n        advanced: undefined,\n        fileOutputs: [],\n        streamOutputs: [],\n        segmentOutputs: [],\n        imageOutputs: []\n    };\n}\nexports.TrackCompositeEgressRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.audioTrackId !== undefined && message.audioTrackId !== \"\") {\n            writer.uint32(18).string(message.audioTrackId);\n        }\n        if (message.videoTrackId !== undefined && message.videoTrackId !== \"\") {\n            writer.uint32(26).string(message.videoTrackId);\n        }\n        if (message.file !== undefined) {\n            exports.EncodedFileOutput.encode(message.file, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.stream !== undefined) {\n            exports.StreamOutput.encode(message.stream, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.segments !== undefined) {\n            exports.SegmentedFileOutput.encode(message.segments, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(48).int32(message.preset);\n        }\n        if (message.advanced !== undefined) {\n            exports.EncodingOptions.encode(message.advanced, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.fileOutputs !== undefined && message.fileOutputs.length !== 0) {\n            for (const v of message.fileOutputs){\n                exports.EncodedFileOutput.encode(v, writer.uint32(90).fork()).ldelim();\n            }\n        }\n        if (message.streamOutputs !== undefined && message.streamOutputs.length !== 0) {\n            for (const v of message.streamOutputs){\n                exports.StreamOutput.encode(v, writer.uint32(98).fork()).ldelim();\n            }\n        }\n        if (message.segmentOutputs !== undefined && message.segmentOutputs.length !== 0) {\n            for (const v of message.segmentOutputs){\n                exports.SegmentedFileOutput.encode(v, writer.uint32(106).fork()).ldelim();\n            }\n        }\n        if (message.imageOutputs !== undefined && message.imageOutputs.length !== 0) {\n            for (const v of message.imageOutputs){\n                exports.ImageOutput.encode(v, writer.uint32(114).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTrackCompositeEgressRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.audioTrackId = reader.string();\n                    break;\n                case 3:\n                    message.videoTrackId = reader.string();\n                    break;\n                case 4:\n                    message.file = exports.EncodedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.stream = exports.StreamOutput.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.segments = exports.SegmentedFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.preset = reader.int32();\n                    break;\n                case 7:\n                    message.advanced = exports.EncodingOptions.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.fileOutputs.push(exports.EncodedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    message.streamOutputs.push(exports.StreamOutput.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    message.segmentOutputs.push(exports.SegmentedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.imageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            audioTrackId: isSet(object.audioTrackId) ? String(object.audioTrackId) : \"\",\n            videoTrackId: isSet(object.videoTrackId) ? String(object.videoTrackId) : \"\",\n            file: isSet(object.file) ? exports.EncodedFileOutput.fromJSON(object.file) : undefined,\n            stream: isSet(object.stream) ? exports.StreamOutput.fromJSON(object.stream) : undefined,\n            segments: isSet(object.segments) ? exports.SegmentedFileOutput.fromJSON(object.segments) : undefined,\n            preset: isSet(object.preset) ? encodingOptionsPresetFromJSON(object.preset) : undefined,\n            advanced: isSet(object.advanced) ? exports.EncodingOptions.fromJSON(object.advanced) : undefined,\n            fileOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.fileOutputs) ? object.fileOutputs.map((e)=>exports.EncodedFileOutput.fromJSON(e)) : [],\n            streamOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.streamOutputs) ? object.streamOutputs.map((e)=>exports.StreamOutput.fromJSON(e)) : [],\n            segmentOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentOutputs) ? object.segmentOutputs.map((e)=>exports.SegmentedFileOutput.fromJSON(e)) : [],\n            imageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.imageOutputs) ? object.imageOutputs.map((e)=>exports.ImageOutput.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.audioTrackId !== undefined && (obj.audioTrackId = message.audioTrackId);\n        message.videoTrackId !== undefined && (obj.videoTrackId = message.videoTrackId);\n        message.file !== undefined && (obj.file = message.file ? exports.EncodedFileOutput.toJSON(message.file) : undefined);\n        message.stream !== undefined && (obj.stream = message.stream ? exports.StreamOutput.toJSON(message.stream) : undefined);\n        message.segments !== undefined && (obj.segments = message.segments ? exports.SegmentedFileOutput.toJSON(message.segments) : undefined);\n        message.preset !== undefined && (obj.preset = message.preset !== undefined ? encodingOptionsPresetToJSON(message.preset) : undefined);\n        message.advanced !== undefined && (obj.advanced = message.advanced ? exports.EncodingOptions.toJSON(message.advanced) : undefined);\n        if (message.fileOutputs) {\n            obj.fileOutputs = message.fileOutputs.map((e)=>e ? exports.EncodedFileOutput.toJSON(e) : undefined);\n        } else {\n            obj.fileOutputs = [];\n        }\n        if (message.streamOutputs) {\n            obj.streamOutputs = message.streamOutputs.map((e)=>e ? exports.StreamOutput.toJSON(e) : undefined);\n        } else {\n            obj.streamOutputs = [];\n        }\n        if (message.segmentOutputs) {\n            obj.segmentOutputs = message.segmentOutputs.map((e)=>e ? exports.SegmentedFileOutput.toJSON(e) : undefined);\n        } else {\n            obj.segmentOutputs = [];\n        }\n        if (message.imageOutputs) {\n            obj.imageOutputs = message.imageOutputs.map((e)=>e ? exports.ImageOutput.toJSON(e) : undefined);\n        } else {\n            obj.imageOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const message = createBaseTrackCompositeEgressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.audioTrackId = (_b = object.audioTrackId) !== null && _b !== void 0 ? _b : \"\";\n        message.videoTrackId = (_c = object.videoTrackId) !== null && _c !== void 0 ? _c : \"\";\n        message.file = object.file !== undefined && object.file !== null ? exports.EncodedFileOutput.fromPartial(object.file) : undefined;\n        message.stream = object.stream !== undefined && object.stream !== null ? exports.StreamOutput.fromPartial(object.stream) : undefined;\n        message.segments = object.segments !== undefined && object.segments !== null ? exports.SegmentedFileOutput.fromPartial(object.segments) : undefined;\n        message.preset = (_d = object.preset) !== null && _d !== void 0 ? _d : undefined;\n        message.advanced = object.advanced !== undefined && object.advanced !== null ? exports.EncodingOptions.fromPartial(object.advanced) : undefined;\n        message.fileOutputs = ((_e = object.fileOutputs) === null || _e === void 0 ? void 0 : _e.map((e)=>exports.EncodedFileOutput.fromPartial(e))) || [];\n        message.streamOutputs = ((_f = object.streamOutputs) === null || _f === void 0 ? void 0 : _f.map((e)=>exports.StreamOutput.fromPartial(e))) || [];\n        message.segmentOutputs = ((_g = object.segmentOutputs) === null || _g === void 0 ? void 0 : _g.map((e)=>exports.SegmentedFileOutput.fromPartial(e))) || [];\n        message.imageOutputs = ((_h = object.imageOutputs) === null || _h === void 0 ? void 0 : _h.map((e)=>exports.ImageOutput.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseTrackEgressRequest() {\n    return {\n        roomName: \"\",\n        trackId: \"\",\n        file: undefined,\n        websocketUrl: undefined\n    };\n}\nexports.TrackEgressRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.trackId !== undefined && message.trackId !== \"\") {\n            writer.uint32(18).string(message.trackId);\n        }\n        if (message.file !== undefined) {\n            exports.DirectFileOutput.encode(message.file, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.websocketUrl !== undefined) {\n            writer.uint32(34).string(message.websocketUrl);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTrackEgressRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.trackId = reader.string();\n                    break;\n                case 3:\n                    message.file = exports.DirectFileOutput.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.websocketUrl = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            trackId: isSet(object.trackId) ? String(object.trackId) : \"\",\n            file: isSet(object.file) ? exports.DirectFileOutput.fromJSON(object.file) : undefined,\n            websocketUrl: isSet(object.websocketUrl) ? String(object.websocketUrl) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.trackId !== undefined && (obj.trackId = message.trackId);\n        message.file !== undefined && (obj.file = message.file ? exports.DirectFileOutput.toJSON(message.file) : undefined);\n        message.websocketUrl !== undefined && (obj.websocketUrl = message.websocketUrl);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseTrackEgressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.trackId = (_b = object.trackId) !== null && _b !== void 0 ? _b : \"\";\n        message.file = object.file !== undefined && object.file !== null ? exports.DirectFileOutput.fromPartial(object.file) : undefined;\n        message.websocketUrl = (_c = object.websocketUrl) !== null && _c !== void 0 ? _c : undefined;\n        return message;\n    }\n};\nfunction createBaseEncodedFileOutput() {\n    return {\n        fileType: 0,\n        filepath: \"\",\n        disableManifest: false,\n        s3: undefined,\n        gcp: undefined,\n        azure: undefined,\n        aliOSS: undefined\n    };\n}\nexports.EncodedFileOutput = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.fileType !== undefined && message.fileType !== 0) {\n            writer.uint32(8).int32(message.fileType);\n        }\n        if (message.filepath !== undefined && message.filepath !== \"\") {\n            writer.uint32(18).string(message.filepath);\n        }\n        if (message.disableManifest === true) {\n            writer.uint32(48).bool(message.disableManifest);\n        }\n        if (message.s3 !== undefined) {\n            exports.S3Upload.encode(message.s3, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.gcp !== undefined) {\n            exports.GCPUpload.encode(message.gcp, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.azure !== undefined) {\n            exports.AzureBlobUpload.encode(message.azure, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.aliOSS !== undefined) {\n            exports.AliOSSUpload.encode(message.aliOSS, writer.uint32(58).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncodedFileOutput();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.fileType = reader.int32();\n                    break;\n                case 2:\n                    message.filepath = reader.string();\n                    break;\n                case 6:\n                    message.disableManifest = reader.bool();\n                    break;\n                case 3:\n                    message.s3 = exports.S3Upload.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.gcp = exports.GCPUpload.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.azure = exports.AzureBlobUpload.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.aliOSS = exports.AliOSSUpload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            fileType: isSet(object.fileType) ? encodedFileTypeFromJSON(object.fileType) : 0,\n            filepath: isSet(object.filepath) ? String(object.filepath) : \"\",\n            disableManifest: isSet(object.disableManifest) ? Boolean(object.disableManifest) : false,\n            s3: isSet(object.s3) ? exports.S3Upload.fromJSON(object.s3) : undefined,\n            gcp: isSet(object.gcp) ? exports.GCPUpload.fromJSON(object.gcp) : undefined,\n            azure: isSet(object.azure) ? exports.AzureBlobUpload.fromJSON(object.azure) : undefined,\n            aliOSS: isSet(object.aliOSS) ? exports.AliOSSUpload.fromJSON(object.aliOSS) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.fileType !== undefined && (obj.fileType = encodedFileTypeToJSON(message.fileType));\n        message.filepath !== undefined && (obj.filepath = message.filepath);\n        message.disableManifest !== undefined && (obj.disableManifest = message.disableManifest);\n        message.s3 !== undefined && (obj.s3 = message.s3 ? exports.S3Upload.toJSON(message.s3) : undefined);\n        message.gcp !== undefined && (obj.gcp = message.gcp ? exports.GCPUpload.toJSON(message.gcp) : undefined);\n        message.azure !== undefined && (obj.azure = message.azure ? exports.AzureBlobUpload.toJSON(message.azure) : undefined);\n        message.aliOSS !== undefined && (obj.aliOSS = message.aliOSS ? exports.AliOSSUpload.toJSON(message.aliOSS) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseEncodedFileOutput();\n        message.fileType = (_a = object.fileType) !== null && _a !== void 0 ? _a : 0;\n        message.filepath = (_b = object.filepath) !== null && _b !== void 0 ? _b : \"\";\n        message.disableManifest = (_c = object.disableManifest) !== null && _c !== void 0 ? _c : false;\n        message.s3 = object.s3 !== undefined && object.s3 !== null ? exports.S3Upload.fromPartial(object.s3) : undefined;\n        message.gcp = object.gcp !== undefined && object.gcp !== null ? exports.GCPUpload.fromPartial(object.gcp) : undefined;\n        message.azure = object.azure !== undefined && object.azure !== null ? exports.AzureBlobUpload.fromPartial(object.azure) : undefined;\n        message.aliOSS = object.aliOSS !== undefined && object.aliOSS !== null ? exports.AliOSSUpload.fromPartial(object.aliOSS) : undefined;\n        return message;\n    }\n};\nfunction createBaseSegmentedFileOutput() {\n    return {\n        protocol: 0,\n        filenamePrefix: \"\",\n        playlistName: \"\",\n        livePlaylistName: \"\",\n        segmentDuration: 0,\n        filenameSuffix: 0,\n        disableManifest: false,\n        s3: undefined,\n        gcp: undefined,\n        azure: undefined,\n        aliOSS: undefined\n    };\n}\nexports.SegmentedFileOutput = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.protocol !== undefined && message.protocol !== 0) {\n            writer.uint32(8).int32(message.protocol);\n        }\n        if (message.filenamePrefix !== undefined && message.filenamePrefix !== \"\") {\n            writer.uint32(18).string(message.filenamePrefix);\n        }\n        if (message.playlistName !== undefined && message.playlistName !== \"\") {\n            writer.uint32(26).string(message.playlistName);\n        }\n        if (message.livePlaylistName !== undefined && message.livePlaylistName !== \"\") {\n            writer.uint32(90).string(message.livePlaylistName);\n        }\n        if (message.segmentDuration !== undefined && message.segmentDuration !== 0) {\n            writer.uint32(32).uint32(message.segmentDuration);\n        }\n        if (message.filenameSuffix !== undefined && message.filenameSuffix !== 0) {\n            writer.uint32(80).int32(message.filenameSuffix);\n        }\n        if (message.disableManifest === true) {\n            writer.uint32(64).bool(message.disableManifest);\n        }\n        if (message.s3 !== undefined) {\n            exports.S3Upload.encode(message.s3, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.gcp !== undefined) {\n            exports.GCPUpload.encode(message.gcp, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.azure !== undefined) {\n            exports.AzureBlobUpload.encode(message.azure, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.aliOSS !== undefined) {\n            exports.AliOSSUpload.encode(message.aliOSS, writer.uint32(74).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSegmentedFileOutput();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.protocol = reader.int32();\n                    break;\n                case 2:\n                    message.filenamePrefix = reader.string();\n                    break;\n                case 3:\n                    message.playlistName = reader.string();\n                    break;\n                case 11:\n                    message.livePlaylistName = reader.string();\n                    break;\n                case 4:\n                    message.segmentDuration = reader.uint32();\n                    break;\n                case 10:\n                    message.filenameSuffix = reader.int32();\n                    break;\n                case 8:\n                    message.disableManifest = reader.bool();\n                    break;\n                case 5:\n                    message.s3 = exports.S3Upload.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.gcp = exports.GCPUpload.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.azure = exports.AzureBlobUpload.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.aliOSS = exports.AliOSSUpload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            protocol: isSet(object.protocol) ? segmentedFileProtocolFromJSON(object.protocol) : 0,\n            filenamePrefix: isSet(object.filenamePrefix) ? String(object.filenamePrefix) : \"\",\n            playlistName: isSet(object.playlistName) ? String(object.playlistName) : \"\",\n            livePlaylistName: isSet(object.livePlaylistName) ? String(object.livePlaylistName) : \"\",\n            segmentDuration: isSet(object.segmentDuration) ? Number(object.segmentDuration) : 0,\n            filenameSuffix: isSet(object.filenameSuffix) ? segmentedFileSuffixFromJSON(object.filenameSuffix) : 0,\n            disableManifest: isSet(object.disableManifest) ? Boolean(object.disableManifest) : false,\n            s3: isSet(object.s3) ? exports.S3Upload.fromJSON(object.s3) : undefined,\n            gcp: isSet(object.gcp) ? exports.GCPUpload.fromJSON(object.gcp) : undefined,\n            azure: isSet(object.azure) ? exports.AzureBlobUpload.fromJSON(object.azure) : undefined,\n            aliOSS: isSet(object.aliOSS) ? exports.AliOSSUpload.fromJSON(object.aliOSS) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.protocol !== undefined && (obj.protocol = segmentedFileProtocolToJSON(message.protocol));\n        message.filenamePrefix !== undefined && (obj.filenamePrefix = message.filenamePrefix);\n        message.playlistName !== undefined && (obj.playlistName = message.playlistName);\n        message.livePlaylistName !== undefined && (obj.livePlaylistName = message.livePlaylistName);\n        message.segmentDuration !== undefined && (obj.segmentDuration = Math.round(message.segmentDuration));\n        message.filenameSuffix !== undefined && (obj.filenameSuffix = segmentedFileSuffixToJSON(message.filenameSuffix));\n        message.disableManifest !== undefined && (obj.disableManifest = message.disableManifest);\n        message.s3 !== undefined && (obj.s3 = message.s3 ? exports.S3Upload.toJSON(message.s3) : undefined);\n        message.gcp !== undefined && (obj.gcp = message.gcp ? exports.GCPUpload.toJSON(message.gcp) : undefined);\n        message.azure !== undefined && (obj.azure = message.azure ? exports.AzureBlobUpload.toJSON(message.azure) : undefined);\n        message.aliOSS !== undefined && (obj.aliOSS = message.aliOSS ? exports.AliOSSUpload.toJSON(message.aliOSS) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const message = createBaseSegmentedFileOutput();\n        message.protocol = (_a = object.protocol) !== null && _a !== void 0 ? _a : 0;\n        message.filenamePrefix = (_b = object.filenamePrefix) !== null && _b !== void 0 ? _b : \"\";\n        message.playlistName = (_c = object.playlistName) !== null && _c !== void 0 ? _c : \"\";\n        message.livePlaylistName = (_d = object.livePlaylistName) !== null && _d !== void 0 ? _d : \"\";\n        message.segmentDuration = (_e = object.segmentDuration) !== null && _e !== void 0 ? _e : 0;\n        message.filenameSuffix = (_f = object.filenameSuffix) !== null && _f !== void 0 ? _f : 0;\n        message.disableManifest = (_g = object.disableManifest) !== null && _g !== void 0 ? _g : false;\n        message.s3 = object.s3 !== undefined && object.s3 !== null ? exports.S3Upload.fromPartial(object.s3) : undefined;\n        message.gcp = object.gcp !== undefined && object.gcp !== null ? exports.GCPUpload.fromPartial(object.gcp) : undefined;\n        message.azure = object.azure !== undefined && object.azure !== null ? exports.AzureBlobUpload.fromPartial(object.azure) : undefined;\n        message.aliOSS = object.aliOSS !== undefined && object.aliOSS !== null ? exports.AliOSSUpload.fromPartial(object.aliOSS) : undefined;\n        return message;\n    }\n};\nfunction createBaseDirectFileOutput() {\n    return {\n        filepath: \"\",\n        disableManifest: false,\n        s3: undefined,\n        gcp: undefined,\n        azure: undefined,\n        aliOSS: undefined\n    };\n}\nexports.DirectFileOutput = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.filepath !== undefined && message.filepath !== \"\") {\n            writer.uint32(10).string(message.filepath);\n        }\n        if (message.disableManifest === true) {\n            writer.uint32(40).bool(message.disableManifest);\n        }\n        if (message.s3 !== undefined) {\n            exports.S3Upload.encode(message.s3, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.gcp !== undefined) {\n            exports.GCPUpload.encode(message.gcp, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.azure !== undefined) {\n            exports.AzureBlobUpload.encode(message.azure, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.aliOSS !== undefined) {\n            exports.AliOSSUpload.encode(message.aliOSS, writer.uint32(50).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDirectFileOutput();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.filepath = reader.string();\n                    break;\n                case 5:\n                    message.disableManifest = reader.bool();\n                    break;\n                case 2:\n                    message.s3 = exports.S3Upload.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.gcp = exports.GCPUpload.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.azure = exports.AzureBlobUpload.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.aliOSS = exports.AliOSSUpload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            filepath: isSet(object.filepath) ? String(object.filepath) : \"\",\n            disableManifest: isSet(object.disableManifest) ? Boolean(object.disableManifest) : false,\n            s3: isSet(object.s3) ? exports.S3Upload.fromJSON(object.s3) : undefined,\n            gcp: isSet(object.gcp) ? exports.GCPUpload.fromJSON(object.gcp) : undefined,\n            azure: isSet(object.azure) ? exports.AzureBlobUpload.fromJSON(object.azure) : undefined,\n            aliOSS: isSet(object.aliOSS) ? exports.AliOSSUpload.fromJSON(object.aliOSS) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.filepath !== undefined && (obj.filepath = message.filepath);\n        message.disableManifest !== undefined && (obj.disableManifest = message.disableManifest);\n        message.s3 !== undefined && (obj.s3 = message.s3 ? exports.S3Upload.toJSON(message.s3) : undefined);\n        message.gcp !== undefined && (obj.gcp = message.gcp ? exports.GCPUpload.toJSON(message.gcp) : undefined);\n        message.azure !== undefined && (obj.azure = message.azure ? exports.AzureBlobUpload.toJSON(message.azure) : undefined);\n        message.aliOSS !== undefined && (obj.aliOSS = message.aliOSS ? exports.AliOSSUpload.toJSON(message.aliOSS) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseDirectFileOutput();\n        message.filepath = (_a = object.filepath) !== null && _a !== void 0 ? _a : \"\";\n        message.disableManifest = (_b = object.disableManifest) !== null && _b !== void 0 ? _b : false;\n        message.s3 = object.s3 !== undefined && object.s3 !== null ? exports.S3Upload.fromPartial(object.s3) : undefined;\n        message.gcp = object.gcp !== undefined && object.gcp !== null ? exports.GCPUpload.fromPartial(object.gcp) : undefined;\n        message.azure = object.azure !== undefined && object.azure !== null ? exports.AzureBlobUpload.fromPartial(object.azure) : undefined;\n        message.aliOSS = object.aliOSS !== undefined && object.aliOSS !== null ? exports.AliOSSUpload.fromPartial(object.aliOSS) : undefined;\n        return message;\n    }\n};\nfunction createBaseImageOutput() {\n    return {\n        captureInterval: 0,\n        width: 0,\n        height: 0,\n        filenamePrefix: \"\",\n        filenameSuffix: 0,\n        imageCodec: 0,\n        disableManifest: false,\n        s3: undefined,\n        gcp: undefined,\n        azure: undefined,\n        aliOSS: undefined\n    };\n}\nexports.ImageOutput = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.captureInterval !== undefined && message.captureInterval !== 0) {\n            writer.uint32(8).uint32(message.captureInterval);\n        }\n        if (message.width !== undefined && message.width !== 0) {\n            writer.uint32(16).int32(message.width);\n        }\n        if (message.height !== undefined && message.height !== 0) {\n            writer.uint32(24).int32(message.height);\n        }\n        if (message.filenamePrefix !== undefined && message.filenamePrefix !== \"\") {\n            writer.uint32(34).string(message.filenamePrefix);\n        }\n        if (message.filenameSuffix !== undefined && message.filenameSuffix !== 0) {\n            writer.uint32(40).int32(message.filenameSuffix);\n        }\n        if (message.imageCodec !== undefined && message.imageCodec !== 0) {\n            writer.uint32(48).int32(message.imageCodec);\n        }\n        if (message.disableManifest === true) {\n            writer.uint32(56).bool(message.disableManifest);\n        }\n        if (message.s3 !== undefined) {\n            exports.S3Upload.encode(message.s3, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.gcp !== undefined) {\n            exports.GCPUpload.encode(message.gcp, writer.uint32(74).fork()).ldelim();\n        }\n        if (message.azure !== undefined) {\n            exports.AzureBlobUpload.encode(message.azure, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.aliOSS !== undefined) {\n            exports.AliOSSUpload.encode(message.aliOSS, writer.uint32(90).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseImageOutput();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.captureInterval = reader.uint32();\n                    break;\n                case 2:\n                    message.width = reader.int32();\n                    break;\n                case 3:\n                    message.height = reader.int32();\n                    break;\n                case 4:\n                    message.filenamePrefix = reader.string();\n                    break;\n                case 5:\n                    message.filenameSuffix = reader.int32();\n                    break;\n                case 6:\n                    message.imageCodec = reader.int32();\n                    break;\n                case 7:\n                    message.disableManifest = reader.bool();\n                    break;\n                case 8:\n                    message.s3 = exports.S3Upload.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.gcp = exports.GCPUpload.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.azure = exports.AzureBlobUpload.decode(reader, reader.uint32());\n                    break;\n                case 11:\n                    message.aliOSS = exports.AliOSSUpload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            captureInterval: isSet(object.captureInterval) ? Number(object.captureInterval) : 0,\n            width: isSet(object.width) ? Number(object.width) : 0,\n            height: isSet(object.height) ? Number(object.height) : 0,\n            filenamePrefix: isSet(object.filenamePrefix) ? String(object.filenamePrefix) : \"\",\n            filenameSuffix: isSet(object.filenameSuffix) ? imageFileSuffixFromJSON(object.filenameSuffix) : 0,\n            imageCodec: isSet(object.imageCodec) ? livekit_models_1.imageCodecFromJSON(object.imageCodec) : 0,\n            disableManifest: isSet(object.disableManifest) ? Boolean(object.disableManifest) : false,\n            s3: isSet(object.s3) ? exports.S3Upload.fromJSON(object.s3) : undefined,\n            gcp: isSet(object.gcp) ? exports.GCPUpload.fromJSON(object.gcp) : undefined,\n            azure: isSet(object.azure) ? exports.AzureBlobUpload.fromJSON(object.azure) : undefined,\n            aliOSS: isSet(object.aliOSS) ? exports.AliOSSUpload.fromJSON(object.aliOSS) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.captureInterval !== undefined && (obj.captureInterval = Math.round(message.captureInterval));\n        message.width !== undefined && (obj.width = Math.round(message.width));\n        message.height !== undefined && (obj.height = Math.round(message.height));\n        message.filenamePrefix !== undefined && (obj.filenamePrefix = message.filenamePrefix);\n        message.filenameSuffix !== undefined && (obj.filenameSuffix = imageFileSuffixToJSON(message.filenameSuffix));\n        message.imageCodec !== undefined && (obj.imageCodec = livekit_models_1.imageCodecToJSON(message.imageCodec));\n        message.disableManifest !== undefined && (obj.disableManifest = message.disableManifest);\n        message.s3 !== undefined && (obj.s3 = message.s3 ? exports.S3Upload.toJSON(message.s3) : undefined);\n        message.gcp !== undefined && (obj.gcp = message.gcp ? exports.GCPUpload.toJSON(message.gcp) : undefined);\n        message.azure !== undefined && (obj.azure = message.azure ? exports.AzureBlobUpload.toJSON(message.azure) : undefined);\n        message.aliOSS !== undefined && (obj.aliOSS = message.aliOSS ? exports.AliOSSUpload.toJSON(message.aliOSS) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const message = createBaseImageOutput();\n        message.captureInterval = (_a = object.captureInterval) !== null && _a !== void 0 ? _a : 0;\n        message.width = (_b = object.width) !== null && _b !== void 0 ? _b : 0;\n        message.height = (_c = object.height) !== null && _c !== void 0 ? _c : 0;\n        message.filenamePrefix = (_d = object.filenamePrefix) !== null && _d !== void 0 ? _d : \"\";\n        message.filenameSuffix = (_e = object.filenameSuffix) !== null && _e !== void 0 ? _e : 0;\n        message.imageCodec = (_f = object.imageCodec) !== null && _f !== void 0 ? _f : 0;\n        message.disableManifest = (_g = object.disableManifest) !== null && _g !== void 0 ? _g : false;\n        message.s3 = object.s3 !== undefined && object.s3 !== null ? exports.S3Upload.fromPartial(object.s3) : undefined;\n        message.gcp = object.gcp !== undefined && object.gcp !== null ? exports.GCPUpload.fromPartial(object.gcp) : undefined;\n        message.azure = object.azure !== undefined && object.azure !== null ? exports.AzureBlobUpload.fromPartial(object.azure) : undefined;\n        message.aliOSS = object.aliOSS !== undefined && object.aliOSS !== null ? exports.AliOSSUpload.fromPartial(object.aliOSS) : undefined;\n        return message;\n    }\n};\nfunction createBaseS3Upload() {\n    return {\n        accessKey: \"\",\n        secret: \"\",\n        region: \"\",\n        endpoint: \"\",\n        bucket: \"\",\n        forcePathStyle: false,\n        metadata: {},\n        tagging: \"\"\n    };\n}\nexports.S3Upload = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.accessKey !== undefined && message.accessKey !== \"\") {\n            writer.uint32(10).string(message.accessKey);\n        }\n        if (message.secret !== undefined && message.secret !== \"\") {\n            writer.uint32(18).string(message.secret);\n        }\n        if (message.region !== undefined && message.region !== \"\") {\n            writer.uint32(26).string(message.region);\n        }\n        if (message.endpoint !== undefined && message.endpoint !== \"\") {\n            writer.uint32(34).string(message.endpoint);\n        }\n        if (message.bucket !== undefined && message.bucket !== \"\") {\n            writer.uint32(42).string(message.bucket);\n        }\n        if (message.forcePathStyle === true) {\n            writer.uint32(48).bool(message.forcePathStyle);\n        }\n        Object.entries(message.metadata || {}).forEach(([key, value])=>{\n            exports.S3Upload_MetadataEntry.encode({\n                key: key,\n                value\n            }, writer.uint32(58).fork()).ldelim();\n        });\n        if (message.tagging !== undefined && message.tagging !== \"\") {\n            writer.uint32(66).string(message.tagging);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseS3Upload();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.accessKey = reader.string();\n                    break;\n                case 2:\n                    message.secret = reader.string();\n                    break;\n                case 3:\n                    message.region = reader.string();\n                    break;\n                case 4:\n                    message.endpoint = reader.string();\n                    break;\n                case 5:\n                    message.bucket = reader.string();\n                    break;\n                case 6:\n                    message.forcePathStyle = reader.bool();\n                    break;\n                case 7:\n                    const entry7 = exports.S3Upload_MetadataEntry.decode(reader, reader.uint32());\n                    if (entry7.value !== undefined) {\n                        message.metadata[entry7.key] = entry7.value;\n                    }\n                    break;\n                case 8:\n                    message.tagging = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            accessKey: isSet(object.accessKey) ? String(object.accessKey) : \"\",\n            secret: isSet(object.secret) ? String(object.secret) : \"\",\n            region: isSet(object.region) ? String(object.region) : \"\",\n            endpoint: isSet(object.endpoint) ? String(object.endpoint) : \"\",\n            bucket: isSet(object.bucket) ? String(object.bucket) : \"\",\n            forcePathStyle: isSet(object.forcePathStyle) ? Boolean(object.forcePathStyle) : false,\n            metadata: isObject(object.metadata) ? Object.entries(object.metadata).reduce((acc, [key, value])=>{\n                acc[key] = String(value);\n                return acc;\n            }, {}) : {},\n            tagging: isSet(object.tagging) ? String(object.tagging) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.accessKey !== undefined && (obj.accessKey = message.accessKey);\n        message.secret !== undefined && (obj.secret = message.secret);\n        message.region !== undefined && (obj.region = message.region);\n        message.endpoint !== undefined && (obj.endpoint = message.endpoint);\n        message.bucket !== undefined && (obj.bucket = message.bucket);\n        message.forcePathStyle !== undefined && (obj.forcePathStyle = message.forcePathStyle);\n        obj.metadata = {};\n        if (message.metadata) {\n            Object.entries(message.metadata).forEach(([k, v])=>{\n                obj.metadata[k] = v;\n            });\n        }\n        message.tagging !== undefined && (obj.tagging = message.tagging);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const message = createBaseS3Upload();\n        message.accessKey = (_a = object.accessKey) !== null && _a !== void 0 ? _a : \"\";\n        message.secret = (_b = object.secret) !== null && _b !== void 0 ? _b : \"\";\n        message.region = (_c = object.region) !== null && _c !== void 0 ? _c : \"\";\n        message.endpoint = (_d = object.endpoint) !== null && _d !== void 0 ? _d : \"\";\n        message.bucket = (_e = object.bucket) !== null && _e !== void 0 ? _e : \"\";\n        message.forcePathStyle = (_f = object.forcePathStyle) !== null && _f !== void 0 ? _f : false;\n        message.metadata = Object.entries((_g = object.metadata) !== null && _g !== void 0 ? _g : {}).reduce((acc, [key, value])=>{\n            if (value !== undefined) {\n                acc[key] = String(value);\n            }\n            return acc;\n        }, {});\n        message.tagging = (_h = object.tagging) !== null && _h !== void 0 ? _h : \"\";\n        return message;\n    }\n};\nfunction createBaseS3Upload_MetadataEntry() {\n    return {\n        key: \"\",\n        value: \"\"\n    };\n}\nexports.S3Upload_MetadataEntry = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.key !== \"\") {\n            writer.uint32(10).string(message.key);\n        }\n        if (message.value !== \"\") {\n            writer.uint32(18).string(message.value);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseS3Upload_MetadataEntry();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            key: isSet(object.key) ? String(object.key) : \"\",\n            value: isSet(object.value) ? String(object.value) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = message.key);\n        message.value !== undefined && (obj.value = message.value);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseS3Upload_MetadataEntry();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : \"\";\n        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    }\n};\nfunction createBaseGCPUpload() {\n    return {\n        credentials: \"\",\n        bucket: \"\"\n    };\n}\nexports.GCPUpload = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.credentials !== undefined && message.credentials !== \"\") {\n            writer.uint32(10).string(message.credentials);\n        }\n        if (message.bucket !== undefined && message.bucket !== \"\") {\n            writer.uint32(18).string(message.bucket);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGCPUpload();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.credentials = reader.string();\n                    break;\n                case 2:\n                    message.bucket = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            credentials: isSet(object.credentials) ? String(object.credentials) : \"\",\n            bucket: isSet(object.bucket) ? String(object.bucket) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.credentials !== undefined && (obj.credentials = message.credentials);\n        message.bucket !== undefined && (obj.bucket = message.bucket);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseGCPUpload();\n        message.credentials = (_a = object.credentials) !== null && _a !== void 0 ? _a : \"\";\n        message.bucket = (_b = object.bucket) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    }\n};\nfunction createBaseAzureBlobUpload() {\n    return {\n        accountName: \"\",\n        accountKey: \"\",\n        containerName: \"\"\n    };\n}\nexports.AzureBlobUpload = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.accountName !== undefined && message.accountName !== \"\") {\n            writer.uint32(10).string(message.accountName);\n        }\n        if (message.accountKey !== undefined && message.accountKey !== \"\") {\n            writer.uint32(18).string(message.accountKey);\n        }\n        if (message.containerName !== undefined && message.containerName !== \"\") {\n            writer.uint32(26).string(message.containerName);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAzureBlobUpload();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.accountName = reader.string();\n                    break;\n                case 2:\n                    message.accountKey = reader.string();\n                    break;\n                case 3:\n                    message.containerName = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            accountName: isSet(object.accountName) ? String(object.accountName) : \"\",\n            accountKey: isSet(object.accountKey) ? String(object.accountKey) : \"\",\n            containerName: isSet(object.containerName) ? String(object.containerName) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.accountName !== undefined && (obj.accountName = message.accountName);\n        message.accountKey !== undefined && (obj.accountKey = message.accountKey);\n        message.containerName !== undefined && (obj.containerName = message.containerName);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseAzureBlobUpload();\n        message.accountName = (_a = object.accountName) !== null && _a !== void 0 ? _a : \"\";\n        message.accountKey = (_b = object.accountKey) !== null && _b !== void 0 ? _b : \"\";\n        message.containerName = (_c = object.containerName) !== null && _c !== void 0 ? _c : \"\";\n        return message;\n    }\n};\nfunction createBaseAliOSSUpload() {\n    return {\n        accessKey: \"\",\n        secret: \"\",\n        region: \"\",\n        endpoint: \"\",\n        bucket: \"\"\n    };\n}\nexports.AliOSSUpload = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.accessKey !== undefined && message.accessKey !== \"\") {\n            writer.uint32(10).string(message.accessKey);\n        }\n        if (message.secret !== undefined && message.secret !== \"\") {\n            writer.uint32(18).string(message.secret);\n        }\n        if (message.region !== undefined && message.region !== \"\") {\n            writer.uint32(26).string(message.region);\n        }\n        if (message.endpoint !== undefined && message.endpoint !== \"\") {\n            writer.uint32(34).string(message.endpoint);\n        }\n        if (message.bucket !== undefined && message.bucket !== \"\") {\n            writer.uint32(42).string(message.bucket);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAliOSSUpload();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.accessKey = reader.string();\n                    break;\n                case 2:\n                    message.secret = reader.string();\n                    break;\n                case 3:\n                    message.region = reader.string();\n                    break;\n                case 4:\n                    message.endpoint = reader.string();\n                    break;\n                case 5:\n                    message.bucket = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            accessKey: isSet(object.accessKey) ? String(object.accessKey) : \"\",\n            secret: isSet(object.secret) ? String(object.secret) : \"\",\n            region: isSet(object.region) ? String(object.region) : \"\",\n            endpoint: isSet(object.endpoint) ? String(object.endpoint) : \"\",\n            bucket: isSet(object.bucket) ? String(object.bucket) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.accessKey !== undefined && (obj.accessKey = message.accessKey);\n        message.secret !== undefined && (obj.secret = message.secret);\n        message.region !== undefined && (obj.region = message.region);\n        message.endpoint !== undefined && (obj.endpoint = message.endpoint);\n        message.bucket !== undefined && (obj.bucket = message.bucket);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e;\n        const message = createBaseAliOSSUpload();\n        message.accessKey = (_a = object.accessKey) !== null && _a !== void 0 ? _a : \"\";\n        message.secret = (_b = object.secret) !== null && _b !== void 0 ? _b : \"\";\n        message.region = (_c = object.region) !== null && _c !== void 0 ? _c : \"\";\n        message.endpoint = (_d = object.endpoint) !== null && _d !== void 0 ? _d : \"\";\n        message.bucket = (_e = object.bucket) !== null && _e !== void 0 ? _e : \"\";\n        return message;\n    }\n};\nfunction createBaseStreamOutput() {\n    return {\n        protocol: 0,\n        urls: []\n    };\n}\nexports.StreamOutput = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.protocol !== undefined && message.protocol !== 0) {\n            writer.uint32(8).int32(message.protocol);\n        }\n        if (message.urls !== undefined && message.urls.length !== 0) {\n            for (const v of message.urls){\n                writer.uint32(18).string(v);\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStreamOutput();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.protocol = reader.int32();\n                    break;\n                case 2:\n                    message.urls.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            protocol: isSet(object.protocol) ? streamProtocolFromJSON(object.protocol) : 0,\n            urls: Array.isArray(object === null || object === void 0 ? void 0 : object.urls) ? object.urls.map((e)=>String(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.protocol !== undefined && (obj.protocol = streamProtocolToJSON(message.protocol));\n        if (message.urls) {\n            obj.urls = message.urls.map((e)=>e);\n        } else {\n            obj.urls = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseStreamOutput();\n        message.protocol = (_a = object.protocol) !== null && _a !== void 0 ? _a : 0;\n        message.urls = ((_b = object.urls) === null || _b === void 0 ? void 0 : _b.map((e)=>e)) || [];\n        return message;\n    }\n};\nfunction createBaseEncodingOptions() {\n    return {\n        width: 0,\n        height: 0,\n        depth: 0,\n        framerate: 0,\n        audioCodec: 0,\n        audioBitrate: 0,\n        audioFrequency: 0,\n        videoCodec: 0,\n        videoBitrate: 0,\n        keyFrameInterval: 0\n    };\n}\nexports.EncodingOptions = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.width !== undefined && message.width !== 0) {\n            writer.uint32(8).int32(message.width);\n        }\n        if (message.height !== undefined && message.height !== 0) {\n            writer.uint32(16).int32(message.height);\n        }\n        if (message.depth !== undefined && message.depth !== 0) {\n            writer.uint32(24).int32(message.depth);\n        }\n        if (message.framerate !== undefined && message.framerate !== 0) {\n            writer.uint32(32).int32(message.framerate);\n        }\n        if (message.audioCodec !== undefined && message.audioCodec !== 0) {\n            writer.uint32(40).int32(message.audioCodec);\n        }\n        if (message.audioBitrate !== undefined && message.audioBitrate !== 0) {\n            writer.uint32(48).int32(message.audioBitrate);\n        }\n        if (message.audioFrequency !== undefined && message.audioFrequency !== 0) {\n            writer.uint32(56).int32(message.audioFrequency);\n        }\n        if (message.videoCodec !== undefined && message.videoCodec !== 0) {\n            writer.uint32(64).int32(message.videoCodec);\n        }\n        if (message.videoBitrate !== undefined && message.videoBitrate !== 0) {\n            writer.uint32(72).int32(message.videoBitrate);\n        }\n        if (message.keyFrameInterval !== undefined && message.keyFrameInterval !== 0) {\n            writer.uint32(81).double(message.keyFrameInterval);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncodingOptions();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.width = reader.int32();\n                    break;\n                case 2:\n                    message.height = reader.int32();\n                    break;\n                case 3:\n                    message.depth = reader.int32();\n                    break;\n                case 4:\n                    message.framerate = reader.int32();\n                    break;\n                case 5:\n                    message.audioCodec = reader.int32();\n                    break;\n                case 6:\n                    message.audioBitrate = reader.int32();\n                    break;\n                case 7:\n                    message.audioFrequency = reader.int32();\n                    break;\n                case 8:\n                    message.videoCodec = reader.int32();\n                    break;\n                case 9:\n                    message.videoBitrate = reader.int32();\n                    break;\n                case 10:\n                    message.keyFrameInterval = reader.double();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            width: isSet(object.width) ? Number(object.width) : 0,\n            height: isSet(object.height) ? Number(object.height) : 0,\n            depth: isSet(object.depth) ? Number(object.depth) : 0,\n            framerate: isSet(object.framerate) ? Number(object.framerate) : 0,\n            audioCodec: isSet(object.audioCodec) ? livekit_models_1.audioCodecFromJSON(object.audioCodec) : 0,\n            audioBitrate: isSet(object.audioBitrate) ? Number(object.audioBitrate) : 0,\n            audioFrequency: isSet(object.audioFrequency) ? Number(object.audioFrequency) : 0,\n            videoCodec: isSet(object.videoCodec) ? livekit_models_1.videoCodecFromJSON(object.videoCodec) : 0,\n            videoBitrate: isSet(object.videoBitrate) ? Number(object.videoBitrate) : 0,\n            keyFrameInterval: isSet(object.keyFrameInterval) ? Number(object.keyFrameInterval) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.width !== undefined && (obj.width = Math.round(message.width));\n        message.height !== undefined && (obj.height = Math.round(message.height));\n        message.depth !== undefined && (obj.depth = Math.round(message.depth));\n        message.framerate !== undefined && (obj.framerate = Math.round(message.framerate));\n        message.audioCodec !== undefined && (obj.audioCodec = livekit_models_1.audioCodecToJSON(message.audioCodec));\n        message.audioBitrate !== undefined && (obj.audioBitrate = Math.round(message.audioBitrate));\n        message.audioFrequency !== undefined && (obj.audioFrequency = Math.round(message.audioFrequency));\n        message.videoCodec !== undefined && (obj.videoCodec = livekit_models_1.videoCodecToJSON(message.videoCodec));\n        message.videoBitrate !== undefined && (obj.videoBitrate = Math.round(message.videoBitrate));\n        message.keyFrameInterval !== undefined && (obj.keyFrameInterval = message.keyFrameInterval);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        const message = createBaseEncodingOptions();\n        message.width = (_a = object.width) !== null && _a !== void 0 ? _a : 0;\n        message.height = (_b = object.height) !== null && _b !== void 0 ? _b : 0;\n        message.depth = (_c = object.depth) !== null && _c !== void 0 ? _c : 0;\n        message.framerate = (_d = object.framerate) !== null && _d !== void 0 ? _d : 0;\n        message.audioCodec = (_e = object.audioCodec) !== null && _e !== void 0 ? _e : 0;\n        message.audioBitrate = (_f = object.audioBitrate) !== null && _f !== void 0 ? _f : 0;\n        message.audioFrequency = (_g = object.audioFrequency) !== null && _g !== void 0 ? _g : 0;\n        message.videoCodec = (_h = object.videoCodec) !== null && _h !== void 0 ? _h : 0;\n        message.videoBitrate = (_j = object.videoBitrate) !== null && _j !== void 0 ? _j : 0;\n        message.keyFrameInterval = (_k = object.keyFrameInterval) !== null && _k !== void 0 ? _k : 0;\n        return message;\n    }\n};\nfunction createBaseUpdateLayoutRequest() {\n    return {\n        egressId: \"\",\n        layout: \"\"\n    };\n}\nexports.UpdateLayoutRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(10).string(message.egressId);\n        }\n        if (message.layout !== undefined && message.layout !== \"\") {\n            writer.uint32(18).string(message.layout);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateLayoutRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.egressId = reader.string();\n                    break;\n                case 2:\n                    message.layout = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            egressId: isSet(object.egressId) ? String(object.egressId) : \"\",\n            layout: isSet(object.layout) ? String(object.layout) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        message.layout !== undefined && (obj.layout = message.layout);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseUpdateLayoutRequest();\n        message.egressId = (_a = object.egressId) !== null && _a !== void 0 ? _a : \"\";\n        message.layout = (_b = object.layout) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    }\n};\nfunction createBaseUpdateStreamRequest() {\n    return {\n        egressId: \"\",\n        addOutputUrls: [],\n        removeOutputUrls: []\n    };\n}\nexports.UpdateStreamRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(10).string(message.egressId);\n        }\n        if (message.addOutputUrls !== undefined && message.addOutputUrls.length !== 0) {\n            for (const v of message.addOutputUrls){\n                writer.uint32(18).string(v);\n            }\n        }\n        if (message.removeOutputUrls !== undefined && message.removeOutputUrls.length !== 0) {\n            for (const v of message.removeOutputUrls){\n                writer.uint32(26).string(v);\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateStreamRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.egressId = reader.string();\n                    break;\n                case 2:\n                    message.addOutputUrls.push(reader.string());\n                    break;\n                case 3:\n                    message.removeOutputUrls.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            egressId: isSet(object.egressId) ? String(object.egressId) : \"\",\n            addOutputUrls: Array.isArray(object === null || object === void 0 ? void 0 : object.addOutputUrls) ? object.addOutputUrls.map((e)=>String(e)) : [],\n            removeOutputUrls: Array.isArray(object === null || object === void 0 ? void 0 : object.removeOutputUrls) ? object.removeOutputUrls.map((e)=>String(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        if (message.addOutputUrls) {\n            obj.addOutputUrls = message.addOutputUrls.map((e)=>e);\n        } else {\n            obj.addOutputUrls = [];\n        }\n        if (message.removeOutputUrls) {\n            obj.removeOutputUrls = message.removeOutputUrls.map((e)=>e);\n        } else {\n            obj.removeOutputUrls = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseUpdateStreamRequest();\n        message.egressId = (_a = object.egressId) !== null && _a !== void 0 ? _a : \"\";\n        message.addOutputUrls = ((_b = object.addOutputUrls) === null || _b === void 0 ? void 0 : _b.map((e)=>e)) || [];\n        message.removeOutputUrls = ((_c = object.removeOutputUrls) === null || _c === void 0 ? void 0 : _c.map((e)=>e)) || [];\n        return message;\n    }\n};\nfunction createBaseUpdateOutputsRequest() {\n    return {\n        egressId: \"\",\n        addImageOutputs: [],\n        removeImageOutputs: []\n    };\n}\nexports.UpdateOutputsRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(10).string(message.egressId);\n        }\n        if (message.addImageOutputs !== undefined && message.addImageOutputs.length !== 0) {\n            for (const v of message.addImageOutputs){\n                exports.ImageOutput.encode(v, writer.uint32(18).fork()).ldelim();\n            }\n        }\n        if (message.removeImageOutputs !== undefined && message.removeImageOutputs.length !== 0) {\n            for (const v of message.removeImageOutputs){\n                exports.ImageOutput.encode(v, writer.uint32(26).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateOutputsRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.egressId = reader.string();\n                    break;\n                case 2:\n                    message.addImageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.removeImageOutputs.push(exports.ImageOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            egressId: isSet(object.egressId) ? String(object.egressId) : \"\",\n            addImageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.addImageOutputs) ? object.addImageOutputs.map((e)=>exports.ImageOutput.fromJSON(e)) : [],\n            removeImageOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.removeImageOutputs) ? object.removeImageOutputs.map((e)=>exports.ImageOutput.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        if (message.addImageOutputs) {\n            obj.addImageOutputs = message.addImageOutputs.map((e)=>e ? exports.ImageOutput.toJSON(e) : undefined);\n        } else {\n            obj.addImageOutputs = [];\n        }\n        if (message.removeImageOutputs) {\n            obj.removeImageOutputs = message.removeImageOutputs.map((e)=>e ? exports.ImageOutput.toJSON(e) : undefined);\n        } else {\n            obj.removeImageOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseUpdateOutputsRequest();\n        message.egressId = (_a = object.egressId) !== null && _a !== void 0 ? _a : \"\";\n        message.addImageOutputs = ((_b = object.addImageOutputs) === null || _b === void 0 ? void 0 : _b.map((e)=>exports.ImageOutput.fromPartial(e))) || [];\n        message.removeImageOutputs = ((_c = object.removeImageOutputs) === null || _c === void 0 ? void 0 : _c.map((e)=>exports.ImageOutput.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseListEgressRequest() {\n    return {\n        roomName: \"\",\n        egressId: \"\",\n        active: false\n    };\n}\nexports.ListEgressRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(18).string(message.egressId);\n        }\n        if (message.active === true) {\n            writer.uint32(24).bool(message.active);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListEgressRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.egressId = reader.string();\n                    break;\n                case 3:\n                    message.active = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            egressId: isSet(object.egressId) ? String(object.egressId) : \"\",\n            active: isSet(object.active) ? Boolean(object.active) : false\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        message.active !== undefined && (obj.active = message.active);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseListEgressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.egressId = (_b = object.egressId) !== null && _b !== void 0 ? _b : \"\";\n        message.active = (_c = object.active) !== null && _c !== void 0 ? _c : false;\n        return message;\n    }\n};\nfunction createBaseListEgressResponse() {\n    return {\n        items: []\n    };\n}\nexports.ListEgressResponse = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.items !== undefined && message.items.length !== 0) {\n            for (const v of message.items){\n                exports.EgressInfo.encode(v, writer.uint32(10).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListEgressResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.items.push(exports.EgressInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            items: Array.isArray(object === null || object === void 0 ? void 0 : object.items) ? object.items.map((e)=>exports.EgressInfo.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.items) {\n            obj.items = message.items.map((e)=>e ? exports.EgressInfo.toJSON(e) : undefined);\n        } else {\n            obj.items = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseListEgressResponse();\n        message.items = ((_a = object.items) === null || _a === void 0 ? void 0 : _a.map((e)=>exports.EgressInfo.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseStopEgressRequest() {\n    return {\n        egressId: \"\"\n    };\n}\nexports.StopEgressRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(10).string(message.egressId);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStopEgressRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.egressId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            egressId: isSet(object.egressId) ? String(object.egressId) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseStopEgressRequest();\n        message.egressId = (_a = object.egressId) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    }\n};\nfunction createBaseEgressInfo() {\n    return {\n        egressId: \"\",\n        roomId: \"\",\n        roomName: \"\",\n        status: 0,\n        startedAt: 0,\n        endedAt: 0,\n        updatedAt: 0,\n        error: \"\",\n        roomComposite: undefined,\n        web: undefined,\n        participant: undefined,\n        trackComposite: undefined,\n        track: undefined,\n        stream: undefined,\n        file: undefined,\n        segments: undefined,\n        streamResults: [],\n        fileResults: [],\n        segmentResults: [],\n        imageResults: []\n    };\n}\nexports.EgressInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.egressId !== undefined && message.egressId !== \"\") {\n            writer.uint32(10).string(message.egressId);\n        }\n        if (message.roomId !== undefined && message.roomId !== \"\") {\n            writer.uint32(18).string(message.roomId);\n        }\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(106).string(message.roomName);\n        }\n        if (message.status !== undefined && message.status !== 0) {\n            writer.uint32(24).int32(message.status);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(80).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(88).int64(message.endedAt);\n        }\n        if (message.updatedAt !== undefined && message.updatedAt !== 0) {\n            writer.uint32(144).int64(message.updatedAt);\n        }\n        if (message.error !== undefined && message.error !== \"\") {\n            writer.uint32(74).string(message.error);\n        }\n        if (message.roomComposite !== undefined) {\n            exports.RoomCompositeEgressRequest.encode(message.roomComposite, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.web !== undefined) {\n            exports.WebEgressRequest.encode(message.web, writer.uint32(114).fork()).ldelim();\n        }\n        if (message.participant !== undefined) {\n            exports.ParticipantEgressRequest.encode(message.participant, writer.uint32(154).fork()).ldelim();\n        }\n        if (message.trackComposite !== undefined) {\n            exports.TrackCompositeEgressRequest.encode(message.trackComposite, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.track !== undefined) {\n            exports.TrackEgressRequest.encode(message.track, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.stream !== undefined) {\n            exports.StreamInfoList.encode(message.stream, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.file !== undefined) {\n            exports.FileInfo.encode(message.file, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.segments !== undefined) {\n            exports.SegmentsInfo.encode(message.segments, writer.uint32(98).fork()).ldelim();\n        }\n        if (message.streamResults !== undefined && message.streamResults.length !== 0) {\n            for (const v of message.streamResults){\n                exports.StreamInfo.encode(v, writer.uint32(122).fork()).ldelim();\n            }\n        }\n        if (message.fileResults !== undefined && message.fileResults.length !== 0) {\n            for (const v of message.fileResults){\n                exports.FileInfo.encode(v, writer.uint32(130).fork()).ldelim();\n            }\n        }\n        if (message.segmentResults !== undefined && message.segmentResults.length !== 0) {\n            for (const v of message.segmentResults){\n                exports.SegmentsInfo.encode(v, writer.uint32(138).fork()).ldelim();\n            }\n        }\n        if (message.imageResults !== undefined && message.imageResults.length !== 0) {\n            for (const v of message.imageResults){\n                exports.ImagesInfo.encode(v, writer.uint32(162).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEgressInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.egressId = reader.string();\n                    break;\n                case 2:\n                    message.roomId = reader.string();\n                    break;\n                case 13:\n                    message.roomName = reader.string();\n                    break;\n                case 3:\n                    message.status = reader.int32();\n                    break;\n                case 10:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 11:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                case 18:\n                    message.updatedAt = longToNumber(reader.int64());\n                    break;\n                case 9:\n                    message.error = reader.string();\n                    break;\n                case 4:\n                    message.roomComposite = exports.RoomCompositeEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    message.web = exports.WebEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 19:\n                    message.participant = exports.ParticipantEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.trackComposite = exports.TrackCompositeEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.track = exports.TrackEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.stream = exports.StreamInfoList.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.file = exports.FileInfo.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.segments = exports.SegmentsInfo.decode(reader, reader.uint32());\n                    break;\n                case 15:\n                    message.streamResults.push(exports.StreamInfo.decode(reader, reader.uint32()));\n                    break;\n                case 16:\n                    message.fileResults.push(exports.FileInfo.decode(reader, reader.uint32()));\n                    break;\n                case 17:\n                    message.segmentResults.push(exports.SegmentsInfo.decode(reader, reader.uint32()));\n                    break;\n                case 20:\n                    message.imageResults.push(exports.ImagesInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            egressId: isSet(object.egressId) ? String(object.egressId) : \"\",\n            roomId: isSet(object.roomId) ? String(object.roomId) : \"\",\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            status: isSet(object.status) ? egressStatusFromJSON(object.status) : 0,\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0,\n            updatedAt: isSet(object.updatedAt) ? Number(object.updatedAt) : 0,\n            error: isSet(object.error) ? String(object.error) : \"\",\n            roomComposite: isSet(object.roomComposite) ? exports.RoomCompositeEgressRequest.fromJSON(object.roomComposite) : undefined,\n            web: isSet(object.web) ? exports.WebEgressRequest.fromJSON(object.web) : undefined,\n            participant: isSet(object.participant) ? exports.ParticipantEgressRequest.fromJSON(object.participant) : undefined,\n            trackComposite: isSet(object.trackComposite) ? exports.TrackCompositeEgressRequest.fromJSON(object.trackComposite) : undefined,\n            track: isSet(object.track) ? exports.TrackEgressRequest.fromJSON(object.track) : undefined,\n            stream: isSet(object.stream) ? exports.StreamInfoList.fromJSON(object.stream) : undefined,\n            file: isSet(object.file) ? exports.FileInfo.fromJSON(object.file) : undefined,\n            segments: isSet(object.segments) ? exports.SegmentsInfo.fromJSON(object.segments) : undefined,\n            streamResults: Array.isArray(object === null || object === void 0 ? void 0 : object.streamResults) ? object.streamResults.map((e)=>exports.StreamInfo.fromJSON(e)) : [],\n            fileResults: Array.isArray(object === null || object === void 0 ? void 0 : object.fileResults) ? object.fileResults.map((e)=>exports.FileInfo.fromJSON(e)) : [],\n            segmentResults: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentResults) ? object.segmentResults.map((e)=>exports.SegmentsInfo.fromJSON(e)) : [],\n            imageResults: Array.isArray(object === null || object === void 0 ? void 0 : object.imageResults) ? object.imageResults.map((e)=>exports.ImagesInfo.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.egressId !== undefined && (obj.egressId = message.egressId);\n        message.roomId !== undefined && (obj.roomId = message.roomId);\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.status !== undefined && (obj.status = egressStatusToJSON(message.status));\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        message.updatedAt !== undefined && (obj.updatedAt = Math.round(message.updatedAt));\n        message.error !== undefined && (obj.error = message.error);\n        message.roomComposite !== undefined && (obj.roomComposite = message.roomComposite ? exports.RoomCompositeEgressRequest.toJSON(message.roomComposite) : undefined);\n        message.web !== undefined && (obj.web = message.web ? exports.WebEgressRequest.toJSON(message.web) : undefined);\n        message.participant !== undefined && (obj.participant = message.participant ? exports.ParticipantEgressRequest.toJSON(message.participant) : undefined);\n        message.trackComposite !== undefined && (obj.trackComposite = message.trackComposite ? exports.TrackCompositeEgressRequest.toJSON(message.trackComposite) : undefined);\n        message.track !== undefined && (obj.track = message.track ? exports.TrackEgressRequest.toJSON(message.track) : undefined);\n        message.stream !== undefined && (obj.stream = message.stream ? exports.StreamInfoList.toJSON(message.stream) : undefined);\n        message.file !== undefined && (obj.file = message.file ? exports.FileInfo.toJSON(message.file) : undefined);\n        message.segments !== undefined && (obj.segments = message.segments ? exports.SegmentsInfo.toJSON(message.segments) : undefined);\n        if (message.streamResults) {\n            obj.streamResults = message.streamResults.map((e)=>e ? exports.StreamInfo.toJSON(e) : undefined);\n        } else {\n            obj.streamResults = [];\n        }\n        if (message.fileResults) {\n            obj.fileResults = message.fileResults.map((e)=>e ? exports.FileInfo.toJSON(e) : undefined);\n        } else {\n            obj.fileResults = [];\n        }\n        if (message.segmentResults) {\n            obj.segmentResults = message.segmentResults.map((e)=>e ? exports.SegmentsInfo.toJSON(e) : undefined);\n        } else {\n            obj.segmentResults = [];\n        }\n        if (message.imageResults) {\n            obj.imageResults = message.imageResults.map((e)=>e ? exports.ImagesInfo.toJSON(e) : undefined);\n        } else {\n            obj.imageResults = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        const message = createBaseEgressInfo();\n        message.egressId = (_a = object.egressId) !== null && _a !== void 0 ? _a : \"\";\n        message.roomId = (_b = object.roomId) !== null && _b !== void 0 ? _b : \"\";\n        message.roomName = (_c = object.roomName) !== null && _c !== void 0 ? _c : \"\";\n        message.status = (_d = object.status) !== null && _d !== void 0 ? _d : 0;\n        message.startedAt = (_e = object.startedAt) !== null && _e !== void 0 ? _e : 0;\n        message.endedAt = (_f = object.endedAt) !== null && _f !== void 0 ? _f : 0;\n        message.updatedAt = (_g = object.updatedAt) !== null && _g !== void 0 ? _g : 0;\n        message.error = (_h = object.error) !== null && _h !== void 0 ? _h : \"\";\n        message.roomComposite = object.roomComposite !== undefined && object.roomComposite !== null ? exports.RoomCompositeEgressRequest.fromPartial(object.roomComposite) : undefined;\n        message.web = object.web !== undefined && object.web !== null ? exports.WebEgressRequest.fromPartial(object.web) : undefined;\n        message.participant = object.participant !== undefined && object.participant !== null ? exports.ParticipantEgressRequest.fromPartial(object.participant) : undefined;\n        message.trackComposite = object.trackComposite !== undefined && object.trackComposite !== null ? exports.TrackCompositeEgressRequest.fromPartial(object.trackComposite) : undefined;\n        message.track = object.track !== undefined && object.track !== null ? exports.TrackEgressRequest.fromPartial(object.track) : undefined;\n        message.stream = object.stream !== undefined && object.stream !== null ? exports.StreamInfoList.fromPartial(object.stream) : undefined;\n        message.file = object.file !== undefined && object.file !== null ? exports.FileInfo.fromPartial(object.file) : undefined;\n        message.segments = object.segments !== undefined && object.segments !== null ? exports.SegmentsInfo.fromPartial(object.segments) : undefined;\n        message.streamResults = ((_j = object.streamResults) === null || _j === void 0 ? void 0 : _j.map((e)=>exports.StreamInfo.fromPartial(e))) || [];\n        message.fileResults = ((_k = object.fileResults) === null || _k === void 0 ? void 0 : _k.map((e)=>exports.FileInfo.fromPartial(e))) || [];\n        message.segmentResults = ((_l = object.segmentResults) === null || _l === void 0 ? void 0 : _l.map((e)=>exports.SegmentsInfo.fromPartial(e))) || [];\n        message.imageResults = ((_m = object.imageResults) === null || _m === void 0 ? void 0 : _m.map((e)=>exports.ImagesInfo.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseStreamInfoList() {\n    return {\n        info: []\n    };\n}\nexports.StreamInfoList = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.info !== undefined && message.info.length !== 0) {\n            for (const v of message.info){\n                exports.StreamInfo.encode(v, writer.uint32(10).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStreamInfoList();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.info.push(exports.StreamInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            info: Array.isArray(object === null || object === void 0 ? void 0 : object.info) ? object.info.map((e)=>exports.StreamInfo.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.info) {\n            obj.info = message.info.map((e)=>e ? exports.StreamInfo.toJSON(e) : undefined);\n        } else {\n            obj.info = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseStreamInfoList();\n        message.info = ((_a = object.info) === null || _a === void 0 ? void 0 : _a.map((e)=>exports.StreamInfo.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseStreamInfo() {\n    return {\n        url: \"\",\n        startedAt: 0,\n        endedAt: 0,\n        duration: 0,\n        status: 0,\n        error: \"\"\n    };\n}\nexports.StreamInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.url !== undefined && message.url !== \"\") {\n            writer.uint32(10).string(message.url);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(16).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(24).int64(message.endedAt);\n        }\n        if (message.duration !== undefined && message.duration !== 0) {\n            writer.uint32(32).int64(message.duration);\n        }\n        if (message.status !== undefined && message.status !== 0) {\n            writer.uint32(40).int32(message.status);\n        }\n        if (message.error !== undefined && message.error !== \"\") {\n            writer.uint32(50).string(message.error);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseStreamInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.url = reader.string();\n                    break;\n                case 2:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 3:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                case 4:\n                    message.duration = longToNumber(reader.int64());\n                    break;\n                case 5:\n                    message.status = reader.int32();\n                    break;\n                case 6:\n                    message.error = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            url: isSet(object.url) ? String(object.url) : \"\",\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0,\n            duration: isSet(object.duration) ? Number(object.duration) : 0,\n            status: isSet(object.status) ? streamInfo_StatusFromJSON(object.status) : 0,\n            error: isSet(object.error) ? String(object.error) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.url !== undefined && (obj.url = message.url);\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        message.duration !== undefined && (obj.duration = Math.round(message.duration));\n        message.status !== undefined && (obj.status = streamInfo_StatusToJSON(message.status));\n        message.error !== undefined && (obj.error = message.error);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseStreamInfo();\n        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : \"\";\n        message.startedAt = (_b = object.startedAt) !== null && _b !== void 0 ? _b : 0;\n        message.endedAt = (_c = object.endedAt) !== null && _c !== void 0 ? _c : 0;\n        message.duration = (_d = object.duration) !== null && _d !== void 0 ? _d : 0;\n        message.status = (_e = object.status) !== null && _e !== void 0 ? _e : 0;\n        message.error = (_f = object.error) !== null && _f !== void 0 ? _f : \"\";\n        return message;\n    }\n};\nfunction createBaseFileInfo() {\n    return {\n        filename: \"\",\n        startedAt: 0,\n        endedAt: 0,\n        duration: 0,\n        size: 0,\n        location: \"\"\n    };\n}\nexports.FileInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.filename !== undefined && message.filename !== \"\") {\n            writer.uint32(10).string(message.filename);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(16).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(24).int64(message.endedAt);\n        }\n        if (message.duration !== undefined && message.duration !== 0) {\n            writer.uint32(48).int64(message.duration);\n        }\n        if (message.size !== undefined && message.size !== 0) {\n            writer.uint32(32).int64(message.size);\n        }\n        if (message.location !== undefined && message.location !== \"\") {\n            writer.uint32(42).string(message.location);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseFileInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.filename = reader.string();\n                    break;\n                case 2:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 3:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                case 6:\n                    message.duration = longToNumber(reader.int64());\n                    break;\n                case 4:\n                    message.size = longToNumber(reader.int64());\n                    break;\n                case 5:\n                    message.location = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            filename: isSet(object.filename) ? String(object.filename) : \"\",\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0,\n            duration: isSet(object.duration) ? Number(object.duration) : 0,\n            size: isSet(object.size) ? Number(object.size) : 0,\n            location: isSet(object.location) ? String(object.location) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.filename !== undefined && (obj.filename = message.filename);\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        message.duration !== undefined && (obj.duration = Math.round(message.duration));\n        message.size !== undefined && (obj.size = Math.round(message.size));\n        message.location !== undefined && (obj.location = message.location);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseFileInfo();\n        message.filename = (_a = object.filename) !== null && _a !== void 0 ? _a : \"\";\n        message.startedAt = (_b = object.startedAt) !== null && _b !== void 0 ? _b : 0;\n        message.endedAt = (_c = object.endedAt) !== null && _c !== void 0 ? _c : 0;\n        message.duration = (_d = object.duration) !== null && _d !== void 0 ? _d : 0;\n        message.size = (_e = object.size) !== null && _e !== void 0 ? _e : 0;\n        message.location = (_f = object.location) !== null && _f !== void 0 ? _f : \"\";\n        return message;\n    }\n};\nfunction createBaseSegmentsInfo() {\n    return {\n        playlistName: \"\",\n        livePlaylistName: \"\",\n        duration: 0,\n        size: 0,\n        playlistLocation: \"\",\n        livePlaylistLocation: \"\",\n        segmentCount: 0,\n        startedAt: 0,\n        endedAt: 0\n    };\n}\nexports.SegmentsInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.playlistName !== undefined && message.playlistName !== \"\") {\n            writer.uint32(10).string(message.playlistName);\n        }\n        if (message.livePlaylistName !== undefined && message.livePlaylistName !== \"\") {\n            writer.uint32(66).string(message.livePlaylistName);\n        }\n        if (message.duration !== undefined && message.duration !== 0) {\n            writer.uint32(16).int64(message.duration);\n        }\n        if (message.size !== undefined && message.size !== 0) {\n            writer.uint32(24).int64(message.size);\n        }\n        if (message.playlistLocation !== undefined && message.playlistLocation !== \"\") {\n            writer.uint32(34).string(message.playlistLocation);\n        }\n        if (message.livePlaylistLocation !== undefined && message.livePlaylistLocation !== \"\") {\n            writer.uint32(74).string(message.livePlaylistLocation);\n        }\n        if (message.segmentCount !== undefined && message.segmentCount !== 0) {\n            writer.uint32(40).int64(message.segmentCount);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(48).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(56).int64(message.endedAt);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSegmentsInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.playlistName = reader.string();\n                    break;\n                case 8:\n                    message.livePlaylistName = reader.string();\n                    break;\n                case 2:\n                    message.duration = longToNumber(reader.int64());\n                    break;\n                case 3:\n                    message.size = longToNumber(reader.int64());\n                    break;\n                case 4:\n                    message.playlistLocation = reader.string();\n                    break;\n                case 9:\n                    message.livePlaylistLocation = reader.string();\n                    break;\n                case 5:\n                    message.segmentCount = longToNumber(reader.int64());\n                    break;\n                case 6:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 7:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            playlistName: isSet(object.playlistName) ? String(object.playlistName) : \"\",\n            livePlaylistName: isSet(object.livePlaylistName) ? String(object.livePlaylistName) : \"\",\n            duration: isSet(object.duration) ? Number(object.duration) : 0,\n            size: isSet(object.size) ? Number(object.size) : 0,\n            playlistLocation: isSet(object.playlistLocation) ? String(object.playlistLocation) : \"\",\n            livePlaylistLocation: isSet(object.livePlaylistLocation) ? String(object.livePlaylistLocation) : \"\",\n            segmentCount: isSet(object.segmentCount) ? Number(object.segmentCount) : 0,\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.playlistName !== undefined && (obj.playlistName = message.playlistName);\n        message.livePlaylistName !== undefined && (obj.livePlaylistName = message.livePlaylistName);\n        message.duration !== undefined && (obj.duration = Math.round(message.duration));\n        message.size !== undefined && (obj.size = Math.round(message.size));\n        message.playlistLocation !== undefined && (obj.playlistLocation = message.playlistLocation);\n        message.livePlaylistLocation !== undefined && (obj.livePlaylistLocation = message.livePlaylistLocation);\n        message.segmentCount !== undefined && (obj.segmentCount = Math.round(message.segmentCount));\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const message = createBaseSegmentsInfo();\n        message.playlistName = (_a = object.playlistName) !== null && _a !== void 0 ? _a : \"\";\n        message.livePlaylistName = (_b = object.livePlaylistName) !== null && _b !== void 0 ? _b : \"\";\n        message.duration = (_c = object.duration) !== null && _c !== void 0 ? _c : 0;\n        message.size = (_d = object.size) !== null && _d !== void 0 ? _d : 0;\n        message.playlistLocation = (_e = object.playlistLocation) !== null && _e !== void 0 ? _e : \"\";\n        message.livePlaylistLocation = (_f = object.livePlaylistLocation) !== null && _f !== void 0 ? _f : \"\";\n        message.segmentCount = (_g = object.segmentCount) !== null && _g !== void 0 ? _g : 0;\n        message.startedAt = (_h = object.startedAt) !== null && _h !== void 0 ? _h : 0;\n        message.endedAt = (_j = object.endedAt) !== null && _j !== void 0 ? _j : 0;\n        return message;\n    }\n};\nfunction createBaseImagesInfo() {\n    return {\n        imageCount: 0,\n        startedAt: 0,\n        endedAt: 0\n    };\n}\nexports.ImagesInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.imageCount !== undefined && message.imageCount !== 0) {\n            writer.uint32(8).int64(message.imageCount);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(16).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(24).int64(message.endedAt);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseImagesInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.imageCount = longToNumber(reader.int64());\n                    break;\n                case 2:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 3:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            imageCount: isSet(object.imageCount) ? Number(object.imageCount) : 0,\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.imageCount !== undefined && (obj.imageCount = Math.round(message.imageCount));\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseImagesInfo();\n        message.imageCount = (_a = object.imageCount) !== null && _a !== void 0 ? _a : 0;\n        message.startedAt = (_b = object.startedAt) !== null && _b !== void 0 ? _b : 0;\n        message.endedAt = (_c = object.endedAt) !== null && _c !== void 0 ? _c : 0;\n        return message;\n    }\n};\nfunction createBaseAutoParticipantEgress() {\n    return {\n        preset: undefined,\n        advanced: undefined,\n        fileOutputs: [],\n        segmentOutputs: []\n    };\n}\nexports.AutoParticipantEgress = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.preset !== undefined) {\n            writer.uint32(8).int32(message.preset);\n        }\n        if (message.advanced !== undefined) {\n            exports.EncodingOptions.encode(message.advanced, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.fileOutputs !== undefined && message.fileOutputs.length !== 0) {\n            for (const v of message.fileOutputs){\n                exports.EncodedFileOutput.encode(v, writer.uint32(26).fork()).ldelim();\n            }\n        }\n        if (message.segmentOutputs !== undefined && message.segmentOutputs.length !== 0) {\n            for (const v of message.segmentOutputs){\n                exports.SegmentedFileOutput.encode(v, writer.uint32(34).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAutoParticipantEgress();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.preset = reader.int32();\n                    break;\n                case 2:\n                    message.advanced = exports.EncodingOptions.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.fileOutputs.push(exports.EncodedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                case 4:\n                    message.segmentOutputs.push(exports.SegmentedFileOutput.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            preset: isSet(object.preset) ? encodingOptionsPresetFromJSON(object.preset) : undefined,\n            advanced: isSet(object.advanced) ? exports.EncodingOptions.fromJSON(object.advanced) : undefined,\n            fileOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.fileOutputs) ? object.fileOutputs.map((e)=>exports.EncodedFileOutput.fromJSON(e)) : [],\n            segmentOutputs: Array.isArray(object === null || object === void 0 ? void 0 : object.segmentOutputs) ? object.segmentOutputs.map((e)=>exports.SegmentedFileOutput.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.preset !== undefined && (obj.preset = message.preset !== undefined ? encodingOptionsPresetToJSON(message.preset) : undefined);\n        message.advanced !== undefined && (obj.advanced = message.advanced ? exports.EncodingOptions.toJSON(message.advanced) : undefined);\n        if (message.fileOutputs) {\n            obj.fileOutputs = message.fileOutputs.map((e)=>e ? exports.EncodedFileOutput.toJSON(e) : undefined);\n        } else {\n            obj.fileOutputs = [];\n        }\n        if (message.segmentOutputs) {\n            obj.segmentOutputs = message.segmentOutputs.map((e)=>e ? exports.SegmentedFileOutput.toJSON(e) : undefined);\n        } else {\n            obj.segmentOutputs = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseAutoParticipantEgress();\n        message.preset = (_a = object.preset) !== null && _a !== void 0 ? _a : undefined;\n        message.advanced = object.advanced !== undefined && object.advanced !== null ? exports.EncodingOptions.fromPartial(object.advanced) : undefined;\n        message.fileOutputs = ((_b = object.fileOutputs) === null || _b === void 0 ? void 0 : _b.map((e)=>exports.EncodedFileOutput.fromPartial(e))) || [];\n        message.segmentOutputs = ((_c = object.segmentOutputs) === null || _c === void 0 ? void 0 : _c.map((e)=>exports.SegmentedFileOutput.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseAutoTrackEgress() {\n    return {\n        filepath: \"\",\n        disableManifest: false,\n        s3: undefined,\n        gcp: undefined,\n        azure: undefined\n    };\n}\nexports.AutoTrackEgress = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.filepath !== undefined && message.filepath !== \"\") {\n            writer.uint32(10).string(message.filepath);\n        }\n        if (message.disableManifest === true) {\n            writer.uint32(40).bool(message.disableManifest);\n        }\n        if (message.s3 !== undefined) {\n            exports.S3Upload.encode(message.s3, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.gcp !== undefined) {\n            exports.GCPUpload.encode(message.gcp, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.azure !== undefined) {\n            exports.AzureBlobUpload.encode(message.azure, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAutoTrackEgress();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.filepath = reader.string();\n                    break;\n                case 5:\n                    message.disableManifest = reader.bool();\n                    break;\n                case 2:\n                    message.s3 = exports.S3Upload.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.gcp = exports.GCPUpload.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.azure = exports.AzureBlobUpload.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            filepath: isSet(object.filepath) ? String(object.filepath) : \"\",\n            disableManifest: isSet(object.disableManifest) ? Boolean(object.disableManifest) : false,\n            s3: isSet(object.s3) ? exports.S3Upload.fromJSON(object.s3) : undefined,\n            gcp: isSet(object.gcp) ? exports.GCPUpload.fromJSON(object.gcp) : undefined,\n            azure: isSet(object.azure) ? exports.AzureBlobUpload.fromJSON(object.azure) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.filepath !== undefined && (obj.filepath = message.filepath);\n        message.disableManifest !== undefined && (obj.disableManifest = message.disableManifest);\n        message.s3 !== undefined && (obj.s3 = message.s3 ? exports.S3Upload.toJSON(message.s3) : undefined);\n        message.gcp !== undefined && (obj.gcp = message.gcp ? exports.GCPUpload.toJSON(message.gcp) : undefined);\n        message.azure !== undefined && (obj.azure = message.azure ? exports.AzureBlobUpload.toJSON(message.azure) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseAutoTrackEgress();\n        message.filepath = (_a = object.filepath) !== null && _a !== void 0 ? _a : \"\";\n        message.disableManifest = (_b = object.disableManifest) !== null && _b !== void 0 ? _b : false;\n        message.s3 = object.s3 !== undefined && object.s3 !== null ? exports.S3Upload.fromPartial(object.s3) : undefined;\n        message.gcp = object.gcp !== undefined && object.gcp !== null ? exports.GCPUpload.fromPartial(object.gcp) : undefined;\n        message.azure = object.azure !== undefined && object.azure !== null ? exports.AzureBlobUpload.fromPartial(object.azure) : undefined;\n        return message;\n    }\n};\nvar globalThis = (()=>{\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (false) {}\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n} //# sourceMappingURL=livekit_egress.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js":
/*!***********************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DeleteIngressRequest = exports.ListIngressResponse = exports.ListIngressRequest = exports.UpdateIngressRequest = exports.InputAudioState = exports.InputVideoState = exports.IngressState = exports.IngressInfo = exports.IngressVideoEncodingOptions = exports.IngressAudioEncodingOptions = exports.IngressVideoOptions = exports.IngressAudioOptions = exports.CreateIngressRequest = exports.ingressState_StatusToJSON = exports.ingressState_StatusFromJSON = exports.IngressState_Status = exports.ingressVideoEncodingPresetToJSON = exports.ingressVideoEncodingPresetFromJSON = exports.IngressVideoEncodingPreset = exports.ingressAudioEncodingPresetToJSON = exports.ingressAudioEncodingPresetFromJSON = exports.IngressAudioEncodingPreset = exports.ingressInputToJSON = exports.ingressInputFromJSON = exports.IngressInput = exports.protobufPackage = void 0;\n/* eslint-disable */ const long_1 = __importDefault(__webpack_require__(/*! long */ \"(action-browser)/./node_modules/long/umd/index.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(action-browser)/./node_modules/protobufjs/minimal.js\"));\nconst livekit_models_1 = __webpack_require__(/*! ./livekit_models */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nexports.protobufPackage = \"livekit\";\nvar IngressInput;\n(function(IngressInput) {\n    IngressInput[IngressInput[\"RTMP_INPUT\"] = 0] = \"RTMP_INPUT\";\n    IngressInput[IngressInput[\"WHIP_INPUT\"] = 1] = \"WHIP_INPUT\";\n    /** URL_INPUT - Pull from the provided URL. Only HTTP url are supported, serving either a single media file or a HLS stream */ IngressInput[IngressInput[\"URL_INPUT\"] = 2] = \"URL_INPUT\";\n    IngressInput[IngressInput[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(IngressInput = exports.IngressInput || (exports.IngressInput = {}));\nfunction ingressInputFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"RTMP_INPUT\":\n            return IngressInput.RTMP_INPUT;\n        case 1:\n        case \"WHIP_INPUT\":\n            return IngressInput.WHIP_INPUT;\n        case 2:\n        case \"URL_INPUT\":\n            return IngressInput.URL_INPUT;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return IngressInput.UNRECOGNIZED;\n    }\n}\nexports.ingressInputFromJSON = ingressInputFromJSON;\nfunction ingressInputToJSON(object) {\n    switch(object){\n        case IngressInput.RTMP_INPUT:\n            return \"RTMP_INPUT\";\n        case IngressInput.WHIP_INPUT:\n            return \"WHIP_INPUT\";\n        case IngressInput.URL_INPUT:\n            return \"URL_INPUT\";\n        case IngressInput.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.ingressInputToJSON = ingressInputToJSON;\nvar IngressAudioEncodingPreset;\n(function(IngressAudioEncodingPreset) {\n    /** OPUS_STEREO_96KBPS - OPUS, 2 channels, 96kbps */ IngressAudioEncodingPreset[IngressAudioEncodingPreset[\"OPUS_STEREO_96KBPS\"] = 0] = \"OPUS_STEREO_96KBPS\";\n    /** OPUS_MONO_64KBS - OPUS, 1 channel, 64kbps */ IngressAudioEncodingPreset[IngressAudioEncodingPreset[\"OPUS_MONO_64KBS\"] = 1] = \"OPUS_MONO_64KBS\";\n    IngressAudioEncodingPreset[IngressAudioEncodingPreset[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(IngressAudioEncodingPreset = exports.IngressAudioEncodingPreset || (exports.IngressAudioEncodingPreset = {}));\nfunction ingressAudioEncodingPresetFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"OPUS_STEREO_96KBPS\":\n            return IngressAudioEncodingPreset.OPUS_STEREO_96KBPS;\n        case 1:\n        case \"OPUS_MONO_64KBS\":\n            return IngressAudioEncodingPreset.OPUS_MONO_64KBS;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return IngressAudioEncodingPreset.UNRECOGNIZED;\n    }\n}\nexports.ingressAudioEncodingPresetFromJSON = ingressAudioEncodingPresetFromJSON;\nfunction ingressAudioEncodingPresetToJSON(object) {\n    switch(object){\n        case IngressAudioEncodingPreset.OPUS_STEREO_96KBPS:\n            return \"OPUS_STEREO_96KBPS\";\n        case IngressAudioEncodingPreset.OPUS_MONO_64KBS:\n            return \"OPUS_MONO_64KBS\";\n        case IngressAudioEncodingPreset.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.ingressAudioEncodingPresetToJSON = ingressAudioEncodingPresetToJSON;\nvar IngressVideoEncodingPreset;\n(function(IngressVideoEncodingPreset) {\n    /** H264_720P_30FPS_3_LAYERS - 1280x720,  30fps, 1900kbps main layer, 3 layers total */ IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_720P_30FPS_3_LAYERS\"] = 0] = \"H264_720P_30FPS_3_LAYERS\";\n    /** H264_1080P_30FPS_3_LAYERS - 1980x1080, 30fps, 3500kbps main layer, 3 layers total */ IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_1080P_30FPS_3_LAYERS\"] = 1] = \"H264_1080P_30FPS_3_LAYERS\";\n    /** H264_540P_25FPS_2_LAYERS - 960x540,  25fps, 1000kbps  main layer, 2 layers total */ IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_540P_25FPS_2_LAYERS\"] = 2] = \"H264_540P_25FPS_2_LAYERS\";\n    /** H264_720P_30FPS_1_LAYER - 1280x720,  30fps, 1900kbps, no simulcast */ IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_720P_30FPS_1_LAYER\"] = 3] = \"H264_720P_30FPS_1_LAYER\";\n    /** H264_1080P_30FPS_1_LAYER - 1980x1080, 30fps, 3500kbps, no simulcast */ IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_1080P_30FPS_1_LAYER\"] = 4] = \"H264_1080P_30FPS_1_LAYER\";\n    /** H264_720P_30FPS_3_LAYERS_HIGH_MOTION - 1280x720,  30fps, 2500kbps main layer, 3 layers total, higher bitrate for high motion, harder to encode content */ IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_720P_30FPS_3_LAYERS_HIGH_MOTION\"] = 5] = \"H264_720P_30FPS_3_LAYERS_HIGH_MOTION\";\n    /** H264_1080P_30FPS_3_LAYERS_HIGH_MOTION - 1980x1080, 30fps, 4500kbps main layer, 3 layers total, higher bitrate for high motion, harder to encode content */ IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_1080P_30FPS_3_LAYERS_HIGH_MOTION\"] = 6] = \"H264_1080P_30FPS_3_LAYERS_HIGH_MOTION\";\n    /** H264_540P_25FPS_2_LAYERS_HIGH_MOTION - 960x540,  25fps, 1300kbps  main layer, 2 layers total, higher bitrate for high motion, harder to encode content */ IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_540P_25FPS_2_LAYERS_HIGH_MOTION\"] = 7] = \"H264_540P_25FPS_2_LAYERS_HIGH_MOTION\";\n    /** H264_720P_30FPS_1_LAYER_HIGH_MOTION - 1280x720,  30fps, 2500kbps, no simulcast, higher bitrate for high motion, harder to encode content */ IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_720P_30FPS_1_LAYER_HIGH_MOTION\"] = 8] = \"H264_720P_30FPS_1_LAYER_HIGH_MOTION\";\n    /** H264_1080P_30FPS_1_LAYER_HIGH_MOTION - 1980x1080, 30fps, 4500kbps, no simulcast, higher bitrate for high motion, harder to encode content */ IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"H264_1080P_30FPS_1_LAYER_HIGH_MOTION\"] = 9] = \"H264_1080P_30FPS_1_LAYER_HIGH_MOTION\";\n    IngressVideoEncodingPreset[IngressVideoEncodingPreset[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(IngressVideoEncodingPreset = exports.IngressVideoEncodingPreset || (exports.IngressVideoEncodingPreset = {}));\nfunction ingressVideoEncodingPresetFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"H264_720P_30FPS_3_LAYERS\":\n            return IngressVideoEncodingPreset.H264_720P_30FPS_3_LAYERS;\n        case 1:\n        case \"H264_1080P_30FPS_3_LAYERS\":\n            return IngressVideoEncodingPreset.H264_1080P_30FPS_3_LAYERS;\n        case 2:\n        case \"H264_540P_25FPS_2_LAYERS\":\n            return IngressVideoEncodingPreset.H264_540P_25FPS_2_LAYERS;\n        case 3:\n        case \"H264_720P_30FPS_1_LAYER\":\n            return IngressVideoEncodingPreset.H264_720P_30FPS_1_LAYER;\n        case 4:\n        case \"H264_1080P_30FPS_1_LAYER\":\n            return IngressVideoEncodingPreset.H264_1080P_30FPS_1_LAYER;\n        case 5:\n        case \"H264_720P_30FPS_3_LAYERS_HIGH_MOTION\":\n            return IngressVideoEncodingPreset.H264_720P_30FPS_3_LAYERS_HIGH_MOTION;\n        case 6:\n        case \"H264_1080P_30FPS_3_LAYERS_HIGH_MOTION\":\n            return IngressVideoEncodingPreset.H264_1080P_30FPS_3_LAYERS_HIGH_MOTION;\n        case 7:\n        case \"H264_540P_25FPS_2_LAYERS_HIGH_MOTION\":\n            return IngressVideoEncodingPreset.H264_540P_25FPS_2_LAYERS_HIGH_MOTION;\n        case 8:\n        case \"H264_720P_30FPS_1_LAYER_HIGH_MOTION\":\n            return IngressVideoEncodingPreset.H264_720P_30FPS_1_LAYER_HIGH_MOTION;\n        case 9:\n        case \"H264_1080P_30FPS_1_LAYER_HIGH_MOTION\":\n            return IngressVideoEncodingPreset.H264_1080P_30FPS_1_LAYER_HIGH_MOTION;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return IngressVideoEncodingPreset.UNRECOGNIZED;\n    }\n}\nexports.ingressVideoEncodingPresetFromJSON = ingressVideoEncodingPresetFromJSON;\nfunction ingressVideoEncodingPresetToJSON(object) {\n    switch(object){\n        case IngressVideoEncodingPreset.H264_720P_30FPS_3_LAYERS:\n            return \"H264_720P_30FPS_3_LAYERS\";\n        case IngressVideoEncodingPreset.H264_1080P_30FPS_3_LAYERS:\n            return \"H264_1080P_30FPS_3_LAYERS\";\n        case IngressVideoEncodingPreset.H264_540P_25FPS_2_LAYERS:\n            return \"H264_540P_25FPS_2_LAYERS\";\n        case IngressVideoEncodingPreset.H264_720P_30FPS_1_LAYER:\n            return \"H264_720P_30FPS_1_LAYER\";\n        case IngressVideoEncodingPreset.H264_1080P_30FPS_1_LAYER:\n            return \"H264_1080P_30FPS_1_LAYER\";\n        case IngressVideoEncodingPreset.H264_720P_30FPS_3_LAYERS_HIGH_MOTION:\n            return \"H264_720P_30FPS_3_LAYERS_HIGH_MOTION\";\n        case IngressVideoEncodingPreset.H264_1080P_30FPS_3_LAYERS_HIGH_MOTION:\n            return \"H264_1080P_30FPS_3_LAYERS_HIGH_MOTION\";\n        case IngressVideoEncodingPreset.H264_540P_25FPS_2_LAYERS_HIGH_MOTION:\n            return \"H264_540P_25FPS_2_LAYERS_HIGH_MOTION\";\n        case IngressVideoEncodingPreset.H264_720P_30FPS_1_LAYER_HIGH_MOTION:\n            return \"H264_720P_30FPS_1_LAYER_HIGH_MOTION\";\n        case IngressVideoEncodingPreset.H264_1080P_30FPS_1_LAYER_HIGH_MOTION:\n            return \"H264_1080P_30FPS_1_LAYER_HIGH_MOTION\";\n        case IngressVideoEncodingPreset.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.ingressVideoEncodingPresetToJSON = ingressVideoEncodingPresetToJSON;\nvar IngressState_Status;\n(function(IngressState_Status) {\n    IngressState_Status[IngressState_Status[\"ENDPOINT_INACTIVE\"] = 0] = \"ENDPOINT_INACTIVE\";\n    IngressState_Status[IngressState_Status[\"ENDPOINT_BUFFERING\"] = 1] = \"ENDPOINT_BUFFERING\";\n    IngressState_Status[IngressState_Status[\"ENDPOINT_PUBLISHING\"] = 2] = \"ENDPOINT_PUBLISHING\";\n    IngressState_Status[IngressState_Status[\"ENDPOINT_ERROR\"] = 3] = \"ENDPOINT_ERROR\";\n    IngressState_Status[IngressState_Status[\"ENDPOINT_COMPLETE\"] = 4] = \"ENDPOINT_COMPLETE\";\n    IngressState_Status[IngressState_Status[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(IngressState_Status = exports.IngressState_Status || (exports.IngressState_Status = {}));\nfunction ingressState_StatusFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"ENDPOINT_INACTIVE\":\n            return IngressState_Status.ENDPOINT_INACTIVE;\n        case 1:\n        case \"ENDPOINT_BUFFERING\":\n            return IngressState_Status.ENDPOINT_BUFFERING;\n        case 2:\n        case \"ENDPOINT_PUBLISHING\":\n            return IngressState_Status.ENDPOINT_PUBLISHING;\n        case 3:\n        case \"ENDPOINT_ERROR\":\n            return IngressState_Status.ENDPOINT_ERROR;\n        case 4:\n        case \"ENDPOINT_COMPLETE\":\n            return IngressState_Status.ENDPOINT_COMPLETE;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return IngressState_Status.UNRECOGNIZED;\n    }\n}\nexports.ingressState_StatusFromJSON = ingressState_StatusFromJSON;\nfunction ingressState_StatusToJSON(object) {\n    switch(object){\n        case IngressState_Status.ENDPOINT_INACTIVE:\n            return \"ENDPOINT_INACTIVE\";\n        case IngressState_Status.ENDPOINT_BUFFERING:\n            return \"ENDPOINT_BUFFERING\";\n        case IngressState_Status.ENDPOINT_PUBLISHING:\n            return \"ENDPOINT_PUBLISHING\";\n        case IngressState_Status.ENDPOINT_ERROR:\n            return \"ENDPOINT_ERROR\";\n        case IngressState_Status.ENDPOINT_COMPLETE:\n            return \"ENDPOINT_COMPLETE\";\n        case IngressState_Status.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.ingressState_StatusToJSON = ingressState_StatusToJSON;\nfunction createBaseCreateIngressRequest() {\n    return {\n        inputType: 0,\n        url: \"\",\n        name: \"\",\n        roomName: \"\",\n        participantIdentity: \"\",\n        participantName: \"\",\n        bypassTranscoding: false,\n        audio: undefined,\n        video: undefined\n    };\n}\nexports.CreateIngressRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.inputType !== undefined && message.inputType !== 0) {\n            writer.uint32(8).int32(message.inputType);\n        }\n        if (message.url !== undefined && message.url !== \"\") {\n            writer.uint32(74).string(message.url);\n        }\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(18).string(message.name);\n        }\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(26).string(message.roomName);\n        }\n        if (message.participantIdentity !== undefined && message.participantIdentity !== \"\") {\n            writer.uint32(34).string(message.participantIdentity);\n        }\n        if (message.participantName !== undefined && message.participantName !== \"\") {\n            writer.uint32(42).string(message.participantName);\n        }\n        if (message.bypassTranscoding === true) {\n            writer.uint32(64).bool(message.bypassTranscoding);\n        }\n        if (message.audio !== undefined) {\n            exports.IngressAudioOptions.encode(message.audio, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.video !== undefined) {\n            exports.IngressVideoOptions.encode(message.video, writer.uint32(58).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCreateIngressRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.inputType = reader.int32();\n                    break;\n                case 9:\n                    message.url = reader.string();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 3:\n                    message.roomName = reader.string();\n                    break;\n                case 4:\n                    message.participantIdentity = reader.string();\n                    break;\n                case 5:\n                    message.participantName = reader.string();\n                    break;\n                case 8:\n                    message.bypassTranscoding = reader.bool();\n                    break;\n                case 6:\n                    message.audio = exports.IngressAudioOptions.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.video = exports.IngressVideoOptions.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            inputType: isSet(object.inputType) ? ingressInputFromJSON(object.inputType) : 0,\n            url: isSet(object.url) ? String(object.url) : \"\",\n            name: isSet(object.name) ? String(object.name) : \"\",\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            participantIdentity: isSet(object.participantIdentity) ? String(object.participantIdentity) : \"\",\n            participantName: isSet(object.participantName) ? String(object.participantName) : \"\",\n            bypassTranscoding: isSet(object.bypassTranscoding) ? Boolean(object.bypassTranscoding) : false,\n            audio: isSet(object.audio) ? exports.IngressAudioOptions.fromJSON(object.audio) : undefined,\n            video: isSet(object.video) ? exports.IngressVideoOptions.fromJSON(object.video) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.inputType !== undefined && (obj.inputType = ingressInputToJSON(message.inputType));\n        message.url !== undefined && (obj.url = message.url);\n        message.name !== undefined && (obj.name = message.name);\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.participantIdentity !== undefined && (obj.participantIdentity = message.participantIdentity);\n        message.participantName !== undefined && (obj.participantName = message.participantName);\n        message.bypassTranscoding !== undefined && (obj.bypassTranscoding = message.bypassTranscoding);\n        message.audio !== undefined && (obj.audio = message.audio ? exports.IngressAudioOptions.toJSON(message.audio) : undefined);\n        message.video !== undefined && (obj.video = message.video ? exports.IngressVideoOptions.toJSON(message.video) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const message = createBaseCreateIngressRequest();\n        message.inputType = (_a = object.inputType) !== null && _a !== void 0 ? _a : 0;\n        message.url = (_b = object.url) !== null && _b !== void 0 ? _b : \"\";\n        message.name = (_c = object.name) !== null && _c !== void 0 ? _c : \"\";\n        message.roomName = (_d = object.roomName) !== null && _d !== void 0 ? _d : \"\";\n        message.participantIdentity = (_e = object.participantIdentity) !== null && _e !== void 0 ? _e : \"\";\n        message.participantName = (_f = object.participantName) !== null && _f !== void 0 ? _f : \"\";\n        message.bypassTranscoding = (_g = object.bypassTranscoding) !== null && _g !== void 0 ? _g : false;\n        message.audio = object.audio !== undefined && object.audio !== null ? exports.IngressAudioOptions.fromPartial(object.audio) : undefined;\n        message.video = object.video !== undefined && object.video !== null ? exports.IngressVideoOptions.fromPartial(object.video) : undefined;\n        return message;\n    }\n};\nfunction createBaseIngressAudioOptions() {\n    return {\n        name: \"\",\n        source: 0,\n        preset: undefined,\n        options: undefined\n    };\n}\nexports.IngressAudioOptions = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.source !== undefined && message.source !== 0) {\n            writer.uint32(16).int32(message.source);\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(24).int32(message.preset);\n        }\n        if (message.options !== undefined) {\n            exports.IngressAudioEncodingOptions.encode(message.options, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressAudioOptions();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.source = reader.int32();\n                    break;\n                case 3:\n                    message.preset = reader.int32();\n                    break;\n                case 4:\n                    message.options = exports.IngressAudioEncodingOptions.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            name: isSet(object.name) ? String(object.name) : \"\",\n            source: isSet(object.source) ? livekit_models_1.trackSourceFromJSON(object.source) : 0,\n            preset: isSet(object.preset) ? ingressAudioEncodingPresetFromJSON(object.preset) : undefined,\n            options: isSet(object.options) ? exports.IngressAudioEncodingOptions.fromJSON(object.options) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.name !== undefined && (obj.name = message.name);\n        message.source !== undefined && (obj.source = livekit_models_1.trackSourceToJSON(message.source));\n        message.preset !== undefined && (obj.preset = message.preset !== undefined ? ingressAudioEncodingPresetToJSON(message.preset) : undefined);\n        message.options !== undefined && (obj.options = message.options ? exports.IngressAudioEncodingOptions.toJSON(message.options) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseIngressAudioOptions();\n        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : \"\";\n        message.source = (_b = object.source) !== null && _b !== void 0 ? _b : 0;\n        message.preset = (_c = object.preset) !== null && _c !== void 0 ? _c : undefined;\n        message.options = object.options !== undefined && object.options !== null ? exports.IngressAudioEncodingOptions.fromPartial(object.options) : undefined;\n        return message;\n    }\n};\nfunction createBaseIngressVideoOptions() {\n    return {\n        name: \"\",\n        source: 0,\n        preset: undefined,\n        options: undefined\n    };\n}\nexports.IngressVideoOptions = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.source !== undefined && message.source !== 0) {\n            writer.uint32(16).int32(message.source);\n        }\n        if (message.preset !== undefined) {\n            writer.uint32(24).int32(message.preset);\n        }\n        if (message.options !== undefined) {\n            exports.IngressVideoEncodingOptions.encode(message.options, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressVideoOptions();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.source = reader.int32();\n                    break;\n                case 3:\n                    message.preset = reader.int32();\n                    break;\n                case 4:\n                    message.options = exports.IngressVideoEncodingOptions.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            name: isSet(object.name) ? String(object.name) : \"\",\n            source: isSet(object.source) ? livekit_models_1.trackSourceFromJSON(object.source) : 0,\n            preset: isSet(object.preset) ? ingressVideoEncodingPresetFromJSON(object.preset) : undefined,\n            options: isSet(object.options) ? exports.IngressVideoEncodingOptions.fromJSON(object.options) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.name !== undefined && (obj.name = message.name);\n        message.source !== undefined && (obj.source = livekit_models_1.trackSourceToJSON(message.source));\n        message.preset !== undefined && (obj.preset = message.preset !== undefined ? ingressVideoEncodingPresetToJSON(message.preset) : undefined);\n        message.options !== undefined && (obj.options = message.options ? exports.IngressVideoEncodingOptions.toJSON(message.options) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseIngressVideoOptions();\n        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : \"\";\n        message.source = (_b = object.source) !== null && _b !== void 0 ? _b : 0;\n        message.preset = (_c = object.preset) !== null && _c !== void 0 ? _c : undefined;\n        message.options = object.options !== undefined && object.options !== null ? exports.IngressVideoEncodingOptions.fromPartial(object.options) : undefined;\n        return message;\n    }\n};\nfunction createBaseIngressAudioEncodingOptions() {\n    return {\n        audioCodec: 0,\n        bitrate: 0,\n        disableDtx: false,\n        channels: 0\n    };\n}\nexports.IngressAudioEncodingOptions = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.audioCodec !== undefined && message.audioCodec !== 0) {\n            writer.uint32(8).int32(message.audioCodec);\n        }\n        if (message.bitrate !== undefined && message.bitrate !== 0) {\n            writer.uint32(16).uint32(message.bitrate);\n        }\n        if (message.disableDtx === true) {\n            writer.uint32(24).bool(message.disableDtx);\n        }\n        if (message.channels !== undefined && message.channels !== 0) {\n            writer.uint32(32).uint32(message.channels);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressAudioEncodingOptions();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.audioCodec = reader.int32();\n                    break;\n                case 2:\n                    message.bitrate = reader.uint32();\n                    break;\n                case 3:\n                    message.disableDtx = reader.bool();\n                    break;\n                case 4:\n                    message.channels = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            audioCodec: isSet(object.audioCodec) ? livekit_models_1.audioCodecFromJSON(object.audioCodec) : 0,\n            bitrate: isSet(object.bitrate) ? Number(object.bitrate) : 0,\n            disableDtx: isSet(object.disableDtx) ? Boolean(object.disableDtx) : false,\n            channels: isSet(object.channels) ? Number(object.channels) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.audioCodec !== undefined && (obj.audioCodec = livekit_models_1.audioCodecToJSON(message.audioCodec));\n        message.bitrate !== undefined && (obj.bitrate = Math.round(message.bitrate));\n        message.disableDtx !== undefined && (obj.disableDtx = message.disableDtx);\n        message.channels !== undefined && (obj.channels = Math.round(message.channels));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d;\n        const message = createBaseIngressAudioEncodingOptions();\n        message.audioCodec = (_a = object.audioCodec) !== null && _a !== void 0 ? _a : 0;\n        message.bitrate = (_b = object.bitrate) !== null && _b !== void 0 ? _b : 0;\n        message.disableDtx = (_c = object.disableDtx) !== null && _c !== void 0 ? _c : false;\n        message.channels = (_d = object.channels) !== null && _d !== void 0 ? _d : 0;\n        return message;\n    }\n};\nfunction createBaseIngressVideoEncodingOptions() {\n    return {\n        videoCodec: 0,\n        frameRate: 0,\n        layers: []\n    };\n}\nexports.IngressVideoEncodingOptions = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.videoCodec !== undefined && message.videoCodec !== 0) {\n            writer.uint32(8).int32(message.videoCodec);\n        }\n        if (message.frameRate !== undefined && message.frameRate !== 0) {\n            writer.uint32(17).double(message.frameRate);\n        }\n        if (message.layers !== undefined && message.layers.length !== 0) {\n            for (const v of message.layers){\n                livekit_models_1.VideoLayer.encode(v, writer.uint32(26).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressVideoEncodingOptions();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.videoCodec = reader.int32();\n                    break;\n                case 2:\n                    message.frameRate = reader.double();\n                    break;\n                case 3:\n                    message.layers.push(livekit_models_1.VideoLayer.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            videoCodec: isSet(object.videoCodec) ? livekit_models_1.videoCodecFromJSON(object.videoCodec) : 0,\n            frameRate: isSet(object.frameRate) ? Number(object.frameRate) : 0,\n            layers: Array.isArray(object === null || object === void 0 ? void 0 : object.layers) ? object.layers.map((e)=>livekit_models_1.VideoLayer.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.videoCodec !== undefined && (obj.videoCodec = livekit_models_1.videoCodecToJSON(message.videoCodec));\n        message.frameRate !== undefined && (obj.frameRate = message.frameRate);\n        if (message.layers) {\n            obj.layers = message.layers.map((e)=>e ? livekit_models_1.VideoLayer.toJSON(e) : undefined);\n        } else {\n            obj.layers = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseIngressVideoEncodingOptions();\n        message.videoCodec = (_a = object.videoCodec) !== null && _a !== void 0 ? _a : 0;\n        message.frameRate = (_b = object.frameRate) !== null && _b !== void 0 ? _b : 0;\n        message.layers = ((_c = object.layers) === null || _c === void 0 ? void 0 : _c.map((e)=>livekit_models_1.VideoLayer.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseIngressInfo() {\n    return {\n        ingressId: \"\",\n        name: \"\",\n        streamKey: \"\",\n        url: \"\",\n        inputType: 0,\n        bypassTranscoding: false,\n        audio: undefined,\n        video: undefined,\n        roomName: \"\",\n        participantIdentity: \"\",\n        participantName: \"\",\n        reusable: false,\n        state: undefined\n    };\n}\nexports.IngressInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.ingressId !== undefined && message.ingressId !== \"\") {\n            writer.uint32(10).string(message.ingressId);\n        }\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(18).string(message.name);\n        }\n        if (message.streamKey !== undefined && message.streamKey !== \"\") {\n            writer.uint32(26).string(message.streamKey);\n        }\n        if (message.url !== undefined && message.url !== \"\") {\n            writer.uint32(34).string(message.url);\n        }\n        if (message.inputType !== undefined && message.inputType !== 0) {\n            writer.uint32(40).int32(message.inputType);\n        }\n        if (message.bypassTranscoding === true) {\n            writer.uint32(104).bool(message.bypassTranscoding);\n        }\n        if (message.audio !== undefined) {\n            exports.IngressAudioOptions.encode(message.audio, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.video !== undefined) {\n            exports.IngressVideoOptions.encode(message.video, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(66).string(message.roomName);\n        }\n        if (message.participantIdentity !== undefined && message.participantIdentity !== \"\") {\n            writer.uint32(74).string(message.participantIdentity);\n        }\n        if (message.participantName !== undefined && message.participantName !== \"\") {\n            writer.uint32(82).string(message.participantName);\n        }\n        if (message.reusable === true) {\n            writer.uint32(88).bool(message.reusable);\n        }\n        if (message.state !== undefined) {\n            exports.IngressState.encode(message.state, writer.uint32(98).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.ingressId = reader.string();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 3:\n                    message.streamKey = reader.string();\n                    break;\n                case 4:\n                    message.url = reader.string();\n                    break;\n                case 5:\n                    message.inputType = reader.int32();\n                    break;\n                case 13:\n                    message.bypassTranscoding = reader.bool();\n                    break;\n                case 6:\n                    message.audio = exports.IngressAudioOptions.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.video = exports.IngressVideoOptions.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.roomName = reader.string();\n                    break;\n                case 9:\n                    message.participantIdentity = reader.string();\n                    break;\n                case 10:\n                    message.participantName = reader.string();\n                    break;\n                case 11:\n                    message.reusable = reader.bool();\n                    break;\n                case 12:\n                    message.state = exports.IngressState.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            ingressId: isSet(object.ingressId) ? String(object.ingressId) : \"\",\n            name: isSet(object.name) ? String(object.name) : \"\",\n            streamKey: isSet(object.streamKey) ? String(object.streamKey) : \"\",\n            url: isSet(object.url) ? String(object.url) : \"\",\n            inputType: isSet(object.inputType) ? ingressInputFromJSON(object.inputType) : 0,\n            bypassTranscoding: isSet(object.bypassTranscoding) ? Boolean(object.bypassTranscoding) : false,\n            audio: isSet(object.audio) ? exports.IngressAudioOptions.fromJSON(object.audio) : undefined,\n            video: isSet(object.video) ? exports.IngressVideoOptions.fromJSON(object.video) : undefined,\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            participantIdentity: isSet(object.participantIdentity) ? String(object.participantIdentity) : \"\",\n            participantName: isSet(object.participantName) ? String(object.participantName) : \"\",\n            reusable: isSet(object.reusable) ? Boolean(object.reusable) : false,\n            state: isSet(object.state) ? exports.IngressState.fromJSON(object.state) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.ingressId !== undefined && (obj.ingressId = message.ingressId);\n        message.name !== undefined && (obj.name = message.name);\n        message.streamKey !== undefined && (obj.streamKey = message.streamKey);\n        message.url !== undefined && (obj.url = message.url);\n        message.inputType !== undefined && (obj.inputType = ingressInputToJSON(message.inputType));\n        message.bypassTranscoding !== undefined && (obj.bypassTranscoding = message.bypassTranscoding);\n        message.audio !== undefined && (obj.audio = message.audio ? exports.IngressAudioOptions.toJSON(message.audio) : undefined);\n        message.video !== undefined && (obj.video = message.video ? exports.IngressVideoOptions.toJSON(message.video) : undefined);\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.participantIdentity !== undefined && (obj.participantIdentity = message.participantIdentity);\n        message.participantName !== undefined && (obj.participantName = message.participantName);\n        message.reusable !== undefined && (obj.reusable = message.reusable);\n        message.state !== undefined && (obj.state = message.state ? exports.IngressState.toJSON(message.state) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        const message = createBaseIngressInfo();\n        message.ingressId = (_a = object.ingressId) !== null && _a !== void 0 ? _a : \"\";\n        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : \"\";\n        message.streamKey = (_c = object.streamKey) !== null && _c !== void 0 ? _c : \"\";\n        message.url = (_d = object.url) !== null && _d !== void 0 ? _d : \"\";\n        message.inputType = (_e = object.inputType) !== null && _e !== void 0 ? _e : 0;\n        message.bypassTranscoding = (_f = object.bypassTranscoding) !== null && _f !== void 0 ? _f : false;\n        message.audio = object.audio !== undefined && object.audio !== null ? exports.IngressAudioOptions.fromPartial(object.audio) : undefined;\n        message.video = object.video !== undefined && object.video !== null ? exports.IngressVideoOptions.fromPartial(object.video) : undefined;\n        message.roomName = (_g = object.roomName) !== null && _g !== void 0 ? _g : \"\";\n        message.participantIdentity = (_h = object.participantIdentity) !== null && _h !== void 0 ? _h : \"\";\n        message.participantName = (_j = object.participantName) !== null && _j !== void 0 ? _j : \"\";\n        message.reusable = (_k = object.reusable) !== null && _k !== void 0 ? _k : false;\n        message.state = object.state !== undefined && object.state !== null ? exports.IngressState.fromPartial(object.state) : undefined;\n        return message;\n    }\n};\nfunction createBaseIngressState() {\n    return {\n        status: 0,\n        error: \"\",\n        video: undefined,\n        audio: undefined,\n        roomId: \"\",\n        startedAt: 0,\n        endedAt: 0,\n        resourceId: \"\",\n        tracks: []\n    };\n}\nexports.IngressState = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.status !== undefined && message.status !== 0) {\n            writer.uint32(8).int32(message.status);\n        }\n        if (message.error !== undefined && message.error !== \"\") {\n            writer.uint32(18).string(message.error);\n        }\n        if (message.video !== undefined) {\n            exports.InputVideoState.encode(message.video, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.audio !== undefined) {\n            exports.InputAudioState.encode(message.audio, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.roomId !== undefined && message.roomId !== \"\") {\n            writer.uint32(42).string(message.roomId);\n        }\n        if (message.startedAt !== undefined && message.startedAt !== 0) {\n            writer.uint32(56).int64(message.startedAt);\n        }\n        if (message.endedAt !== undefined && message.endedAt !== 0) {\n            writer.uint32(64).int64(message.endedAt);\n        }\n        if (message.resourceId !== undefined && message.resourceId !== \"\") {\n            writer.uint32(74).string(message.resourceId);\n        }\n        if (message.tracks !== undefined && message.tracks.length !== 0) {\n            for (const v of message.tracks){\n                livekit_models_1.TrackInfo.encode(v, writer.uint32(50).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIngressState();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.status = reader.int32();\n                    break;\n                case 2:\n                    message.error = reader.string();\n                    break;\n                case 3:\n                    message.video = exports.InputVideoState.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.audio = exports.InputAudioState.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.roomId = reader.string();\n                    break;\n                case 7:\n                    message.startedAt = longToNumber(reader.int64());\n                    break;\n                case 8:\n                    message.endedAt = longToNumber(reader.int64());\n                    break;\n                case 9:\n                    message.resourceId = reader.string();\n                    break;\n                case 6:\n                    message.tracks.push(livekit_models_1.TrackInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            status: isSet(object.status) ? ingressState_StatusFromJSON(object.status) : 0,\n            error: isSet(object.error) ? String(object.error) : \"\",\n            video: isSet(object.video) ? exports.InputVideoState.fromJSON(object.video) : undefined,\n            audio: isSet(object.audio) ? exports.InputAudioState.fromJSON(object.audio) : undefined,\n            roomId: isSet(object.roomId) ? String(object.roomId) : \"\",\n            startedAt: isSet(object.startedAt) ? Number(object.startedAt) : 0,\n            endedAt: isSet(object.endedAt) ? Number(object.endedAt) : 0,\n            resourceId: isSet(object.resourceId) ? String(object.resourceId) : \"\",\n            tracks: Array.isArray(object === null || object === void 0 ? void 0 : object.tracks) ? object.tracks.map((e)=>livekit_models_1.TrackInfo.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.status !== undefined && (obj.status = ingressState_StatusToJSON(message.status));\n        message.error !== undefined && (obj.error = message.error);\n        message.video !== undefined && (obj.video = message.video ? exports.InputVideoState.toJSON(message.video) : undefined);\n        message.audio !== undefined && (obj.audio = message.audio ? exports.InputAudioState.toJSON(message.audio) : undefined);\n        message.roomId !== undefined && (obj.roomId = message.roomId);\n        message.startedAt !== undefined && (obj.startedAt = Math.round(message.startedAt));\n        message.endedAt !== undefined && (obj.endedAt = Math.round(message.endedAt));\n        message.resourceId !== undefined && (obj.resourceId = message.resourceId);\n        if (message.tracks) {\n            obj.tracks = message.tracks.map((e)=>e ? livekit_models_1.TrackInfo.toJSON(e) : undefined);\n        } else {\n            obj.tracks = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const message = createBaseIngressState();\n        message.status = (_a = object.status) !== null && _a !== void 0 ? _a : 0;\n        message.error = (_b = object.error) !== null && _b !== void 0 ? _b : \"\";\n        message.video = object.video !== undefined && object.video !== null ? exports.InputVideoState.fromPartial(object.video) : undefined;\n        message.audio = object.audio !== undefined && object.audio !== null ? exports.InputAudioState.fromPartial(object.audio) : undefined;\n        message.roomId = (_c = object.roomId) !== null && _c !== void 0 ? _c : \"\";\n        message.startedAt = (_d = object.startedAt) !== null && _d !== void 0 ? _d : 0;\n        message.endedAt = (_e = object.endedAt) !== null && _e !== void 0 ? _e : 0;\n        message.resourceId = (_f = object.resourceId) !== null && _f !== void 0 ? _f : \"\";\n        message.tracks = ((_g = object.tracks) === null || _g === void 0 ? void 0 : _g.map((e)=>livekit_models_1.TrackInfo.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseInputVideoState() {\n    return {\n        mimeType: \"\",\n        averageBitrate: 0,\n        width: 0,\n        height: 0,\n        framerate: 0\n    };\n}\nexports.InputVideoState = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.mimeType !== undefined && message.mimeType !== \"\") {\n            writer.uint32(10).string(message.mimeType);\n        }\n        if (message.averageBitrate !== undefined && message.averageBitrate !== 0) {\n            writer.uint32(16).uint32(message.averageBitrate);\n        }\n        if (message.width !== undefined && message.width !== 0) {\n            writer.uint32(24).uint32(message.width);\n        }\n        if (message.height !== undefined && message.height !== 0) {\n            writer.uint32(32).uint32(message.height);\n        }\n        if (message.framerate !== undefined && message.framerate !== 0) {\n            writer.uint32(41).double(message.framerate);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInputVideoState();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.mimeType = reader.string();\n                    break;\n                case 2:\n                    message.averageBitrate = reader.uint32();\n                    break;\n                case 3:\n                    message.width = reader.uint32();\n                    break;\n                case 4:\n                    message.height = reader.uint32();\n                    break;\n                case 5:\n                    message.framerate = reader.double();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            mimeType: isSet(object.mimeType) ? String(object.mimeType) : \"\",\n            averageBitrate: isSet(object.averageBitrate) ? Number(object.averageBitrate) : 0,\n            width: isSet(object.width) ? Number(object.width) : 0,\n            height: isSet(object.height) ? Number(object.height) : 0,\n            framerate: isSet(object.framerate) ? Number(object.framerate) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.mimeType !== undefined && (obj.mimeType = message.mimeType);\n        message.averageBitrate !== undefined && (obj.averageBitrate = Math.round(message.averageBitrate));\n        message.width !== undefined && (obj.width = Math.round(message.width));\n        message.height !== undefined && (obj.height = Math.round(message.height));\n        message.framerate !== undefined && (obj.framerate = message.framerate);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e;\n        const message = createBaseInputVideoState();\n        message.mimeType = (_a = object.mimeType) !== null && _a !== void 0 ? _a : \"\";\n        message.averageBitrate = (_b = object.averageBitrate) !== null && _b !== void 0 ? _b : 0;\n        message.width = (_c = object.width) !== null && _c !== void 0 ? _c : 0;\n        message.height = (_d = object.height) !== null && _d !== void 0 ? _d : 0;\n        message.framerate = (_e = object.framerate) !== null && _e !== void 0 ? _e : 0;\n        return message;\n    }\n};\nfunction createBaseInputAudioState() {\n    return {\n        mimeType: \"\",\n        averageBitrate: 0,\n        channels: 0,\n        sampleRate: 0\n    };\n}\nexports.InputAudioState = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.mimeType !== undefined && message.mimeType !== \"\") {\n            writer.uint32(10).string(message.mimeType);\n        }\n        if (message.averageBitrate !== undefined && message.averageBitrate !== 0) {\n            writer.uint32(16).uint32(message.averageBitrate);\n        }\n        if (message.channels !== undefined && message.channels !== 0) {\n            writer.uint32(24).uint32(message.channels);\n        }\n        if (message.sampleRate !== undefined && message.sampleRate !== 0) {\n            writer.uint32(32).uint32(message.sampleRate);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInputAudioState();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.mimeType = reader.string();\n                    break;\n                case 2:\n                    message.averageBitrate = reader.uint32();\n                    break;\n                case 3:\n                    message.channels = reader.uint32();\n                    break;\n                case 4:\n                    message.sampleRate = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            mimeType: isSet(object.mimeType) ? String(object.mimeType) : \"\",\n            averageBitrate: isSet(object.averageBitrate) ? Number(object.averageBitrate) : 0,\n            channels: isSet(object.channels) ? Number(object.channels) : 0,\n            sampleRate: isSet(object.sampleRate) ? Number(object.sampleRate) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.mimeType !== undefined && (obj.mimeType = message.mimeType);\n        message.averageBitrate !== undefined && (obj.averageBitrate = Math.round(message.averageBitrate));\n        message.channels !== undefined && (obj.channels = Math.round(message.channels));\n        message.sampleRate !== undefined && (obj.sampleRate = Math.round(message.sampleRate));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d;\n        const message = createBaseInputAudioState();\n        message.mimeType = (_a = object.mimeType) !== null && _a !== void 0 ? _a : \"\";\n        message.averageBitrate = (_b = object.averageBitrate) !== null && _b !== void 0 ? _b : 0;\n        message.channels = (_c = object.channels) !== null && _c !== void 0 ? _c : 0;\n        message.sampleRate = (_d = object.sampleRate) !== null && _d !== void 0 ? _d : 0;\n        return message;\n    }\n};\nfunction createBaseUpdateIngressRequest() {\n    return {\n        ingressId: \"\",\n        name: \"\",\n        roomName: \"\",\n        participantIdentity: \"\",\n        participantName: \"\",\n        bypassTranscoding: undefined,\n        audio: undefined,\n        video: undefined\n    };\n}\nexports.UpdateIngressRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.ingressId !== undefined && message.ingressId !== \"\") {\n            writer.uint32(10).string(message.ingressId);\n        }\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(18).string(message.name);\n        }\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(26).string(message.roomName);\n        }\n        if (message.participantIdentity !== undefined && message.participantIdentity !== \"\") {\n            writer.uint32(34).string(message.participantIdentity);\n        }\n        if (message.participantName !== undefined && message.participantName !== \"\") {\n            writer.uint32(42).string(message.participantName);\n        }\n        if (message.bypassTranscoding !== undefined) {\n            writer.uint32(64).bool(message.bypassTranscoding);\n        }\n        if (message.audio !== undefined) {\n            exports.IngressAudioOptions.encode(message.audio, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.video !== undefined) {\n            exports.IngressVideoOptions.encode(message.video, writer.uint32(58).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateIngressRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.ingressId = reader.string();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 3:\n                    message.roomName = reader.string();\n                    break;\n                case 4:\n                    message.participantIdentity = reader.string();\n                    break;\n                case 5:\n                    message.participantName = reader.string();\n                    break;\n                case 8:\n                    message.bypassTranscoding = reader.bool();\n                    break;\n                case 6:\n                    message.audio = exports.IngressAudioOptions.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.video = exports.IngressVideoOptions.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            ingressId: isSet(object.ingressId) ? String(object.ingressId) : \"\",\n            name: isSet(object.name) ? String(object.name) : \"\",\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            participantIdentity: isSet(object.participantIdentity) ? String(object.participantIdentity) : \"\",\n            participantName: isSet(object.participantName) ? String(object.participantName) : \"\",\n            bypassTranscoding: isSet(object.bypassTranscoding) ? Boolean(object.bypassTranscoding) : undefined,\n            audio: isSet(object.audio) ? exports.IngressAudioOptions.fromJSON(object.audio) : undefined,\n            video: isSet(object.video) ? exports.IngressVideoOptions.fromJSON(object.video) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.ingressId !== undefined && (obj.ingressId = message.ingressId);\n        message.name !== undefined && (obj.name = message.name);\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.participantIdentity !== undefined && (obj.participantIdentity = message.participantIdentity);\n        message.participantName !== undefined && (obj.participantName = message.participantName);\n        message.bypassTranscoding !== undefined && (obj.bypassTranscoding = message.bypassTranscoding);\n        message.audio !== undefined && (obj.audio = message.audio ? exports.IngressAudioOptions.toJSON(message.audio) : undefined);\n        message.video !== undefined && (obj.video = message.video ? exports.IngressVideoOptions.toJSON(message.video) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseUpdateIngressRequest();\n        message.ingressId = (_a = object.ingressId) !== null && _a !== void 0 ? _a : \"\";\n        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : \"\";\n        message.roomName = (_c = object.roomName) !== null && _c !== void 0 ? _c : \"\";\n        message.participantIdentity = (_d = object.participantIdentity) !== null && _d !== void 0 ? _d : \"\";\n        message.participantName = (_e = object.participantName) !== null && _e !== void 0 ? _e : \"\";\n        message.bypassTranscoding = (_f = object.bypassTranscoding) !== null && _f !== void 0 ? _f : undefined;\n        message.audio = object.audio !== undefined && object.audio !== null ? exports.IngressAudioOptions.fromPartial(object.audio) : undefined;\n        message.video = object.video !== undefined && object.video !== null ? exports.IngressVideoOptions.fromPartial(object.video) : undefined;\n        return message;\n    }\n};\nfunction createBaseListIngressRequest() {\n    return {\n        roomName: \"\",\n        ingressId: \"\"\n    };\n}\nexports.ListIngressRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.roomName !== undefined && message.roomName !== \"\") {\n            writer.uint32(10).string(message.roomName);\n        }\n        if (message.ingressId !== undefined && message.ingressId !== \"\") {\n            writer.uint32(18).string(message.ingressId);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListIngressRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.roomName = reader.string();\n                    break;\n                case 2:\n                    message.ingressId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            roomName: isSet(object.roomName) ? String(object.roomName) : \"\",\n            ingressId: isSet(object.ingressId) ? String(object.ingressId) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.roomName !== undefined && (obj.roomName = message.roomName);\n        message.ingressId !== undefined && (obj.ingressId = message.ingressId);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseListIngressRequest();\n        message.roomName = (_a = object.roomName) !== null && _a !== void 0 ? _a : \"\";\n        message.ingressId = (_b = object.ingressId) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    }\n};\nfunction createBaseListIngressResponse() {\n    return {\n        items: []\n    };\n}\nexports.ListIngressResponse = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.items !== undefined && message.items.length !== 0) {\n            for (const v of message.items){\n                exports.IngressInfo.encode(v, writer.uint32(10).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListIngressResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.items.push(exports.IngressInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            items: Array.isArray(object === null || object === void 0 ? void 0 : object.items) ? object.items.map((e)=>exports.IngressInfo.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.items) {\n            obj.items = message.items.map((e)=>e ? exports.IngressInfo.toJSON(e) : undefined);\n        } else {\n            obj.items = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseListIngressResponse();\n        message.items = ((_a = object.items) === null || _a === void 0 ? void 0 : _a.map((e)=>exports.IngressInfo.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseDeleteIngressRequest() {\n    return {\n        ingressId: \"\"\n    };\n}\nexports.DeleteIngressRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.ingressId !== undefined && message.ingressId !== \"\") {\n            writer.uint32(10).string(message.ingressId);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDeleteIngressRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.ingressId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            ingressId: isSet(object.ingressId) ? String(object.ingressId) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.ingressId !== undefined && (obj.ingressId = message.ingressId);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseDeleteIngressRequest();\n        message.ingressId = (_a = object.ingressId) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    }\n};\nvar globalThis = (()=>{\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (false) {}\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n} //# sourceMappingURL=livekit_ingress.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js":
/*!**********************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/livekit_models.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Room = exports.clientInfo_SDKToJSON = exports.clientInfo_SDKFromJSON = exports.ClientInfo_SDK = exports.serverInfo_EditionToJSON = exports.serverInfo_EditionFromJSON = exports.ServerInfo_Edition = exports.dataPacket_KindToJSON = exports.dataPacket_KindFromJSON = exports.DataPacket_Kind = exports.encryption_TypeToJSON = exports.encryption_TypeFromJSON = exports.Encryption_Type = exports.participantInfo_StateToJSON = exports.participantInfo_StateFromJSON = exports.ParticipantInfo_State = exports.subscriptionErrorToJSON = exports.subscriptionErrorFromJSON = exports.SubscriptionError = exports.reconnectReasonToJSON = exports.reconnectReasonFromJSON = exports.ReconnectReason = exports.disconnectReasonToJSON = exports.disconnectReasonFromJSON = exports.DisconnectReason = exports.clientConfigSettingToJSON = exports.clientConfigSettingFromJSON = exports.ClientConfigSetting = exports.connectionQualityToJSON = exports.connectionQualityFromJSON = exports.ConnectionQuality = exports.videoQualityToJSON = exports.videoQualityFromJSON = exports.VideoQuality = exports.trackSourceToJSON = exports.trackSourceFromJSON = exports.TrackSource = exports.trackTypeToJSON = exports.trackTypeFromJSON = exports.TrackType = exports.imageCodecToJSON = exports.imageCodecFromJSON = exports.ImageCodec = exports.videoCodecToJSON = exports.videoCodecFromJSON = exports.VideoCodec = exports.audioCodecToJSON = exports.audioCodecFromJSON = exports.AudioCodec = exports.protobufPackage = void 0;\nexports.TimedVersion = exports.RTPStats_GapHistogramEntry = exports.RTPStats = exports.RTPDrift = exports.DisabledCodecs = exports.VideoConfiguration = exports.ClientConfiguration = exports.ClientInfo = exports.ServerInfo = exports.ParticipantTracks = exports.UserPacket = exports.SpeakerInfo = exports.ActiveSpeakerUpdate = exports.DataPacket = exports.VideoLayer = exports.TrackInfo = exports.SimulcastCodecInfo = exports.Encryption = exports.ParticipantInfo = exports.ParticipantPermission = exports.PlayoutDelay = exports.Codec = void 0;\n/* eslint-disable */ const long_1 = __importDefault(__webpack_require__(/*! long */ \"(action-browser)/./node_modules/long/umd/index.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(action-browser)/./node_modules/protobufjs/minimal.js\"));\nconst timestamp_1 = __webpack_require__(/*! ./google/protobuf/timestamp */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/google/protobuf/timestamp.js\");\nexports.protobufPackage = \"livekit\";\nvar AudioCodec;\n(function(AudioCodec) {\n    AudioCodec[AudioCodec[\"DEFAULT_AC\"] = 0] = \"DEFAULT_AC\";\n    AudioCodec[AudioCodec[\"OPUS\"] = 1] = \"OPUS\";\n    AudioCodec[AudioCodec[\"AAC\"] = 2] = \"AAC\";\n    AudioCodec[AudioCodec[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(AudioCodec = exports.AudioCodec || (exports.AudioCodec = {}));\nfunction audioCodecFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"DEFAULT_AC\":\n            return AudioCodec.DEFAULT_AC;\n        case 1:\n        case \"OPUS\":\n            return AudioCodec.OPUS;\n        case 2:\n        case \"AAC\":\n            return AudioCodec.AAC;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return AudioCodec.UNRECOGNIZED;\n    }\n}\nexports.audioCodecFromJSON = audioCodecFromJSON;\nfunction audioCodecToJSON(object) {\n    switch(object){\n        case AudioCodec.DEFAULT_AC:\n            return \"DEFAULT_AC\";\n        case AudioCodec.OPUS:\n            return \"OPUS\";\n        case AudioCodec.AAC:\n            return \"AAC\";\n        case AudioCodec.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.audioCodecToJSON = audioCodecToJSON;\nvar VideoCodec;\n(function(VideoCodec) {\n    VideoCodec[VideoCodec[\"DEFAULT_VC\"] = 0] = \"DEFAULT_VC\";\n    VideoCodec[VideoCodec[\"H264_BASELINE\"] = 1] = \"H264_BASELINE\";\n    VideoCodec[VideoCodec[\"H264_MAIN\"] = 2] = \"H264_MAIN\";\n    VideoCodec[VideoCodec[\"H264_HIGH\"] = 3] = \"H264_HIGH\";\n    VideoCodec[VideoCodec[\"VP8\"] = 4] = \"VP8\";\n    VideoCodec[VideoCodec[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(VideoCodec = exports.VideoCodec || (exports.VideoCodec = {}));\nfunction videoCodecFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"DEFAULT_VC\":\n            return VideoCodec.DEFAULT_VC;\n        case 1:\n        case \"H264_BASELINE\":\n            return VideoCodec.H264_BASELINE;\n        case 2:\n        case \"H264_MAIN\":\n            return VideoCodec.H264_MAIN;\n        case 3:\n        case \"H264_HIGH\":\n            return VideoCodec.H264_HIGH;\n        case 4:\n        case \"VP8\":\n            return VideoCodec.VP8;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return VideoCodec.UNRECOGNIZED;\n    }\n}\nexports.videoCodecFromJSON = videoCodecFromJSON;\nfunction videoCodecToJSON(object) {\n    switch(object){\n        case VideoCodec.DEFAULT_VC:\n            return \"DEFAULT_VC\";\n        case VideoCodec.H264_BASELINE:\n            return \"H264_BASELINE\";\n        case VideoCodec.H264_MAIN:\n            return \"H264_MAIN\";\n        case VideoCodec.H264_HIGH:\n            return \"H264_HIGH\";\n        case VideoCodec.VP8:\n            return \"VP8\";\n        case VideoCodec.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.videoCodecToJSON = videoCodecToJSON;\nvar ImageCodec;\n(function(ImageCodec) {\n    ImageCodec[ImageCodec[\"IC_DEFAULT\"] = 0] = \"IC_DEFAULT\";\n    ImageCodec[ImageCodec[\"IC_JPEG\"] = 1] = \"IC_JPEG\";\n    ImageCodec[ImageCodec[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ImageCodec = exports.ImageCodec || (exports.ImageCodec = {}));\nfunction imageCodecFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"IC_DEFAULT\":\n            return ImageCodec.IC_DEFAULT;\n        case 1:\n        case \"IC_JPEG\":\n            return ImageCodec.IC_JPEG;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ImageCodec.UNRECOGNIZED;\n    }\n}\nexports.imageCodecFromJSON = imageCodecFromJSON;\nfunction imageCodecToJSON(object) {\n    switch(object){\n        case ImageCodec.IC_DEFAULT:\n            return \"IC_DEFAULT\";\n        case ImageCodec.IC_JPEG:\n            return \"IC_JPEG\";\n        case ImageCodec.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.imageCodecToJSON = imageCodecToJSON;\nvar TrackType;\n(function(TrackType) {\n    TrackType[TrackType[\"AUDIO\"] = 0] = \"AUDIO\";\n    TrackType[TrackType[\"VIDEO\"] = 1] = \"VIDEO\";\n    TrackType[TrackType[\"DATA\"] = 2] = \"DATA\";\n    TrackType[TrackType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(TrackType = exports.TrackType || (exports.TrackType = {}));\nfunction trackTypeFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"AUDIO\":\n            return TrackType.AUDIO;\n        case 1:\n        case \"VIDEO\":\n            return TrackType.VIDEO;\n        case 2:\n        case \"DATA\":\n            return TrackType.DATA;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return TrackType.UNRECOGNIZED;\n    }\n}\nexports.trackTypeFromJSON = trackTypeFromJSON;\nfunction trackTypeToJSON(object) {\n    switch(object){\n        case TrackType.AUDIO:\n            return \"AUDIO\";\n        case TrackType.VIDEO:\n            return \"VIDEO\";\n        case TrackType.DATA:\n            return \"DATA\";\n        case TrackType.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.trackTypeToJSON = trackTypeToJSON;\nvar TrackSource;\n(function(TrackSource) {\n    TrackSource[TrackSource[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    TrackSource[TrackSource[\"CAMERA\"] = 1] = \"CAMERA\";\n    TrackSource[TrackSource[\"MICROPHONE\"] = 2] = \"MICROPHONE\";\n    TrackSource[TrackSource[\"SCREEN_SHARE\"] = 3] = \"SCREEN_SHARE\";\n    TrackSource[TrackSource[\"SCREEN_SHARE_AUDIO\"] = 4] = \"SCREEN_SHARE_AUDIO\";\n    TrackSource[TrackSource[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(TrackSource = exports.TrackSource || (exports.TrackSource = {}));\nfunction trackSourceFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"UNKNOWN\":\n            return TrackSource.UNKNOWN;\n        case 1:\n        case \"CAMERA\":\n            return TrackSource.CAMERA;\n        case 2:\n        case \"MICROPHONE\":\n            return TrackSource.MICROPHONE;\n        case 3:\n        case \"SCREEN_SHARE\":\n            return TrackSource.SCREEN_SHARE;\n        case 4:\n        case \"SCREEN_SHARE_AUDIO\":\n            return TrackSource.SCREEN_SHARE_AUDIO;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return TrackSource.UNRECOGNIZED;\n    }\n}\nexports.trackSourceFromJSON = trackSourceFromJSON;\nfunction trackSourceToJSON(object) {\n    switch(object){\n        case TrackSource.UNKNOWN:\n            return \"UNKNOWN\";\n        case TrackSource.CAMERA:\n            return \"CAMERA\";\n        case TrackSource.MICROPHONE:\n            return \"MICROPHONE\";\n        case TrackSource.SCREEN_SHARE:\n            return \"SCREEN_SHARE\";\n        case TrackSource.SCREEN_SHARE_AUDIO:\n            return \"SCREEN_SHARE_AUDIO\";\n        case TrackSource.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.trackSourceToJSON = trackSourceToJSON;\nvar VideoQuality;\n(function(VideoQuality) {\n    VideoQuality[VideoQuality[\"LOW\"] = 0] = \"LOW\";\n    VideoQuality[VideoQuality[\"MEDIUM\"] = 1] = \"MEDIUM\";\n    VideoQuality[VideoQuality[\"HIGH\"] = 2] = \"HIGH\";\n    VideoQuality[VideoQuality[\"OFF\"] = 3] = \"OFF\";\n    VideoQuality[VideoQuality[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(VideoQuality = exports.VideoQuality || (exports.VideoQuality = {}));\nfunction videoQualityFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"LOW\":\n            return VideoQuality.LOW;\n        case 1:\n        case \"MEDIUM\":\n            return VideoQuality.MEDIUM;\n        case 2:\n        case \"HIGH\":\n            return VideoQuality.HIGH;\n        case 3:\n        case \"OFF\":\n            return VideoQuality.OFF;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return VideoQuality.UNRECOGNIZED;\n    }\n}\nexports.videoQualityFromJSON = videoQualityFromJSON;\nfunction videoQualityToJSON(object) {\n    switch(object){\n        case VideoQuality.LOW:\n            return \"LOW\";\n        case VideoQuality.MEDIUM:\n            return \"MEDIUM\";\n        case VideoQuality.HIGH:\n            return \"HIGH\";\n        case VideoQuality.OFF:\n            return \"OFF\";\n        case VideoQuality.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.videoQualityToJSON = videoQualityToJSON;\nvar ConnectionQuality;\n(function(ConnectionQuality) {\n    ConnectionQuality[ConnectionQuality[\"POOR\"] = 0] = \"POOR\";\n    ConnectionQuality[ConnectionQuality[\"GOOD\"] = 1] = \"GOOD\";\n    ConnectionQuality[ConnectionQuality[\"EXCELLENT\"] = 2] = \"EXCELLENT\";\n    ConnectionQuality[ConnectionQuality[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ConnectionQuality = exports.ConnectionQuality || (exports.ConnectionQuality = {}));\nfunction connectionQualityFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"POOR\":\n            return ConnectionQuality.POOR;\n        case 1:\n        case \"GOOD\":\n            return ConnectionQuality.GOOD;\n        case 2:\n        case \"EXCELLENT\":\n            return ConnectionQuality.EXCELLENT;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ConnectionQuality.UNRECOGNIZED;\n    }\n}\nexports.connectionQualityFromJSON = connectionQualityFromJSON;\nfunction connectionQualityToJSON(object) {\n    switch(object){\n        case ConnectionQuality.POOR:\n            return \"POOR\";\n        case ConnectionQuality.GOOD:\n            return \"GOOD\";\n        case ConnectionQuality.EXCELLENT:\n            return \"EXCELLENT\";\n        case ConnectionQuality.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.connectionQualityToJSON = connectionQualityToJSON;\nvar ClientConfigSetting;\n(function(ClientConfigSetting) {\n    ClientConfigSetting[ClientConfigSetting[\"UNSET\"] = 0] = \"UNSET\";\n    ClientConfigSetting[ClientConfigSetting[\"DISABLED\"] = 1] = \"DISABLED\";\n    ClientConfigSetting[ClientConfigSetting[\"ENABLED\"] = 2] = \"ENABLED\";\n    ClientConfigSetting[ClientConfigSetting[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ClientConfigSetting = exports.ClientConfigSetting || (exports.ClientConfigSetting = {}));\nfunction clientConfigSettingFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"UNSET\":\n            return ClientConfigSetting.UNSET;\n        case 1:\n        case \"DISABLED\":\n            return ClientConfigSetting.DISABLED;\n        case 2:\n        case \"ENABLED\":\n            return ClientConfigSetting.ENABLED;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ClientConfigSetting.UNRECOGNIZED;\n    }\n}\nexports.clientConfigSettingFromJSON = clientConfigSettingFromJSON;\nfunction clientConfigSettingToJSON(object) {\n    switch(object){\n        case ClientConfigSetting.UNSET:\n            return \"UNSET\";\n        case ClientConfigSetting.DISABLED:\n            return \"DISABLED\";\n        case ClientConfigSetting.ENABLED:\n            return \"ENABLED\";\n        case ClientConfigSetting.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.clientConfigSettingToJSON = clientConfigSettingToJSON;\nvar DisconnectReason;\n(function(DisconnectReason) {\n    DisconnectReason[DisconnectReason[\"UNKNOWN_REASON\"] = 0] = \"UNKNOWN_REASON\";\n    DisconnectReason[DisconnectReason[\"CLIENT_INITIATED\"] = 1] = \"CLIENT_INITIATED\";\n    DisconnectReason[DisconnectReason[\"DUPLICATE_IDENTITY\"] = 2] = \"DUPLICATE_IDENTITY\";\n    DisconnectReason[DisconnectReason[\"SERVER_SHUTDOWN\"] = 3] = \"SERVER_SHUTDOWN\";\n    DisconnectReason[DisconnectReason[\"PARTICIPANT_REMOVED\"] = 4] = \"PARTICIPANT_REMOVED\";\n    DisconnectReason[DisconnectReason[\"ROOM_DELETED\"] = 5] = \"ROOM_DELETED\";\n    DisconnectReason[DisconnectReason[\"STATE_MISMATCH\"] = 6] = \"STATE_MISMATCH\";\n    DisconnectReason[DisconnectReason[\"JOIN_FAILURE\"] = 7] = \"JOIN_FAILURE\";\n    DisconnectReason[DisconnectReason[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(DisconnectReason = exports.DisconnectReason || (exports.DisconnectReason = {}));\nfunction disconnectReasonFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"UNKNOWN_REASON\":\n            return DisconnectReason.UNKNOWN_REASON;\n        case 1:\n        case \"CLIENT_INITIATED\":\n            return DisconnectReason.CLIENT_INITIATED;\n        case 2:\n        case \"DUPLICATE_IDENTITY\":\n            return DisconnectReason.DUPLICATE_IDENTITY;\n        case 3:\n        case \"SERVER_SHUTDOWN\":\n            return DisconnectReason.SERVER_SHUTDOWN;\n        case 4:\n        case \"PARTICIPANT_REMOVED\":\n            return DisconnectReason.PARTICIPANT_REMOVED;\n        case 5:\n        case \"ROOM_DELETED\":\n            return DisconnectReason.ROOM_DELETED;\n        case 6:\n        case \"STATE_MISMATCH\":\n            return DisconnectReason.STATE_MISMATCH;\n        case 7:\n        case \"JOIN_FAILURE\":\n            return DisconnectReason.JOIN_FAILURE;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return DisconnectReason.UNRECOGNIZED;\n    }\n}\nexports.disconnectReasonFromJSON = disconnectReasonFromJSON;\nfunction disconnectReasonToJSON(object) {\n    switch(object){\n        case DisconnectReason.UNKNOWN_REASON:\n            return \"UNKNOWN_REASON\";\n        case DisconnectReason.CLIENT_INITIATED:\n            return \"CLIENT_INITIATED\";\n        case DisconnectReason.DUPLICATE_IDENTITY:\n            return \"DUPLICATE_IDENTITY\";\n        case DisconnectReason.SERVER_SHUTDOWN:\n            return \"SERVER_SHUTDOWN\";\n        case DisconnectReason.PARTICIPANT_REMOVED:\n            return \"PARTICIPANT_REMOVED\";\n        case DisconnectReason.ROOM_DELETED:\n            return \"ROOM_DELETED\";\n        case DisconnectReason.STATE_MISMATCH:\n            return \"STATE_MISMATCH\";\n        case DisconnectReason.JOIN_FAILURE:\n            return \"JOIN_FAILURE\";\n        case DisconnectReason.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.disconnectReasonToJSON = disconnectReasonToJSON;\nvar ReconnectReason;\n(function(ReconnectReason) {\n    ReconnectReason[ReconnectReason[\"RR_UNKNOWN\"] = 0] = \"RR_UNKNOWN\";\n    ReconnectReason[ReconnectReason[\"RR_SIGNAL_DISCONNECTED\"] = 1] = \"RR_SIGNAL_DISCONNECTED\";\n    ReconnectReason[ReconnectReason[\"RR_PUBLISHER_FAILED\"] = 2] = \"RR_PUBLISHER_FAILED\";\n    ReconnectReason[ReconnectReason[\"RR_SUBSCRIBER_FAILED\"] = 3] = \"RR_SUBSCRIBER_FAILED\";\n    ReconnectReason[ReconnectReason[\"RR_SWITCH_CANDIDATE\"] = 4] = \"RR_SWITCH_CANDIDATE\";\n    ReconnectReason[ReconnectReason[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ReconnectReason = exports.ReconnectReason || (exports.ReconnectReason = {}));\nfunction reconnectReasonFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"RR_UNKNOWN\":\n            return ReconnectReason.RR_UNKNOWN;\n        case 1:\n        case \"RR_SIGNAL_DISCONNECTED\":\n            return ReconnectReason.RR_SIGNAL_DISCONNECTED;\n        case 2:\n        case \"RR_PUBLISHER_FAILED\":\n            return ReconnectReason.RR_PUBLISHER_FAILED;\n        case 3:\n        case \"RR_SUBSCRIBER_FAILED\":\n            return ReconnectReason.RR_SUBSCRIBER_FAILED;\n        case 4:\n        case \"RR_SWITCH_CANDIDATE\":\n            return ReconnectReason.RR_SWITCH_CANDIDATE;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ReconnectReason.UNRECOGNIZED;\n    }\n}\nexports.reconnectReasonFromJSON = reconnectReasonFromJSON;\nfunction reconnectReasonToJSON(object) {\n    switch(object){\n        case ReconnectReason.RR_UNKNOWN:\n            return \"RR_UNKNOWN\";\n        case ReconnectReason.RR_SIGNAL_DISCONNECTED:\n            return \"RR_SIGNAL_DISCONNECTED\";\n        case ReconnectReason.RR_PUBLISHER_FAILED:\n            return \"RR_PUBLISHER_FAILED\";\n        case ReconnectReason.RR_SUBSCRIBER_FAILED:\n            return \"RR_SUBSCRIBER_FAILED\";\n        case ReconnectReason.RR_SWITCH_CANDIDATE:\n            return \"RR_SWITCH_CANDIDATE\";\n        case ReconnectReason.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.reconnectReasonToJSON = reconnectReasonToJSON;\nvar SubscriptionError;\n(function(SubscriptionError) {\n    SubscriptionError[SubscriptionError[\"SE_UNKNOWN\"] = 0] = \"SE_UNKNOWN\";\n    SubscriptionError[SubscriptionError[\"SE_CODEC_UNSUPPORTED\"] = 1] = \"SE_CODEC_UNSUPPORTED\";\n    SubscriptionError[SubscriptionError[\"SE_TRACK_NOTFOUND\"] = 2] = \"SE_TRACK_NOTFOUND\";\n    SubscriptionError[SubscriptionError[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(SubscriptionError = exports.SubscriptionError || (exports.SubscriptionError = {}));\nfunction subscriptionErrorFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"SE_UNKNOWN\":\n            return SubscriptionError.SE_UNKNOWN;\n        case 1:\n        case \"SE_CODEC_UNSUPPORTED\":\n            return SubscriptionError.SE_CODEC_UNSUPPORTED;\n        case 2:\n        case \"SE_TRACK_NOTFOUND\":\n            return SubscriptionError.SE_TRACK_NOTFOUND;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return SubscriptionError.UNRECOGNIZED;\n    }\n}\nexports.subscriptionErrorFromJSON = subscriptionErrorFromJSON;\nfunction subscriptionErrorToJSON(object) {\n    switch(object){\n        case SubscriptionError.SE_UNKNOWN:\n            return \"SE_UNKNOWN\";\n        case SubscriptionError.SE_CODEC_UNSUPPORTED:\n            return \"SE_CODEC_UNSUPPORTED\";\n        case SubscriptionError.SE_TRACK_NOTFOUND:\n            return \"SE_TRACK_NOTFOUND\";\n        case SubscriptionError.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.subscriptionErrorToJSON = subscriptionErrorToJSON;\nvar ParticipantInfo_State;\n(function(ParticipantInfo_State) {\n    /** JOINING - websocket' connected, but not offered yet */ ParticipantInfo_State[ParticipantInfo_State[\"JOINING\"] = 0] = \"JOINING\";\n    /** JOINED - server received client offer */ ParticipantInfo_State[ParticipantInfo_State[\"JOINED\"] = 1] = \"JOINED\";\n    /** ACTIVE - ICE connectivity established */ ParticipantInfo_State[ParticipantInfo_State[\"ACTIVE\"] = 2] = \"ACTIVE\";\n    /** DISCONNECTED - WS disconnected */ ParticipantInfo_State[ParticipantInfo_State[\"DISCONNECTED\"] = 3] = \"DISCONNECTED\";\n    ParticipantInfo_State[ParticipantInfo_State[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ParticipantInfo_State = exports.ParticipantInfo_State || (exports.ParticipantInfo_State = {}));\nfunction participantInfo_StateFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"JOINING\":\n            return ParticipantInfo_State.JOINING;\n        case 1:\n        case \"JOINED\":\n            return ParticipantInfo_State.JOINED;\n        case 2:\n        case \"ACTIVE\":\n            return ParticipantInfo_State.ACTIVE;\n        case 3:\n        case \"DISCONNECTED\":\n            return ParticipantInfo_State.DISCONNECTED;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ParticipantInfo_State.UNRECOGNIZED;\n    }\n}\nexports.participantInfo_StateFromJSON = participantInfo_StateFromJSON;\nfunction participantInfo_StateToJSON(object) {\n    switch(object){\n        case ParticipantInfo_State.JOINING:\n            return \"JOINING\";\n        case ParticipantInfo_State.JOINED:\n            return \"JOINED\";\n        case ParticipantInfo_State.ACTIVE:\n            return \"ACTIVE\";\n        case ParticipantInfo_State.DISCONNECTED:\n            return \"DISCONNECTED\";\n        case ParticipantInfo_State.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.participantInfo_StateToJSON = participantInfo_StateToJSON;\nvar Encryption_Type;\n(function(Encryption_Type) {\n    Encryption_Type[Encryption_Type[\"NONE\"] = 0] = \"NONE\";\n    Encryption_Type[Encryption_Type[\"GCM\"] = 1] = \"GCM\";\n    Encryption_Type[Encryption_Type[\"CUSTOM\"] = 2] = \"CUSTOM\";\n    Encryption_Type[Encryption_Type[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(Encryption_Type = exports.Encryption_Type || (exports.Encryption_Type = {}));\nfunction encryption_TypeFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"NONE\":\n            return Encryption_Type.NONE;\n        case 1:\n        case \"GCM\":\n            return Encryption_Type.GCM;\n        case 2:\n        case \"CUSTOM\":\n            return Encryption_Type.CUSTOM;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return Encryption_Type.UNRECOGNIZED;\n    }\n}\nexports.encryption_TypeFromJSON = encryption_TypeFromJSON;\nfunction encryption_TypeToJSON(object) {\n    switch(object){\n        case Encryption_Type.NONE:\n            return \"NONE\";\n        case Encryption_Type.GCM:\n            return \"GCM\";\n        case Encryption_Type.CUSTOM:\n            return \"CUSTOM\";\n        case Encryption_Type.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.encryption_TypeToJSON = encryption_TypeToJSON;\nvar DataPacket_Kind;\n(function(DataPacket_Kind) {\n    DataPacket_Kind[DataPacket_Kind[\"RELIABLE\"] = 0] = \"RELIABLE\";\n    DataPacket_Kind[DataPacket_Kind[\"LOSSY\"] = 1] = \"LOSSY\";\n    DataPacket_Kind[DataPacket_Kind[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(DataPacket_Kind = exports.DataPacket_Kind || (exports.DataPacket_Kind = {}));\nfunction dataPacket_KindFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"RELIABLE\":\n            return DataPacket_Kind.RELIABLE;\n        case 1:\n        case \"LOSSY\":\n            return DataPacket_Kind.LOSSY;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return DataPacket_Kind.UNRECOGNIZED;\n    }\n}\nexports.dataPacket_KindFromJSON = dataPacket_KindFromJSON;\nfunction dataPacket_KindToJSON(object) {\n    switch(object){\n        case DataPacket_Kind.RELIABLE:\n            return \"RELIABLE\";\n        case DataPacket_Kind.LOSSY:\n            return \"LOSSY\";\n        case DataPacket_Kind.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.dataPacket_KindToJSON = dataPacket_KindToJSON;\nvar ServerInfo_Edition;\n(function(ServerInfo_Edition) {\n    ServerInfo_Edition[ServerInfo_Edition[\"Standard\"] = 0] = \"Standard\";\n    ServerInfo_Edition[ServerInfo_Edition[\"Cloud\"] = 1] = \"Cloud\";\n    ServerInfo_Edition[ServerInfo_Edition[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ServerInfo_Edition = exports.ServerInfo_Edition || (exports.ServerInfo_Edition = {}));\nfunction serverInfo_EditionFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"Standard\":\n            return ServerInfo_Edition.Standard;\n        case 1:\n        case \"Cloud\":\n            return ServerInfo_Edition.Cloud;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ServerInfo_Edition.UNRECOGNIZED;\n    }\n}\nexports.serverInfo_EditionFromJSON = serverInfo_EditionFromJSON;\nfunction serverInfo_EditionToJSON(object) {\n    switch(object){\n        case ServerInfo_Edition.Standard:\n            return \"Standard\";\n        case ServerInfo_Edition.Cloud:\n            return \"Cloud\";\n        case ServerInfo_Edition.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.serverInfo_EditionToJSON = serverInfo_EditionToJSON;\nvar ClientInfo_SDK;\n(function(ClientInfo_SDK) {\n    ClientInfo_SDK[ClientInfo_SDK[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    ClientInfo_SDK[ClientInfo_SDK[\"JS\"] = 1] = \"JS\";\n    ClientInfo_SDK[ClientInfo_SDK[\"SWIFT\"] = 2] = \"SWIFT\";\n    ClientInfo_SDK[ClientInfo_SDK[\"ANDROID\"] = 3] = \"ANDROID\";\n    ClientInfo_SDK[ClientInfo_SDK[\"FLUTTER\"] = 4] = \"FLUTTER\";\n    ClientInfo_SDK[ClientInfo_SDK[\"GO\"] = 5] = \"GO\";\n    ClientInfo_SDK[ClientInfo_SDK[\"UNITY\"] = 6] = \"UNITY\";\n    ClientInfo_SDK[ClientInfo_SDK[\"REACT_NATIVE\"] = 7] = \"REACT_NATIVE\";\n    ClientInfo_SDK[ClientInfo_SDK[\"RUST\"] = 8] = \"RUST\";\n    ClientInfo_SDK[ClientInfo_SDK[\"PYTHON\"] = 9] = \"PYTHON\";\n    ClientInfo_SDK[ClientInfo_SDK[\"CPP\"] = 10] = \"CPP\";\n    ClientInfo_SDK[ClientInfo_SDK[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ClientInfo_SDK = exports.ClientInfo_SDK || (exports.ClientInfo_SDK = {}));\nfunction clientInfo_SDKFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"UNKNOWN\":\n            return ClientInfo_SDK.UNKNOWN;\n        case 1:\n        case \"JS\":\n            return ClientInfo_SDK.JS;\n        case 2:\n        case \"SWIFT\":\n            return ClientInfo_SDK.SWIFT;\n        case 3:\n        case \"ANDROID\":\n            return ClientInfo_SDK.ANDROID;\n        case 4:\n        case \"FLUTTER\":\n            return ClientInfo_SDK.FLUTTER;\n        case 5:\n        case \"GO\":\n            return ClientInfo_SDK.GO;\n        case 6:\n        case \"UNITY\":\n            return ClientInfo_SDK.UNITY;\n        case 7:\n        case \"REACT_NATIVE\":\n            return ClientInfo_SDK.REACT_NATIVE;\n        case 8:\n        case \"RUST\":\n            return ClientInfo_SDK.RUST;\n        case 9:\n        case \"PYTHON\":\n            return ClientInfo_SDK.PYTHON;\n        case 10:\n        case \"CPP\":\n            return ClientInfo_SDK.CPP;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ClientInfo_SDK.UNRECOGNIZED;\n    }\n}\nexports.clientInfo_SDKFromJSON = clientInfo_SDKFromJSON;\nfunction clientInfo_SDKToJSON(object) {\n    switch(object){\n        case ClientInfo_SDK.UNKNOWN:\n            return \"UNKNOWN\";\n        case ClientInfo_SDK.JS:\n            return \"JS\";\n        case ClientInfo_SDK.SWIFT:\n            return \"SWIFT\";\n        case ClientInfo_SDK.ANDROID:\n            return \"ANDROID\";\n        case ClientInfo_SDK.FLUTTER:\n            return \"FLUTTER\";\n        case ClientInfo_SDK.GO:\n            return \"GO\";\n        case ClientInfo_SDK.UNITY:\n            return \"UNITY\";\n        case ClientInfo_SDK.REACT_NATIVE:\n            return \"REACT_NATIVE\";\n        case ClientInfo_SDK.RUST:\n            return \"RUST\";\n        case ClientInfo_SDK.PYTHON:\n            return \"PYTHON\";\n        case ClientInfo_SDK.CPP:\n            return \"CPP\";\n        case ClientInfo_SDK.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.clientInfo_SDKToJSON = clientInfo_SDKToJSON;\nfunction createBaseRoom() {\n    return {\n        sid: \"\",\n        name: \"\",\n        emptyTimeout: 0,\n        maxParticipants: 0,\n        creationTime: 0,\n        turnPassword: \"\",\n        enabledCodecs: [],\n        metadata: \"\",\n        numParticipants: 0,\n        numPublishers: 0,\n        activeRecording: false\n    };\n}\nexports.Room = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.sid !== \"\") {\n            writer.uint32(10).string(message.sid);\n        }\n        if (message.name !== \"\") {\n            writer.uint32(18).string(message.name);\n        }\n        if (message.emptyTimeout !== 0) {\n            writer.uint32(24).uint32(message.emptyTimeout);\n        }\n        if (message.maxParticipants !== 0) {\n            writer.uint32(32).uint32(message.maxParticipants);\n        }\n        if (message.creationTime !== 0) {\n            writer.uint32(40).int64(message.creationTime);\n        }\n        if (message.turnPassword !== \"\") {\n            writer.uint32(50).string(message.turnPassword);\n        }\n        for (const v of message.enabledCodecs){\n            exports.Codec.encode(v, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.metadata !== \"\") {\n            writer.uint32(66).string(message.metadata);\n        }\n        if (message.numParticipants !== 0) {\n            writer.uint32(72).uint32(message.numParticipants);\n        }\n        if (message.numPublishers !== 0) {\n            writer.uint32(88).uint32(message.numPublishers);\n        }\n        if (message.activeRecording === true) {\n            writer.uint32(80).bool(message.activeRecording);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRoom();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.sid = reader.string();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 3:\n                    message.emptyTimeout = reader.uint32();\n                    break;\n                case 4:\n                    message.maxParticipants = reader.uint32();\n                    break;\n                case 5:\n                    message.creationTime = longToNumber(reader.int64());\n                    break;\n                case 6:\n                    message.turnPassword = reader.string();\n                    break;\n                case 7:\n                    message.enabledCodecs.push(exports.Codec.decode(reader, reader.uint32()));\n                    break;\n                case 8:\n                    message.metadata = reader.string();\n                    break;\n                case 9:\n                    message.numParticipants = reader.uint32();\n                    break;\n                case 11:\n                    message.numPublishers = reader.uint32();\n                    break;\n                case 10:\n                    message.activeRecording = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            sid: isSet(object.sid) ? String(object.sid) : \"\",\n            name: isSet(object.name) ? String(object.name) : \"\",\n            emptyTimeout: isSet(object.emptyTimeout) ? Number(object.emptyTimeout) : 0,\n            maxParticipants: isSet(object.maxParticipants) ? Number(object.maxParticipants) : 0,\n            creationTime: isSet(object.creationTime) ? Number(object.creationTime) : 0,\n            turnPassword: isSet(object.turnPassword) ? String(object.turnPassword) : \"\",\n            enabledCodecs: Array.isArray(object === null || object === void 0 ? void 0 : object.enabledCodecs) ? object.enabledCodecs.map((e)=>exports.Codec.fromJSON(e)) : [],\n            metadata: isSet(object.metadata) ? String(object.metadata) : \"\",\n            numParticipants: isSet(object.numParticipants) ? Number(object.numParticipants) : 0,\n            numPublishers: isSet(object.numPublishers) ? Number(object.numPublishers) : 0,\n            activeRecording: isSet(object.activeRecording) ? Boolean(object.activeRecording) : false\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.sid !== undefined && (obj.sid = message.sid);\n        message.name !== undefined && (obj.name = message.name);\n        message.emptyTimeout !== undefined && (obj.emptyTimeout = Math.round(message.emptyTimeout));\n        message.maxParticipants !== undefined && (obj.maxParticipants = Math.round(message.maxParticipants));\n        message.creationTime !== undefined && (obj.creationTime = Math.round(message.creationTime));\n        message.turnPassword !== undefined && (obj.turnPassword = message.turnPassword);\n        if (message.enabledCodecs) {\n            obj.enabledCodecs = message.enabledCodecs.map((e)=>e ? exports.Codec.toJSON(e) : undefined);\n        } else {\n            obj.enabledCodecs = [];\n        }\n        message.metadata !== undefined && (obj.metadata = message.metadata);\n        message.numParticipants !== undefined && (obj.numParticipants = Math.round(message.numParticipants));\n        message.numPublishers !== undefined && (obj.numPublishers = Math.round(message.numPublishers));\n        message.activeRecording !== undefined && (obj.activeRecording = message.activeRecording);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n        const message = createBaseRoom();\n        message.sid = (_a = object.sid) !== null && _a !== void 0 ? _a : \"\";\n        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : \"\";\n        message.emptyTimeout = (_c = object.emptyTimeout) !== null && _c !== void 0 ? _c : 0;\n        message.maxParticipants = (_d = object.maxParticipants) !== null && _d !== void 0 ? _d : 0;\n        message.creationTime = (_e = object.creationTime) !== null && _e !== void 0 ? _e : 0;\n        message.turnPassword = (_f = object.turnPassword) !== null && _f !== void 0 ? _f : \"\";\n        message.enabledCodecs = ((_g = object.enabledCodecs) === null || _g === void 0 ? void 0 : _g.map((e)=>exports.Codec.fromPartial(e))) || [];\n        message.metadata = (_h = object.metadata) !== null && _h !== void 0 ? _h : \"\";\n        message.numParticipants = (_j = object.numParticipants) !== null && _j !== void 0 ? _j : 0;\n        message.numPublishers = (_k = object.numPublishers) !== null && _k !== void 0 ? _k : 0;\n        message.activeRecording = (_l = object.activeRecording) !== null && _l !== void 0 ? _l : false;\n        return message;\n    }\n};\nfunction createBaseCodec() {\n    return {\n        mime: \"\",\n        fmtpLine: \"\"\n    };\n}\nexports.Codec = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.mime !== \"\") {\n            writer.uint32(10).string(message.mime);\n        }\n        if (message.fmtpLine !== \"\") {\n            writer.uint32(18).string(message.fmtpLine);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCodec();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.mime = reader.string();\n                    break;\n                case 2:\n                    message.fmtpLine = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            mime: isSet(object.mime) ? String(object.mime) : \"\",\n            fmtpLine: isSet(object.fmtpLine) ? String(object.fmtpLine) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.mime !== undefined && (obj.mime = message.mime);\n        message.fmtpLine !== undefined && (obj.fmtpLine = message.fmtpLine);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseCodec();\n        message.mime = (_a = object.mime) !== null && _a !== void 0 ? _a : \"\";\n        message.fmtpLine = (_b = object.fmtpLine) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    }\n};\nfunction createBasePlayoutDelay() {\n    return {\n        enabled: false,\n        min: 0,\n        max: 0\n    };\n}\nexports.PlayoutDelay = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.enabled === true) {\n            writer.uint32(8).bool(message.enabled);\n        }\n        if (message.min !== 0) {\n            writer.uint32(16).uint32(message.min);\n        }\n        if (message.max !== 0) {\n            writer.uint32(24).uint32(message.max);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePlayoutDelay();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.enabled = reader.bool();\n                    break;\n                case 2:\n                    message.min = reader.uint32();\n                    break;\n                case 3:\n                    message.max = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            enabled: isSet(object.enabled) ? Boolean(object.enabled) : false,\n            min: isSet(object.min) ? Number(object.min) : 0,\n            max: isSet(object.max) ? Number(object.max) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.enabled !== undefined && (obj.enabled = message.enabled);\n        message.min !== undefined && (obj.min = Math.round(message.min));\n        message.max !== undefined && (obj.max = Math.round(message.max));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBasePlayoutDelay();\n        message.enabled = (_a = object.enabled) !== null && _a !== void 0 ? _a : false;\n        message.min = (_b = object.min) !== null && _b !== void 0 ? _b : 0;\n        message.max = (_c = object.max) !== null && _c !== void 0 ? _c : 0;\n        return message;\n    }\n};\nfunction createBaseParticipantPermission() {\n    return {\n        canSubscribe: false,\n        canPublish: false,\n        canPublishData: false,\n        canPublishSources: [],\n        hidden: false,\n        recorder: false,\n        canUpdateMetadata: false\n    };\n}\nexports.ParticipantPermission = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.canSubscribe === true) {\n            writer.uint32(8).bool(message.canSubscribe);\n        }\n        if (message.canPublish === true) {\n            writer.uint32(16).bool(message.canPublish);\n        }\n        if (message.canPublishData === true) {\n            writer.uint32(24).bool(message.canPublishData);\n        }\n        writer.uint32(74).fork();\n        for (const v of message.canPublishSources){\n            writer.int32(v);\n        }\n        writer.ldelim();\n        if (message.hidden === true) {\n            writer.uint32(56).bool(message.hidden);\n        }\n        if (message.recorder === true) {\n            writer.uint32(64).bool(message.recorder);\n        }\n        if (message.canUpdateMetadata === true) {\n            writer.uint32(80).bool(message.canUpdateMetadata);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParticipantPermission();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.canSubscribe = reader.bool();\n                    break;\n                case 2:\n                    message.canPublish = reader.bool();\n                    break;\n                case 3:\n                    message.canPublishData = reader.bool();\n                    break;\n                case 9:\n                    if ((tag & 7) === 2) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while(reader.pos < end2){\n                            message.canPublishSources.push(reader.int32());\n                        }\n                    } else {\n                        message.canPublishSources.push(reader.int32());\n                    }\n                    break;\n                case 7:\n                    message.hidden = reader.bool();\n                    break;\n                case 8:\n                    message.recorder = reader.bool();\n                    break;\n                case 10:\n                    message.canUpdateMetadata = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            canSubscribe: isSet(object.canSubscribe) ? Boolean(object.canSubscribe) : false,\n            canPublish: isSet(object.canPublish) ? Boolean(object.canPublish) : false,\n            canPublishData: isSet(object.canPublishData) ? Boolean(object.canPublishData) : false,\n            canPublishSources: Array.isArray(object === null || object === void 0 ? void 0 : object.canPublishSources) ? object.canPublishSources.map((e)=>trackSourceFromJSON(e)) : [],\n            hidden: isSet(object.hidden) ? Boolean(object.hidden) : false,\n            recorder: isSet(object.recorder) ? Boolean(object.recorder) : false,\n            canUpdateMetadata: isSet(object.canUpdateMetadata) ? Boolean(object.canUpdateMetadata) : false\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.canSubscribe !== undefined && (obj.canSubscribe = message.canSubscribe);\n        message.canPublish !== undefined && (obj.canPublish = message.canPublish);\n        message.canPublishData !== undefined && (obj.canPublishData = message.canPublishData);\n        if (message.canPublishSources) {\n            obj.canPublishSources = message.canPublishSources.map((e)=>trackSourceToJSON(e));\n        } else {\n            obj.canPublishSources = [];\n        }\n        message.hidden !== undefined && (obj.hidden = message.hidden);\n        message.recorder !== undefined && (obj.recorder = message.recorder);\n        message.canUpdateMetadata !== undefined && (obj.canUpdateMetadata = message.canUpdateMetadata);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const message = createBaseParticipantPermission();\n        message.canSubscribe = (_a = object.canSubscribe) !== null && _a !== void 0 ? _a : false;\n        message.canPublish = (_b = object.canPublish) !== null && _b !== void 0 ? _b : false;\n        message.canPublishData = (_c = object.canPublishData) !== null && _c !== void 0 ? _c : false;\n        message.canPublishSources = ((_d = object.canPublishSources) === null || _d === void 0 ? void 0 : _d.map((e)=>e)) || [];\n        message.hidden = (_e = object.hidden) !== null && _e !== void 0 ? _e : false;\n        message.recorder = (_f = object.recorder) !== null && _f !== void 0 ? _f : false;\n        message.canUpdateMetadata = (_g = object.canUpdateMetadata) !== null && _g !== void 0 ? _g : false;\n        return message;\n    }\n};\nfunction createBaseParticipantInfo() {\n    return {\n        sid: \"\",\n        identity: \"\",\n        state: 0,\n        tracks: [],\n        metadata: \"\",\n        joinedAt: 0,\n        name: \"\",\n        version: 0,\n        permission: undefined,\n        region: \"\",\n        isPublisher: false\n    };\n}\nexports.ParticipantInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.sid !== \"\") {\n            writer.uint32(10).string(message.sid);\n        }\n        if (message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        if (message.state !== 0) {\n            writer.uint32(24).int32(message.state);\n        }\n        for (const v of message.tracks){\n            exports.TrackInfo.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.metadata !== \"\") {\n            writer.uint32(42).string(message.metadata);\n        }\n        if (message.joinedAt !== 0) {\n            writer.uint32(48).int64(message.joinedAt);\n        }\n        if (message.name !== \"\") {\n            writer.uint32(74).string(message.name);\n        }\n        if (message.version !== 0) {\n            writer.uint32(80).uint32(message.version);\n        }\n        if (message.permission !== undefined) {\n            exports.ParticipantPermission.encode(message.permission, writer.uint32(90).fork()).ldelim();\n        }\n        if (message.region !== \"\") {\n            writer.uint32(98).string(message.region);\n        }\n        if (message.isPublisher === true) {\n            writer.uint32(104).bool(message.isPublisher);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParticipantInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.sid = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                case 3:\n                    message.state = reader.int32();\n                    break;\n                case 4:\n                    message.tracks.push(exports.TrackInfo.decode(reader, reader.uint32()));\n                    break;\n                case 5:\n                    message.metadata = reader.string();\n                    break;\n                case 6:\n                    message.joinedAt = longToNumber(reader.int64());\n                    break;\n                case 9:\n                    message.name = reader.string();\n                    break;\n                case 10:\n                    message.version = reader.uint32();\n                    break;\n                case 11:\n                    message.permission = exports.ParticipantPermission.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.region = reader.string();\n                    break;\n                case 13:\n                    message.isPublisher = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            sid: isSet(object.sid) ? String(object.sid) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\",\n            state: isSet(object.state) ? participantInfo_StateFromJSON(object.state) : 0,\n            tracks: Array.isArray(object === null || object === void 0 ? void 0 : object.tracks) ? object.tracks.map((e)=>exports.TrackInfo.fromJSON(e)) : [],\n            metadata: isSet(object.metadata) ? String(object.metadata) : \"\",\n            joinedAt: isSet(object.joinedAt) ? Number(object.joinedAt) : 0,\n            name: isSet(object.name) ? String(object.name) : \"\",\n            version: isSet(object.version) ? Number(object.version) : 0,\n            permission: isSet(object.permission) ? exports.ParticipantPermission.fromJSON(object.permission) : undefined,\n            region: isSet(object.region) ? String(object.region) : \"\",\n            isPublisher: isSet(object.isPublisher) ? Boolean(object.isPublisher) : false\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.sid !== undefined && (obj.sid = message.sid);\n        message.identity !== undefined && (obj.identity = message.identity);\n        message.state !== undefined && (obj.state = participantInfo_StateToJSON(message.state));\n        if (message.tracks) {\n            obj.tracks = message.tracks.map((e)=>e ? exports.TrackInfo.toJSON(e) : undefined);\n        } else {\n            obj.tracks = [];\n        }\n        message.metadata !== undefined && (obj.metadata = message.metadata);\n        message.joinedAt !== undefined && (obj.joinedAt = Math.round(message.joinedAt));\n        message.name !== undefined && (obj.name = message.name);\n        message.version !== undefined && (obj.version = Math.round(message.version));\n        message.permission !== undefined && (obj.permission = message.permission ? exports.ParticipantPermission.toJSON(message.permission) : undefined);\n        message.region !== undefined && (obj.region = message.region);\n        message.isPublisher !== undefined && (obj.isPublisher = message.isPublisher);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        const message = createBaseParticipantInfo();\n        message.sid = (_a = object.sid) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        message.state = (_c = object.state) !== null && _c !== void 0 ? _c : 0;\n        message.tracks = ((_d = object.tracks) === null || _d === void 0 ? void 0 : _d.map((e)=>exports.TrackInfo.fromPartial(e))) || [];\n        message.metadata = (_e = object.metadata) !== null && _e !== void 0 ? _e : \"\";\n        message.joinedAt = (_f = object.joinedAt) !== null && _f !== void 0 ? _f : 0;\n        message.name = (_g = object.name) !== null && _g !== void 0 ? _g : \"\";\n        message.version = (_h = object.version) !== null && _h !== void 0 ? _h : 0;\n        message.permission = object.permission !== undefined && object.permission !== null ? exports.ParticipantPermission.fromPartial(object.permission) : undefined;\n        message.region = (_j = object.region) !== null && _j !== void 0 ? _j : \"\";\n        message.isPublisher = (_k = object.isPublisher) !== null && _k !== void 0 ? _k : false;\n        return message;\n    }\n};\nfunction createBaseEncryption() {\n    return {};\n}\nexports.Encryption = {\n    encode (_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncryption();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (_) {\n        return {};\n    },\n    toJSON (_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial (_) {\n        const message = createBaseEncryption();\n        return message;\n    }\n};\nfunction createBaseSimulcastCodecInfo() {\n    return {\n        mimeType: \"\",\n        mid: \"\",\n        cid: \"\",\n        layers: []\n    };\n}\nexports.SimulcastCodecInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.mimeType !== \"\") {\n            writer.uint32(10).string(message.mimeType);\n        }\n        if (message.mid !== \"\") {\n            writer.uint32(18).string(message.mid);\n        }\n        if (message.cid !== \"\") {\n            writer.uint32(26).string(message.cid);\n        }\n        for (const v of message.layers){\n            exports.VideoLayer.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSimulcastCodecInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.mimeType = reader.string();\n                    break;\n                case 2:\n                    message.mid = reader.string();\n                    break;\n                case 3:\n                    message.cid = reader.string();\n                    break;\n                case 4:\n                    message.layers.push(exports.VideoLayer.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            mimeType: isSet(object.mimeType) ? String(object.mimeType) : \"\",\n            mid: isSet(object.mid) ? String(object.mid) : \"\",\n            cid: isSet(object.cid) ? String(object.cid) : \"\",\n            layers: Array.isArray(object === null || object === void 0 ? void 0 : object.layers) ? object.layers.map((e)=>exports.VideoLayer.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.mimeType !== undefined && (obj.mimeType = message.mimeType);\n        message.mid !== undefined && (obj.mid = message.mid);\n        message.cid !== undefined && (obj.cid = message.cid);\n        if (message.layers) {\n            obj.layers = message.layers.map((e)=>e ? exports.VideoLayer.toJSON(e) : undefined);\n        } else {\n            obj.layers = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d;\n        const message = createBaseSimulcastCodecInfo();\n        message.mimeType = (_a = object.mimeType) !== null && _a !== void 0 ? _a : \"\";\n        message.mid = (_b = object.mid) !== null && _b !== void 0 ? _b : \"\";\n        message.cid = (_c = object.cid) !== null && _c !== void 0 ? _c : \"\";\n        message.layers = ((_d = object.layers) === null || _d === void 0 ? void 0 : _d.map((e)=>exports.VideoLayer.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseTrackInfo() {\n    return {\n        sid: \"\",\n        type: 0,\n        name: \"\",\n        muted: false,\n        width: 0,\n        height: 0,\n        simulcast: false,\n        disableDtx: false,\n        source: 0,\n        layers: [],\n        mimeType: \"\",\n        mid: \"\",\n        codecs: [],\n        stereo: false,\n        disableRed: false,\n        encryption: 0,\n        stream: \"\"\n    };\n}\nexports.TrackInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.sid !== \"\") {\n            writer.uint32(10).string(message.sid);\n        }\n        if (message.type !== 0) {\n            writer.uint32(16).int32(message.type);\n        }\n        if (message.name !== \"\") {\n            writer.uint32(26).string(message.name);\n        }\n        if (message.muted === true) {\n            writer.uint32(32).bool(message.muted);\n        }\n        if (message.width !== 0) {\n            writer.uint32(40).uint32(message.width);\n        }\n        if (message.height !== 0) {\n            writer.uint32(48).uint32(message.height);\n        }\n        if (message.simulcast === true) {\n            writer.uint32(56).bool(message.simulcast);\n        }\n        if (message.disableDtx === true) {\n            writer.uint32(64).bool(message.disableDtx);\n        }\n        if (message.source !== 0) {\n            writer.uint32(72).int32(message.source);\n        }\n        for (const v of message.layers){\n            exports.VideoLayer.encode(v, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.mimeType !== \"\") {\n            writer.uint32(90).string(message.mimeType);\n        }\n        if (message.mid !== \"\") {\n            writer.uint32(98).string(message.mid);\n        }\n        for (const v of message.codecs){\n            exports.SimulcastCodecInfo.encode(v, writer.uint32(106).fork()).ldelim();\n        }\n        if (message.stereo === true) {\n            writer.uint32(112).bool(message.stereo);\n        }\n        if (message.disableRed === true) {\n            writer.uint32(120).bool(message.disableRed);\n        }\n        if (message.encryption !== 0) {\n            writer.uint32(128).int32(message.encryption);\n        }\n        if (message.stream !== \"\") {\n            writer.uint32(138).string(message.stream);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTrackInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.sid = reader.string();\n                    break;\n                case 2:\n                    message.type = reader.int32();\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.muted = reader.bool();\n                    break;\n                case 5:\n                    message.width = reader.uint32();\n                    break;\n                case 6:\n                    message.height = reader.uint32();\n                    break;\n                case 7:\n                    message.simulcast = reader.bool();\n                    break;\n                case 8:\n                    message.disableDtx = reader.bool();\n                    break;\n                case 9:\n                    message.source = reader.int32();\n                    break;\n                case 10:\n                    message.layers.push(exports.VideoLayer.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    message.mimeType = reader.string();\n                    break;\n                case 12:\n                    message.mid = reader.string();\n                    break;\n                case 13:\n                    message.codecs.push(exports.SimulcastCodecInfo.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.stereo = reader.bool();\n                    break;\n                case 15:\n                    message.disableRed = reader.bool();\n                    break;\n                case 16:\n                    message.encryption = reader.int32();\n                    break;\n                case 17:\n                    message.stream = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            sid: isSet(object.sid) ? String(object.sid) : \"\",\n            type: isSet(object.type) ? trackTypeFromJSON(object.type) : 0,\n            name: isSet(object.name) ? String(object.name) : \"\",\n            muted: isSet(object.muted) ? Boolean(object.muted) : false,\n            width: isSet(object.width) ? Number(object.width) : 0,\n            height: isSet(object.height) ? Number(object.height) : 0,\n            simulcast: isSet(object.simulcast) ? Boolean(object.simulcast) : false,\n            disableDtx: isSet(object.disableDtx) ? Boolean(object.disableDtx) : false,\n            source: isSet(object.source) ? trackSourceFromJSON(object.source) : 0,\n            layers: Array.isArray(object === null || object === void 0 ? void 0 : object.layers) ? object.layers.map((e)=>exports.VideoLayer.fromJSON(e)) : [],\n            mimeType: isSet(object.mimeType) ? String(object.mimeType) : \"\",\n            mid: isSet(object.mid) ? String(object.mid) : \"\",\n            codecs: Array.isArray(object === null || object === void 0 ? void 0 : object.codecs) ? object.codecs.map((e)=>exports.SimulcastCodecInfo.fromJSON(e)) : [],\n            stereo: isSet(object.stereo) ? Boolean(object.stereo) : false,\n            disableRed: isSet(object.disableRed) ? Boolean(object.disableRed) : false,\n            encryption: isSet(object.encryption) ? encryption_TypeFromJSON(object.encryption) : 0,\n            stream: isSet(object.stream) ? String(object.stream) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.sid !== undefined && (obj.sid = message.sid);\n        message.type !== undefined && (obj.type = trackTypeToJSON(message.type));\n        message.name !== undefined && (obj.name = message.name);\n        message.muted !== undefined && (obj.muted = message.muted);\n        message.width !== undefined && (obj.width = Math.round(message.width));\n        message.height !== undefined && (obj.height = Math.round(message.height));\n        message.simulcast !== undefined && (obj.simulcast = message.simulcast);\n        message.disableDtx !== undefined && (obj.disableDtx = message.disableDtx);\n        message.source !== undefined && (obj.source = trackSourceToJSON(message.source));\n        if (message.layers) {\n            obj.layers = message.layers.map((e)=>e ? exports.VideoLayer.toJSON(e) : undefined);\n        } else {\n            obj.layers = [];\n        }\n        message.mimeType !== undefined && (obj.mimeType = message.mimeType);\n        message.mid !== undefined && (obj.mid = message.mid);\n        if (message.codecs) {\n            obj.codecs = message.codecs.map((e)=>e ? exports.SimulcastCodecInfo.toJSON(e) : undefined);\n        } else {\n            obj.codecs = [];\n        }\n        message.stereo !== undefined && (obj.stereo = message.stereo);\n        message.disableRed !== undefined && (obj.disableRed = message.disableRed);\n        message.encryption !== undefined && (obj.encryption = encryption_TypeToJSON(message.encryption));\n        message.stream !== undefined && (obj.stream = message.stream);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;\n        const message = createBaseTrackInfo();\n        message.sid = (_a = object.sid) !== null && _a !== void 0 ? _a : \"\";\n        message.type = (_b = object.type) !== null && _b !== void 0 ? _b : 0;\n        message.name = (_c = object.name) !== null && _c !== void 0 ? _c : \"\";\n        message.muted = (_d = object.muted) !== null && _d !== void 0 ? _d : false;\n        message.width = (_e = object.width) !== null && _e !== void 0 ? _e : 0;\n        message.height = (_f = object.height) !== null && _f !== void 0 ? _f : 0;\n        message.simulcast = (_g = object.simulcast) !== null && _g !== void 0 ? _g : false;\n        message.disableDtx = (_h = object.disableDtx) !== null && _h !== void 0 ? _h : false;\n        message.source = (_j = object.source) !== null && _j !== void 0 ? _j : 0;\n        message.layers = ((_k = object.layers) === null || _k === void 0 ? void 0 : _k.map((e)=>exports.VideoLayer.fromPartial(e))) || [];\n        message.mimeType = (_l = object.mimeType) !== null && _l !== void 0 ? _l : \"\";\n        message.mid = (_m = object.mid) !== null && _m !== void 0 ? _m : \"\";\n        message.codecs = ((_o = object.codecs) === null || _o === void 0 ? void 0 : _o.map((e)=>exports.SimulcastCodecInfo.fromPartial(e))) || [];\n        message.stereo = (_p = object.stereo) !== null && _p !== void 0 ? _p : false;\n        message.disableRed = (_q = object.disableRed) !== null && _q !== void 0 ? _q : false;\n        message.encryption = (_r = object.encryption) !== null && _r !== void 0 ? _r : 0;\n        message.stream = (_s = object.stream) !== null && _s !== void 0 ? _s : \"\";\n        return message;\n    }\n};\nfunction createBaseVideoLayer() {\n    return {\n        quality: 0,\n        width: 0,\n        height: 0,\n        bitrate: 0,\n        ssrc: 0\n    };\n}\nexports.VideoLayer = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.quality !== 0) {\n            writer.uint32(8).int32(message.quality);\n        }\n        if (message.width !== 0) {\n            writer.uint32(16).uint32(message.width);\n        }\n        if (message.height !== 0) {\n            writer.uint32(24).uint32(message.height);\n        }\n        if (message.bitrate !== 0) {\n            writer.uint32(32).uint32(message.bitrate);\n        }\n        if (message.ssrc !== 0) {\n            writer.uint32(40).uint32(message.ssrc);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVideoLayer();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.quality = reader.int32();\n                    break;\n                case 2:\n                    message.width = reader.uint32();\n                    break;\n                case 3:\n                    message.height = reader.uint32();\n                    break;\n                case 4:\n                    message.bitrate = reader.uint32();\n                    break;\n                case 5:\n                    message.ssrc = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            quality: isSet(object.quality) ? videoQualityFromJSON(object.quality) : 0,\n            width: isSet(object.width) ? Number(object.width) : 0,\n            height: isSet(object.height) ? Number(object.height) : 0,\n            bitrate: isSet(object.bitrate) ? Number(object.bitrate) : 0,\n            ssrc: isSet(object.ssrc) ? Number(object.ssrc) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.quality !== undefined && (obj.quality = videoQualityToJSON(message.quality));\n        message.width !== undefined && (obj.width = Math.round(message.width));\n        message.height !== undefined && (obj.height = Math.round(message.height));\n        message.bitrate !== undefined && (obj.bitrate = Math.round(message.bitrate));\n        message.ssrc !== undefined && (obj.ssrc = Math.round(message.ssrc));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e;\n        const message = createBaseVideoLayer();\n        message.quality = (_a = object.quality) !== null && _a !== void 0 ? _a : 0;\n        message.width = (_b = object.width) !== null && _b !== void 0 ? _b : 0;\n        message.height = (_c = object.height) !== null && _c !== void 0 ? _c : 0;\n        message.bitrate = (_d = object.bitrate) !== null && _d !== void 0 ? _d : 0;\n        message.ssrc = (_e = object.ssrc) !== null && _e !== void 0 ? _e : 0;\n        return message;\n    }\n};\nfunction createBaseDataPacket() {\n    return {\n        kind: 0,\n        user: undefined,\n        speaker: undefined\n    };\n}\nexports.DataPacket = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.kind !== 0) {\n            writer.uint32(8).int32(message.kind);\n        }\n        if (message.user !== undefined) {\n            exports.UserPacket.encode(message.user, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.speaker !== undefined) {\n            exports.ActiveSpeakerUpdate.encode(message.speaker, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDataPacket();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.kind = reader.int32();\n                    break;\n                case 2:\n                    message.user = exports.UserPacket.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.speaker = exports.ActiveSpeakerUpdate.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            kind: isSet(object.kind) ? dataPacket_KindFromJSON(object.kind) : 0,\n            user: isSet(object.user) ? exports.UserPacket.fromJSON(object.user) : undefined,\n            speaker: isSet(object.speaker) ? exports.ActiveSpeakerUpdate.fromJSON(object.speaker) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.kind !== undefined && (obj.kind = dataPacket_KindToJSON(message.kind));\n        message.user !== undefined && (obj.user = message.user ? exports.UserPacket.toJSON(message.user) : undefined);\n        message.speaker !== undefined && (obj.speaker = message.speaker ? exports.ActiveSpeakerUpdate.toJSON(message.speaker) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseDataPacket();\n        message.kind = (_a = object.kind) !== null && _a !== void 0 ? _a : 0;\n        message.user = object.user !== undefined && object.user !== null ? exports.UserPacket.fromPartial(object.user) : undefined;\n        message.speaker = object.speaker !== undefined && object.speaker !== null ? exports.ActiveSpeakerUpdate.fromPartial(object.speaker) : undefined;\n        return message;\n    }\n};\nfunction createBaseActiveSpeakerUpdate() {\n    return {\n        speakers: []\n    };\n}\nexports.ActiveSpeakerUpdate = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.speakers){\n            exports.SpeakerInfo.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseActiveSpeakerUpdate();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.speakers.push(exports.SpeakerInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            speakers: Array.isArray(object === null || object === void 0 ? void 0 : object.speakers) ? object.speakers.map((e)=>exports.SpeakerInfo.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.speakers) {\n            obj.speakers = message.speakers.map((e)=>e ? exports.SpeakerInfo.toJSON(e) : undefined);\n        } else {\n            obj.speakers = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseActiveSpeakerUpdate();\n        message.speakers = ((_a = object.speakers) === null || _a === void 0 ? void 0 : _a.map((e)=>exports.SpeakerInfo.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseSpeakerInfo() {\n    return {\n        sid: \"\",\n        level: 0,\n        active: false\n    };\n}\nexports.SpeakerInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.sid !== \"\") {\n            writer.uint32(10).string(message.sid);\n        }\n        if (message.level !== 0) {\n            writer.uint32(21).float(message.level);\n        }\n        if (message.active === true) {\n            writer.uint32(24).bool(message.active);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSpeakerInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.sid = reader.string();\n                    break;\n                case 2:\n                    message.level = reader.float();\n                    break;\n                case 3:\n                    message.active = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            sid: isSet(object.sid) ? String(object.sid) : \"\",\n            level: isSet(object.level) ? Number(object.level) : 0,\n            active: isSet(object.active) ? Boolean(object.active) : false\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.sid !== undefined && (obj.sid = message.sid);\n        message.level !== undefined && (obj.level = message.level);\n        message.active !== undefined && (obj.active = message.active);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c;\n        const message = createBaseSpeakerInfo();\n        message.sid = (_a = object.sid) !== null && _a !== void 0 ? _a : \"\";\n        message.level = (_b = object.level) !== null && _b !== void 0 ? _b : 0;\n        message.active = (_c = object.active) !== null && _c !== void 0 ? _c : false;\n        return message;\n    }\n};\nfunction createBaseUserPacket() {\n    return {\n        participantSid: \"\",\n        participantIdentity: \"\",\n        payload: new Uint8Array(),\n        destinationSids: [],\n        destinationIdentities: [],\n        topic: undefined\n    };\n}\nexports.UserPacket = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.participantSid !== \"\") {\n            writer.uint32(10).string(message.participantSid);\n        }\n        if (message.participantIdentity !== \"\") {\n            writer.uint32(42).string(message.participantIdentity);\n        }\n        if (message.payload.length !== 0) {\n            writer.uint32(18).bytes(message.payload);\n        }\n        for (const v of message.destinationSids){\n            writer.uint32(26).string(v);\n        }\n        for (const v of message.destinationIdentities){\n            writer.uint32(50).string(v);\n        }\n        if (message.topic !== undefined) {\n            writer.uint32(34).string(message.topic);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUserPacket();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.participantSid = reader.string();\n                    break;\n                case 5:\n                    message.participantIdentity = reader.string();\n                    break;\n                case 2:\n                    message.payload = reader.bytes();\n                    break;\n                case 3:\n                    message.destinationSids.push(reader.string());\n                    break;\n                case 6:\n                    message.destinationIdentities.push(reader.string());\n                    break;\n                case 4:\n                    message.topic = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            participantSid: isSet(object.participantSid) ? String(object.participantSid) : \"\",\n            participantIdentity: isSet(object.participantIdentity) ? String(object.participantIdentity) : \"\",\n            payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(),\n            destinationSids: Array.isArray(object === null || object === void 0 ? void 0 : object.destinationSids) ? object.destinationSids.map((e)=>String(e)) : [],\n            destinationIdentities: Array.isArray(object === null || object === void 0 ? void 0 : object.destinationIdentities) ? object.destinationIdentities.map((e)=>String(e)) : [],\n            topic: isSet(object.topic) ? String(object.topic) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.participantSid !== undefined && (obj.participantSid = message.participantSid);\n        message.participantIdentity !== undefined && (obj.participantIdentity = message.participantIdentity);\n        message.payload !== undefined && (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));\n        if (message.destinationSids) {\n            obj.destinationSids = message.destinationSids.map((e)=>e);\n        } else {\n            obj.destinationSids = [];\n        }\n        if (message.destinationIdentities) {\n            obj.destinationIdentities = message.destinationIdentities.map((e)=>e);\n        } else {\n            obj.destinationIdentities = [];\n        }\n        message.topic !== undefined && (obj.topic = message.topic);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseUserPacket();\n        message.participantSid = (_a = object.participantSid) !== null && _a !== void 0 ? _a : \"\";\n        message.participantIdentity = (_b = object.participantIdentity) !== null && _b !== void 0 ? _b : \"\";\n        message.payload = (_c = object.payload) !== null && _c !== void 0 ? _c : new Uint8Array();\n        message.destinationSids = ((_d = object.destinationSids) === null || _d === void 0 ? void 0 : _d.map((e)=>e)) || [];\n        message.destinationIdentities = ((_e = object.destinationIdentities) === null || _e === void 0 ? void 0 : _e.map((e)=>e)) || [];\n        message.topic = (_f = object.topic) !== null && _f !== void 0 ? _f : undefined;\n        return message;\n    }\n};\nfunction createBaseParticipantTracks() {\n    return {\n        participantSid: \"\",\n        trackSids: []\n    };\n}\nexports.ParticipantTracks = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.participantSid !== \"\") {\n            writer.uint32(10).string(message.participantSid);\n        }\n        for (const v of message.trackSids){\n            writer.uint32(18).string(v);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParticipantTracks();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.participantSid = reader.string();\n                    break;\n                case 2:\n                    message.trackSids.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            participantSid: isSet(object.participantSid) ? String(object.participantSid) : \"\",\n            trackSids: Array.isArray(object === null || object === void 0 ? void 0 : object.trackSids) ? object.trackSids.map((e)=>String(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.participantSid !== undefined && (obj.participantSid = message.participantSid);\n        if (message.trackSids) {\n            obj.trackSids = message.trackSids.map((e)=>e);\n        } else {\n            obj.trackSids = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseParticipantTracks();\n        message.participantSid = (_a = object.participantSid) !== null && _a !== void 0 ? _a : \"\";\n        message.trackSids = ((_b = object.trackSids) === null || _b === void 0 ? void 0 : _b.map((e)=>e)) || [];\n        return message;\n    }\n};\nfunction createBaseServerInfo() {\n    return {\n        edition: 0,\n        version: \"\",\n        protocol: 0,\n        region: \"\",\n        nodeId: \"\",\n        debugInfo: \"\"\n    };\n}\nexports.ServerInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.edition !== 0) {\n            writer.uint32(8).int32(message.edition);\n        }\n        if (message.version !== \"\") {\n            writer.uint32(18).string(message.version);\n        }\n        if (message.protocol !== 0) {\n            writer.uint32(24).int32(message.protocol);\n        }\n        if (message.region !== \"\") {\n            writer.uint32(34).string(message.region);\n        }\n        if (message.nodeId !== \"\") {\n            writer.uint32(42).string(message.nodeId);\n        }\n        if (message.debugInfo !== \"\") {\n            writer.uint32(50).string(message.debugInfo);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseServerInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.edition = reader.int32();\n                    break;\n                case 2:\n                    message.version = reader.string();\n                    break;\n                case 3:\n                    message.protocol = reader.int32();\n                    break;\n                case 4:\n                    message.region = reader.string();\n                    break;\n                case 5:\n                    message.nodeId = reader.string();\n                    break;\n                case 6:\n                    message.debugInfo = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            edition: isSet(object.edition) ? serverInfo_EditionFromJSON(object.edition) : 0,\n            version: isSet(object.version) ? String(object.version) : \"\",\n            protocol: isSet(object.protocol) ? Number(object.protocol) : 0,\n            region: isSet(object.region) ? String(object.region) : \"\",\n            nodeId: isSet(object.nodeId) ? String(object.nodeId) : \"\",\n            debugInfo: isSet(object.debugInfo) ? String(object.debugInfo) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.edition !== undefined && (obj.edition = serverInfo_EditionToJSON(message.edition));\n        message.version !== undefined && (obj.version = message.version);\n        message.protocol !== undefined && (obj.protocol = Math.round(message.protocol));\n        message.region !== undefined && (obj.region = message.region);\n        message.nodeId !== undefined && (obj.nodeId = message.nodeId);\n        message.debugInfo !== undefined && (obj.debugInfo = message.debugInfo);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseServerInfo();\n        message.edition = (_a = object.edition) !== null && _a !== void 0 ? _a : 0;\n        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : \"\";\n        message.protocol = (_c = object.protocol) !== null && _c !== void 0 ? _c : 0;\n        message.region = (_d = object.region) !== null && _d !== void 0 ? _d : \"\";\n        message.nodeId = (_e = object.nodeId) !== null && _e !== void 0 ? _e : \"\";\n        message.debugInfo = (_f = object.debugInfo) !== null && _f !== void 0 ? _f : \"\";\n        return message;\n    }\n};\nfunction createBaseClientInfo() {\n    return {\n        sdk: 0,\n        version: \"\",\n        protocol: 0,\n        os: \"\",\n        osVersion: \"\",\n        deviceModel: \"\",\n        browser: \"\",\n        browserVersion: \"\",\n        address: \"\",\n        network: \"\"\n    };\n}\nexports.ClientInfo = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.sdk !== 0) {\n            writer.uint32(8).int32(message.sdk);\n        }\n        if (message.version !== \"\") {\n            writer.uint32(18).string(message.version);\n        }\n        if (message.protocol !== 0) {\n            writer.uint32(24).int32(message.protocol);\n        }\n        if (message.os !== \"\") {\n            writer.uint32(34).string(message.os);\n        }\n        if (message.osVersion !== \"\") {\n            writer.uint32(42).string(message.osVersion);\n        }\n        if (message.deviceModel !== \"\") {\n            writer.uint32(50).string(message.deviceModel);\n        }\n        if (message.browser !== \"\") {\n            writer.uint32(58).string(message.browser);\n        }\n        if (message.browserVersion !== \"\") {\n            writer.uint32(66).string(message.browserVersion);\n        }\n        if (message.address !== \"\") {\n            writer.uint32(74).string(message.address);\n        }\n        if (message.network !== \"\") {\n            writer.uint32(82).string(message.network);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseClientInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.sdk = reader.int32();\n                    break;\n                case 2:\n                    message.version = reader.string();\n                    break;\n                case 3:\n                    message.protocol = reader.int32();\n                    break;\n                case 4:\n                    message.os = reader.string();\n                    break;\n                case 5:\n                    message.osVersion = reader.string();\n                    break;\n                case 6:\n                    message.deviceModel = reader.string();\n                    break;\n                case 7:\n                    message.browser = reader.string();\n                    break;\n                case 8:\n                    message.browserVersion = reader.string();\n                    break;\n                case 9:\n                    message.address = reader.string();\n                    break;\n                case 10:\n                    message.network = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            sdk: isSet(object.sdk) ? clientInfo_SDKFromJSON(object.sdk) : 0,\n            version: isSet(object.version) ? String(object.version) : \"\",\n            protocol: isSet(object.protocol) ? Number(object.protocol) : 0,\n            os: isSet(object.os) ? String(object.os) : \"\",\n            osVersion: isSet(object.osVersion) ? String(object.osVersion) : \"\",\n            deviceModel: isSet(object.deviceModel) ? String(object.deviceModel) : \"\",\n            browser: isSet(object.browser) ? String(object.browser) : \"\",\n            browserVersion: isSet(object.browserVersion) ? String(object.browserVersion) : \"\",\n            address: isSet(object.address) ? String(object.address) : \"\",\n            network: isSet(object.network) ? String(object.network) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.sdk !== undefined && (obj.sdk = clientInfo_SDKToJSON(message.sdk));\n        message.version !== undefined && (obj.version = message.version);\n        message.protocol !== undefined && (obj.protocol = Math.round(message.protocol));\n        message.os !== undefined && (obj.os = message.os);\n        message.osVersion !== undefined && (obj.osVersion = message.osVersion);\n        message.deviceModel !== undefined && (obj.deviceModel = message.deviceModel);\n        message.browser !== undefined && (obj.browser = message.browser);\n        message.browserVersion !== undefined && (obj.browserVersion = message.browserVersion);\n        message.address !== undefined && (obj.address = message.address);\n        message.network !== undefined && (obj.network = message.network);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        const message = createBaseClientInfo();\n        message.sdk = (_a = object.sdk) !== null && _a !== void 0 ? _a : 0;\n        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : \"\";\n        message.protocol = (_c = object.protocol) !== null && _c !== void 0 ? _c : 0;\n        message.os = (_d = object.os) !== null && _d !== void 0 ? _d : \"\";\n        message.osVersion = (_e = object.osVersion) !== null && _e !== void 0 ? _e : \"\";\n        message.deviceModel = (_f = object.deviceModel) !== null && _f !== void 0 ? _f : \"\";\n        message.browser = (_g = object.browser) !== null && _g !== void 0 ? _g : \"\";\n        message.browserVersion = (_h = object.browserVersion) !== null && _h !== void 0 ? _h : \"\";\n        message.address = (_j = object.address) !== null && _j !== void 0 ? _j : \"\";\n        message.network = (_k = object.network) !== null && _k !== void 0 ? _k : \"\";\n        return message;\n    }\n};\nfunction createBaseClientConfiguration() {\n    return {\n        video: undefined,\n        screen: undefined,\n        resumeConnection: 0,\n        disabledCodecs: undefined,\n        forceRelay: 0\n    };\n}\nexports.ClientConfiguration = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.video !== undefined) {\n            exports.VideoConfiguration.encode(message.video, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.screen !== undefined) {\n            exports.VideoConfiguration.encode(message.screen, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.resumeConnection !== 0) {\n            writer.uint32(24).int32(message.resumeConnection);\n        }\n        if (message.disabledCodecs !== undefined) {\n            exports.DisabledCodecs.encode(message.disabledCodecs, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.forceRelay !== 0) {\n            writer.uint32(40).int32(message.forceRelay);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseClientConfiguration();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.video = exports.VideoConfiguration.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.screen = exports.VideoConfiguration.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.resumeConnection = reader.int32();\n                    break;\n                case 4:\n                    message.disabledCodecs = exports.DisabledCodecs.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.forceRelay = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            video: isSet(object.video) ? exports.VideoConfiguration.fromJSON(object.video) : undefined,\n            screen: isSet(object.screen) ? exports.VideoConfiguration.fromJSON(object.screen) : undefined,\n            resumeConnection: isSet(object.resumeConnection) ? clientConfigSettingFromJSON(object.resumeConnection) : 0,\n            disabledCodecs: isSet(object.disabledCodecs) ? exports.DisabledCodecs.fromJSON(object.disabledCodecs) : undefined,\n            forceRelay: isSet(object.forceRelay) ? clientConfigSettingFromJSON(object.forceRelay) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.video !== undefined && (obj.video = message.video ? exports.VideoConfiguration.toJSON(message.video) : undefined);\n        message.screen !== undefined && (obj.screen = message.screen ? exports.VideoConfiguration.toJSON(message.screen) : undefined);\n        message.resumeConnection !== undefined && (obj.resumeConnection = clientConfigSettingToJSON(message.resumeConnection));\n        message.disabledCodecs !== undefined && (obj.disabledCodecs = message.disabledCodecs ? exports.DisabledCodecs.toJSON(message.disabledCodecs) : undefined);\n        message.forceRelay !== undefined && (obj.forceRelay = clientConfigSettingToJSON(message.forceRelay));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseClientConfiguration();\n        message.video = object.video !== undefined && object.video !== null ? exports.VideoConfiguration.fromPartial(object.video) : undefined;\n        message.screen = object.screen !== undefined && object.screen !== null ? exports.VideoConfiguration.fromPartial(object.screen) : undefined;\n        message.resumeConnection = (_a = object.resumeConnection) !== null && _a !== void 0 ? _a : 0;\n        message.disabledCodecs = object.disabledCodecs !== undefined && object.disabledCodecs !== null ? exports.DisabledCodecs.fromPartial(object.disabledCodecs) : undefined;\n        message.forceRelay = (_b = object.forceRelay) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    }\n};\nfunction createBaseVideoConfiguration() {\n    return {\n        hardwareEncoder: 0\n    };\n}\nexports.VideoConfiguration = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.hardwareEncoder !== 0) {\n            writer.uint32(8).int32(message.hardwareEncoder);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVideoConfiguration();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.hardwareEncoder = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            hardwareEncoder: isSet(object.hardwareEncoder) ? clientConfigSettingFromJSON(object.hardwareEncoder) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.hardwareEncoder !== undefined && (obj.hardwareEncoder = clientConfigSettingToJSON(message.hardwareEncoder));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseVideoConfiguration();\n        message.hardwareEncoder = (_a = object.hardwareEncoder) !== null && _a !== void 0 ? _a : 0;\n        return message;\n    }\n};\nfunction createBaseDisabledCodecs() {\n    return {\n        codecs: [],\n        publish: []\n    };\n}\nexports.DisabledCodecs = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.codecs){\n            exports.Codec.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.publish){\n            exports.Codec.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDisabledCodecs();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.codecs.push(exports.Codec.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.publish.push(exports.Codec.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            codecs: Array.isArray(object === null || object === void 0 ? void 0 : object.codecs) ? object.codecs.map((e)=>exports.Codec.fromJSON(e)) : [],\n            publish: Array.isArray(object === null || object === void 0 ? void 0 : object.publish) ? object.publish.map((e)=>exports.Codec.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.codecs) {\n            obj.codecs = message.codecs.map((e)=>e ? exports.Codec.toJSON(e) : undefined);\n        } else {\n            obj.codecs = [];\n        }\n        if (message.publish) {\n            obj.publish = message.publish.map((e)=>e ? exports.Codec.toJSON(e) : undefined);\n        } else {\n            obj.publish = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseDisabledCodecs();\n        message.codecs = ((_a = object.codecs) === null || _a === void 0 ? void 0 : _a.map((e)=>exports.Codec.fromPartial(e))) || [];\n        message.publish = ((_b = object.publish) === null || _b === void 0 ? void 0 : _b.map((e)=>exports.Codec.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseRTPDrift() {\n    return {\n        startTime: undefined,\n        endTime: undefined,\n        duration: 0,\n        startTimestamp: 0,\n        endTimestamp: 0,\n        rtpClockTicks: 0,\n        driftSamples: 0,\n        driftMs: 0,\n        clockRate: 0\n    };\n}\nexports.RTPDrift = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.startTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.startTime), writer.uint32(10).fork()).ldelim();\n        }\n        if (message.endTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).ldelim();\n        }\n        if (message.duration !== 0) {\n            writer.uint32(25).double(message.duration);\n        }\n        if (message.startTimestamp !== 0) {\n            writer.uint32(32).uint64(message.startTimestamp);\n        }\n        if (message.endTimestamp !== 0) {\n            writer.uint32(40).uint64(message.endTimestamp);\n        }\n        if (message.rtpClockTicks !== 0) {\n            writer.uint32(48).uint64(message.rtpClockTicks);\n        }\n        if (message.driftSamples !== 0) {\n            writer.uint32(56).int64(message.driftSamples);\n        }\n        if (message.driftMs !== 0) {\n            writer.uint32(65).double(message.driftMs);\n        }\n        if (message.clockRate !== 0) {\n            writer.uint32(73).double(message.clockRate);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRTPDrift();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.startTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.endTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.duration = reader.double();\n                    break;\n                case 4:\n                    message.startTimestamp = longToNumber(reader.uint64());\n                    break;\n                case 5:\n                    message.endTimestamp = longToNumber(reader.uint64());\n                    break;\n                case 6:\n                    message.rtpClockTicks = longToNumber(reader.uint64());\n                    break;\n                case 7:\n                    message.driftSamples = longToNumber(reader.int64());\n                    break;\n                case 8:\n                    message.driftMs = reader.double();\n                    break;\n                case 9:\n                    message.clockRate = reader.double();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,\n            endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,\n            duration: isSet(object.duration) ? Number(object.duration) : 0,\n            startTimestamp: isSet(object.startTimestamp) ? Number(object.startTimestamp) : 0,\n            endTimestamp: isSet(object.endTimestamp) ? Number(object.endTimestamp) : 0,\n            rtpClockTicks: isSet(object.rtpClockTicks) ? Number(object.rtpClockTicks) : 0,\n            driftSamples: isSet(object.driftSamples) ? Number(object.driftSamples) : 0,\n            driftMs: isSet(object.driftMs) ? Number(object.driftMs) : 0,\n            clockRate: isSet(object.clockRate) ? Number(object.clockRate) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.startTime !== undefined && (obj.startTime = message.startTime.toISOString());\n        message.endTime !== undefined && (obj.endTime = message.endTime.toISOString());\n        message.duration !== undefined && (obj.duration = message.duration);\n        message.startTimestamp !== undefined && (obj.startTimestamp = Math.round(message.startTimestamp));\n        message.endTimestamp !== undefined && (obj.endTimestamp = Math.round(message.endTimestamp));\n        message.rtpClockTicks !== undefined && (obj.rtpClockTicks = Math.round(message.rtpClockTicks));\n        message.driftSamples !== undefined && (obj.driftSamples = Math.round(message.driftSamples));\n        message.driftMs !== undefined && (obj.driftMs = message.driftMs);\n        message.clockRate !== undefined && (obj.clockRate = message.clockRate);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const message = createBaseRTPDrift();\n        message.startTime = (_a = object.startTime) !== null && _a !== void 0 ? _a : undefined;\n        message.endTime = (_b = object.endTime) !== null && _b !== void 0 ? _b : undefined;\n        message.duration = (_c = object.duration) !== null && _c !== void 0 ? _c : 0;\n        message.startTimestamp = (_d = object.startTimestamp) !== null && _d !== void 0 ? _d : 0;\n        message.endTimestamp = (_e = object.endTimestamp) !== null && _e !== void 0 ? _e : 0;\n        message.rtpClockTicks = (_f = object.rtpClockTicks) !== null && _f !== void 0 ? _f : 0;\n        message.driftSamples = (_g = object.driftSamples) !== null && _g !== void 0 ? _g : 0;\n        message.driftMs = (_h = object.driftMs) !== null && _h !== void 0 ? _h : 0;\n        message.clockRate = (_j = object.clockRate) !== null && _j !== void 0 ? _j : 0;\n        return message;\n    }\n};\nfunction createBaseRTPStats() {\n    return {\n        startTime: undefined,\n        endTime: undefined,\n        duration: 0,\n        packets: 0,\n        packetRate: 0,\n        bytes: 0,\n        headerBytes: 0,\n        bitrate: 0,\n        packetsLost: 0,\n        packetLossRate: 0,\n        packetLossPercentage: 0,\n        packetsDuplicate: 0,\n        packetDuplicateRate: 0,\n        bytesDuplicate: 0,\n        headerBytesDuplicate: 0,\n        bitrateDuplicate: 0,\n        packetsPadding: 0,\n        packetPaddingRate: 0,\n        bytesPadding: 0,\n        headerBytesPadding: 0,\n        bitratePadding: 0,\n        packetsOutOfOrder: 0,\n        frames: 0,\n        frameRate: 0,\n        jitterCurrent: 0,\n        jitterMax: 0,\n        gapHistogram: {},\n        nacks: 0,\n        nackAcks: 0,\n        nackMisses: 0,\n        nackRepeated: 0,\n        plis: 0,\n        lastPli: undefined,\n        firs: 0,\n        lastFir: undefined,\n        rttCurrent: 0,\n        rttMax: 0,\n        keyFrames: 0,\n        lastKeyFrame: undefined,\n        layerLockPlis: 0,\n        lastLayerLockPli: undefined,\n        packetDrift: undefined,\n        reportDrift: undefined\n    };\n}\nexports.RTPStats = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.startTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.startTime), writer.uint32(10).fork()).ldelim();\n        }\n        if (message.endTime !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).ldelim();\n        }\n        if (message.duration !== 0) {\n            writer.uint32(25).double(message.duration);\n        }\n        if (message.packets !== 0) {\n            writer.uint32(32).uint32(message.packets);\n        }\n        if (message.packetRate !== 0) {\n            writer.uint32(41).double(message.packetRate);\n        }\n        if (message.bytes !== 0) {\n            writer.uint32(48).uint64(message.bytes);\n        }\n        if (message.headerBytes !== 0) {\n            writer.uint32(312).uint64(message.headerBytes);\n        }\n        if (message.bitrate !== 0) {\n            writer.uint32(57).double(message.bitrate);\n        }\n        if (message.packetsLost !== 0) {\n            writer.uint32(64).uint32(message.packetsLost);\n        }\n        if (message.packetLossRate !== 0) {\n            writer.uint32(73).double(message.packetLossRate);\n        }\n        if (message.packetLossPercentage !== 0) {\n            writer.uint32(85).float(message.packetLossPercentage);\n        }\n        if (message.packetsDuplicate !== 0) {\n            writer.uint32(88).uint32(message.packetsDuplicate);\n        }\n        if (message.packetDuplicateRate !== 0) {\n            writer.uint32(97).double(message.packetDuplicateRate);\n        }\n        if (message.bytesDuplicate !== 0) {\n            writer.uint32(104).uint64(message.bytesDuplicate);\n        }\n        if (message.headerBytesDuplicate !== 0) {\n            writer.uint32(320).uint64(message.headerBytesDuplicate);\n        }\n        if (message.bitrateDuplicate !== 0) {\n            writer.uint32(113).double(message.bitrateDuplicate);\n        }\n        if (message.packetsPadding !== 0) {\n            writer.uint32(120).uint32(message.packetsPadding);\n        }\n        if (message.packetPaddingRate !== 0) {\n            writer.uint32(129).double(message.packetPaddingRate);\n        }\n        if (message.bytesPadding !== 0) {\n            writer.uint32(136).uint64(message.bytesPadding);\n        }\n        if (message.headerBytesPadding !== 0) {\n            writer.uint32(328).uint64(message.headerBytesPadding);\n        }\n        if (message.bitratePadding !== 0) {\n            writer.uint32(145).double(message.bitratePadding);\n        }\n        if (message.packetsOutOfOrder !== 0) {\n            writer.uint32(152).uint32(message.packetsOutOfOrder);\n        }\n        if (message.frames !== 0) {\n            writer.uint32(160).uint32(message.frames);\n        }\n        if (message.frameRate !== 0) {\n            writer.uint32(169).double(message.frameRate);\n        }\n        if (message.jitterCurrent !== 0) {\n            writer.uint32(177).double(message.jitterCurrent);\n        }\n        if (message.jitterMax !== 0) {\n            writer.uint32(185).double(message.jitterMax);\n        }\n        Object.entries(message.gapHistogram).forEach(([key, value])=>{\n            exports.RTPStats_GapHistogramEntry.encode({\n                key: key,\n                value\n            }, writer.uint32(194).fork()).ldelim();\n        });\n        if (message.nacks !== 0) {\n            writer.uint32(200).uint32(message.nacks);\n        }\n        if (message.nackAcks !== 0) {\n            writer.uint32(296).uint32(message.nackAcks);\n        }\n        if (message.nackMisses !== 0) {\n            writer.uint32(208).uint32(message.nackMisses);\n        }\n        if (message.nackRepeated !== 0) {\n            writer.uint32(304).uint32(message.nackRepeated);\n        }\n        if (message.plis !== 0) {\n            writer.uint32(216).uint32(message.plis);\n        }\n        if (message.lastPli !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.lastPli), writer.uint32(226).fork()).ldelim();\n        }\n        if (message.firs !== 0) {\n            writer.uint32(232).uint32(message.firs);\n        }\n        if (message.lastFir !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.lastFir), writer.uint32(242).fork()).ldelim();\n        }\n        if (message.rttCurrent !== 0) {\n            writer.uint32(248).uint32(message.rttCurrent);\n        }\n        if (message.rttMax !== 0) {\n            writer.uint32(256).uint32(message.rttMax);\n        }\n        if (message.keyFrames !== 0) {\n            writer.uint32(264).uint32(message.keyFrames);\n        }\n        if (message.lastKeyFrame !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.lastKeyFrame), writer.uint32(274).fork()).ldelim();\n        }\n        if (message.layerLockPlis !== 0) {\n            writer.uint32(280).uint32(message.layerLockPlis);\n        }\n        if (message.lastLayerLockPli !== undefined) {\n            timestamp_1.Timestamp.encode(toTimestamp(message.lastLayerLockPli), writer.uint32(290).fork()).ldelim();\n        }\n        if (message.packetDrift !== undefined) {\n            exports.RTPDrift.encode(message.packetDrift, writer.uint32(354).fork()).ldelim();\n        }\n        if (message.reportDrift !== undefined) {\n            exports.RTPDrift.encode(message.reportDrift, writer.uint32(362).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRTPStats();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.startTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.endTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.duration = reader.double();\n                    break;\n                case 4:\n                    message.packets = reader.uint32();\n                    break;\n                case 5:\n                    message.packetRate = reader.double();\n                    break;\n                case 6:\n                    message.bytes = longToNumber(reader.uint64());\n                    break;\n                case 39:\n                    message.headerBytes = longToNumber(reader.uint64());\n                    break;\n                case 7:\n                    message.bitrate = reader.double();\n                    break;\n                case 8:\n                    message.packetsLost = reader.uint32();\n                    break;\n                case 9:\n                    message.packetLossRate = reader.double();\n                    break;\n                case 10:\n                    message.packetLossPercentage = reader.float();\n                    break;\n                case 11:\n                    message.packetsDuplicate = reader.uint32();\n                    break;\n                case 12:\n                    message.packetDuplicateRate = reader.double();\n                    break;\n                case 13:\n                    message.bytesDuplicate = longToNumber(reader.uint64());\n                    break;\n                case 40:\n                    message.headerBytesDuplicate = longToNumber(reader.uint64());\n                    break;\n                case 14:\n                    message.bitrateDuplicate = reader.double();\n                    break;\n                case 15:\n                    message.packetsPadding = reader.uint32();\n                    break;\n                case 16:\n                    message.packetPaddingRate = reader.double();\n                    break;\n                case 17:\n                    message.bytesPadding = longToNumber(reader.uint64());\n                    break;\n                case 41:\n                    message.headerBytesPadding = longToNumber(reader.uint64());\n                    break;\n                case 18:\n                    message.bitratePadding = reader.double();\n                    break;\n                case 19:\n                    message.packetsOutOfOrder = reader.uint32();\n                    break;\n                case 20:\n                    message.frames = reader.uint32();\n                    break;\n                case 21:\n                    message.frameRate = reader.double();\n                    break;\n                case 22:\n                    message.jitterCurrent = reader.double();\n                    break;\n                case 23:\n                    message.jitterMax = reader.double();\n                    break;\n                case 24:\n                    const entry24 = exports.RTPStats_GapHistogramEntry.decode(reader, reader.uint32());\n                    if (entry24.value !== undefined) {\n                        message.gapHistogram[entry24.key] = entry24.value;\n                    }\n                    break;\n                case 25:\n                    message.nacks = reader.uint32();\n                    break;\n                case 37:\n                    message.nackAcks = reader.uint32();\n                    break;\n                case 26:\n                    message.nackMisses = reader.uint32();\n                    break;\n                case 38:\n                    message.nackRepeated = reader.uint32();\n                    break;\n                case 27:\n                    message.plis = reader.uint32();\n                    break;\n                case 28:\n                    message.lastPli = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 29:\n                    message.firs = reader.uint32();\n                    break;\n                case 30:\n                    message.lastFir = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 31:\n                    message.rttCurrent = reader.uint32();\n                    break;\n                case 32:\n                    message.rttMax = reader.uint32();\n                    break;\n                case 33:\n                    message.keyFrames = reader.uint32();\n                    break;\n                case 34:\n                    message.lastKeyFrame = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 35:\n                    message.layerLockPlis = reader.uint32();\n                    break;\n                case 36:\n                    message.lastLayerLockPli = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 44:\n                    message.packetDrift = exports.RTPDrift.decode(reader, reader.uint32());\n                    break;\n                case 45:\n                    message.reportDrift = exports.RTPDrift.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,\n            endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,\n            duration: isSet(object.duration) ? Number(object.duration) : 0,\n            packets: isSet(object.packets) ? Number(object.packets) : 0,\n            packetRate: isSet(object.packetRate) ? Number(object.packetRate) : 0,\n            bytes: isSet(object.bytes) ? Number(object.bytes) : 0,\n            headerBytes: isSet(object.headerBytes) ? Number(object.headerBytes) : 0,\n            bitrate: isSet(object.bitrate) ? Number(object.bitrate) : 0,\n            packetsLost: isSet(object.packetsLost) ? Number(object.packetsLost) : 0,\n            packetLossRate: isSet(object.packetLossRate) ? Number(object.packetLossRate) : 0,\n            packetLossPercentage: isSet(object.packetLossPercentage) ? Number(object.packetLossPercentage) : 0,\n            packetsDuplicate: isSet(object.packetsDuplicate) ? Number(object.packetsDuplicate) : 0,\n            packetDuplicateRate: isSet(object.packetDuplicateRate) ? Number(object.packetDuplicateRate) : 0,\n            bytesDuplicate: isSet(object.bytesDuplicate) ? Number(object.bytesDuplicate) : 0,\n            headerBytesDuplicate: isSet(object.headerBytesDuplicate) ? Number(object.headerBytesDuplicate) : 0,\n            bitrateDuplicate: isSet(object.bitrateDuplicate) ? Number(object.bitrateDuplicate) : 0,\n            packetsPadding: isSet(object.packetsPadding) ? Number(object.packetsPadding) : 0,\n            packetPaddingRate: isSet(object.packetPaddingRate) ? Number(object.packetPaddingRate) : 0,\n            bytesPadding: isSet(object.bytesPadding) ? Number(object.bytesPadding) : 0,\n            headerBytesPadding: isSet(object.headerBytesPadding) ? Number(object.headerBytesPadding) : 0,\n            bitratePadding: isSet(object.bitratePadding) ? Number(object.bitratePadding) : 0,\n            packetsOutOfOrder: isSet(object.packetsOutOfOrder) ? Number(object.packetsOutOfOrder) : 0,\n            frames: isSet(object.frames) ? Number(object.frames) : 0,\n            frameRate: isSet(object.frameRate) ? Number(object.frameRate) : 0,\n            jitterCurrent: isSet(object.jitterCurrent) ? Number(object.jitterCurrent) : 0,\n            jitterMax: isSet(object.jitterMax) ? Number(object.jitterMax) : 0,\n            gapHistogram: isObject(object.gapHistogram) ? Object.entries(object.gapHistogram).reduce((acc, [key, value])=>{\n                acc[Number(key)] = Number(value);\n                return acc;\n            }, {}) : {},\n            nacks: isSet(object.nacks) ? Number(object.nacks) : 0,\n            nackAcks: isSet(object.nackAcks) ? Number(object.nackAcks) : 0,\n            nackMisses: isSet(object.nackMisses) ? Number(object.nackMisses) : 0,\n            nackRepeated: isSet(object.nackRepeated) ? Number(object.nackRepeated) : 0,\n            plis: isSet(object.plis) ? Number(object.plis) : 0,\n            lastPli: isSet(object.lastPli) ? fromJsonTimestamp(object.lastPli) : undefined,\n            firs: isSet(object.firs) ? Number(object.firs) : 0,\n            lastFir: isSet(object.lastFir) ? fromJsonTimestamp(object.lastFir) : undefined,\n            rttCurrent: isSet(object.rttCurrent) ? Number(object.rttCurrent) : 0,\n            rttMax: isSet(object.rttMax) ? Number(object.rttMax) : 0,\n            keyFrames: isSet(object.keyFrames) ? Number(object.keyFrames) : 0,\n            lastKeyFrame: isSet(object.lastKeyFrame) ? fromJsonTimestamp(object.lastKeyFrame) : undefined,\n            layerLockPlis: isSet(object.layerLockPlis) ? Number(object.layerLockPlis) : 0,\n            lastLayerLockPli: isSet(object.lastLayerLockPli) ? fromJsonTimestamp(object.lastLayerLockPli) : undefined,\n            packetDrift: isSet(object.packetDrift) ? exports.RTPDrift.fromJSON(object.packetDrift) : undefined,\n            reportDrift: isSet(object.reportDrift) ? exports.RTPDrift.fromJSON(object.reportDrift) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.startTime !== undefined && (obj.startTime = message.startTime.toISOString());\n        message.endTime !== undefined && (obj.endTime = message.endTime.toISOString());\n        message.duration !== undefined && (obj.duration = message.duration);\n        message.packets !== undefined && (obj.packets = Math.round(message.packets));\n        message.packetRate !== undefined && (obj.packetRate = message.packetRate);\n        message.bytes !== undefined && (obj.bytes = Math.round(message.bytes));\n        message.headerBytes !== undefined && (obj.headerBytes = Math.round(message.headerBytes));\n        message.bitrate !== undefined && (obj.bitrate = message.bitrate);\n        message.packetsLost !== undefined && (obj.packetsLost = Math.round(message.packetsLost));\n        message.packetLossRate !== undefined && (obj.packetLossRate = message.packetLossRate);\n        message.packetLossPercentage !== undefined && (obj.packetLossPercentage = message.packetLossPercentage);\n        message.packetsDuplicate !== undefined && (obj.packetsDuplicate = Math.round(message.packetsDuplicate));\n        message.packetDuplicateRate !== undefined && (obj.packetDuplicateRate = message.packetDuplicateRate);\n        message.bytesDuplicate !== undefined && (obj.bytesDuplicate = Math.round(message.bytesDuplicate));\n        message.headerBytesDuplicate !== undefined && (obj.headerBytesDuplicate = Math.round(message.headerBytesDuplicate));\n        message.bitrateDuplicate !== undefined && (obj.bitrateDuplicate = message.bitrateDuplicate);\n        message.packetsPadding !== undefined && (obj.packetsPadding = Math.round(message.packetsPadding));\n        message.packetPaddingRate !== undefined && (obj.packetPaddingRate = message.packetPaddingRate);\n        message.bytesPadding !== undefined && (obj.bytesPadding = Math.round(message.bytesPadding));\n        message.headerBytesPadding !== undefined && (obj.headerBytesPadding = Math.round(message.headerBytesPadding));\n        message.bitratePadding !== undefined && (obj.bitratePadding = message.bitratePadding);\n        message.packetsOutOfOrder !== undefined && (obj.packetsOutOfOrder = Math.round(message.packetsOutOfOrder));\n        message.frames !== undefined && (obj.frames = Math.round(message.frames));\n        message.frameRate !== undefined && (obj.frameRate = message.frameRate);\n        message.jitterCurrent !== undefined && (obj.jitterCurrent = message.jitterCurrent);\n        message.jitterMax !== undefined && (obj.jitterMax = message.jitterMax);\n        obj.gapHistogram = {};\n        if (message.gapHistogram) {\n            Object.entries(message.gapHistogram).forEach(([k, v])=>{\n                obj.gapHistogram[k] = Math.round(v);\n            });\n        }\n        message.nacks !== undefined && (obj.nacks = Math.round(message.nacks));\n        message.nackAcks !== undefined && (obj.nackAcks = Math.round(message.nackAcks));\n        message.nackMisses !== undefined && (obj.nackMisses = Math.round(message.nackMisses));\n        message.nackRepeated !== undefined && (obj.nackRepeated = Math.round(message.nackRepeated));\n        message.plis !== undefined && (obj.plis = Math.round(message.plis));\n        message.lastPli !== undefined && (obj.lastPli = message.lastPli.toISOString());\n        message.firs !== undefined && (obj.firs = Math.round(message.firs));\n        message.lastFir !== undefined && (obj.lastFir = message.lastFir.toISOString());\n        message.rttCurrent !== undefined && (obj.rttCurrent = Math.round(message.rttCurrent));\n        message.rttMax !== undefined && (obj.rttMax = Math.round(message.rttMax));\n        message.keyFrames !== undefined && (obj.keyFrames = Math.round(message.keyFrames));\n        message.lastKeyFrame !== undefined && (obj.lastKeyFrame = message.lastKeyFrame.toISOString());\n        message.layerLockPlis !== undefined && (obj.layerLockPlis = Math.round(message.layerLockPlis));\n        message.lastLayerLockPli !== undefined && (obj.lastLayerLockPli = message.lastLayerLockPli.toISOString());\n        message.packetDrift !== undefined && (obj.packetDrift = message.packetDrift ? exports.RTPDrift.toJSON(message.packetDrift) : undefined);\n        message.reportDrift !== undefined && (obj.reportDrift = message.reportDrift ? exports.RTPDrift.toJSON(message.reportDrift) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16;\n        const message = createBaseRTPStats();\n        message.startTime = (_a = object.startTime) !== null && _a !== void 0 ? _a : undefined;\n        message.endTime = (_b = object.endTime) !== null && _b !== void 0 ? _b : undefined;\n        message.duration = (_c = object.duration) !== null && _c !== void 0 ? _c : 0;\n        message.packets = (_d = object.packets) !== null && _d !== void 0 ? _d : 0;\n        message.packetRate = (_e = object.packetRate) !== null && _e !== void 0 ? _e : 0;\n        message.bytes = (_f = object.bytes) !== null && _f !== void 0 ? _f : 0;\n        message.headerBytes = (_g = object.headerBytes) !== null && _g !== void 0 ? _g : 0;\n        message.bitrate = (_h = object.bitrate) !== null && _h !== void 0 ? _h : 0;\n        message.packetsLost = (_j = object.packetsLost) !== null && _j !== void 0 ? _j : 0;\n        message.packetLossRate = (_k = object.packetLossRate) !== null && _k !== void 0 ? _k : 0;\n        message.packetLossPercentage = (_l = object.packetLossPercentage) !== null && _l !== void 0 ? _l : 0;\n        message.packetsDuplicate = (_m = object.packetsDuplicate) !== null && _m !== void 0 ? _m : 0;\n        message.packetDuplicateRate = (_o = object.packetDuplicateRate) !== null && _o !== void 0 ? _o : 0;\n        message.bytesDuplicate = (_p = object.bytesDuplicate) !== null && _p !== void 0 ? _p : 0;\n        message.headerBytesDuplicate = (_q = object.headerBytesDuplicate) !== null && _q !== void 0 ? _q : 0;\n        message.bitrateDuplicate = (_r = object.bitrateDuplicate) !== null && _r !== void 0 ? _r : 0;\n        message.packetsPadding = (_s = object.packetsPadding) !== null && _s !== void 0 ? _s : 0;\n        message.packetPaddingRate = (_t = object.packetPaddingRate) !== null && _t !== void 0 ? _t : 0;\n        message.bytesPadding = (_u = object.bytesPadding) !== null && _u !== void 0 ? _u : 0;\n        message.headerBytesPadding = (_v = object.headerBytesPadding) !== null && _v !== void 0 ? _v : 0;\n        message.bitratePadding = (_w = object.bitratePadding) !== null && _w !== void 0 ? _w : 0;\n        message.packetsOutOfOrder = (_x = object.packetsOutOfOrder) !== null && _x !== void 0 ? _x : 0;\n        message.frames = (_y = object.frames) !== null && _y !== void 0 ? _y : 0;\n        message.frameRate = (_z = object.frameRate) !== null && _z !== void 0 ? _z : 0;\n        message.jitterCurrent = (_0 = object.jitterCurrent) !== null && _0 !== void 0 ? _0 : 0;\n        message.jitterMax = (_1 = object.jitterMax) !== null && _1 !== void 0 ? _1 : 0;\n        message.gapHistogram = Object.entries((_2 = object.gapHistogram) !== null && _2 !== void 0 ? _2 : {}).reduce((acc, [key, value])=>{\n            if (value !== undefined) {\n                acc[Number(key)] = Number(value);\n            }\n            return acc;\n        }, {});\n        message.nacks = (_3 = object.nacks) !== null && _3 !== void 0 ? _3 : 0;\n        message.nackAcks = (_4 = object.nackAcks) !== null && _4 !== void 0 ? _4 : 0;\n        message.nackMisses = (_5 = object.nackMisses) !== null && _5 !== void 0 ? _5 : 0;\n        message.nackRepeated = (_6 = object.nackRepeated) !== null && _6 !== void 0 ? _6 : 0;\n        message.plis = (_7 = object.plis) !== null && _7 !== void 0 ? _7 : 0;\n        message.lastPli = (_8 = object.lastPli) !== null && _8 !== void 0 ? _8 : undefined;\n        message.firs = (_9 = object.firs) !== null && _9 !== void 0 ? _9 : 0;\n        message.lastFir = (_10 = object.lastFir) !== null && _10 !== void 0 ? _10 : undefined;\n        message.rttCurrent = (_11 = object.rttCurrent) !== null && _11 !== void 0 ? _11 : 0;\n        message.rttMax = (_12 = object.rttMax) !== null && _12 !== void 0 ? _12 : 0;\n        message.keyFrames = (_13 = object.keyFrames) !== null && _13 !== void 0 ? _13 : 0;\n        message.lastKeyFrame = (_14 = object.lastKeyFrame) !== null && _14 !== void 0 ? _14 : undefined;\n        message.layerLockPlis = (_15 = object.layerLockPlis) !== null && _15 !== void 0 ? _15 : 0;\n        message.lastLayerLockPli = (_16 = object.lastLayerLockPli) !== null && _16 !== void 0 ? _16 : undefined;\n        message.packetDrift = object.packetDrift !== undefined && object.packetDrift !== null ? exports.RTPDrift.fromPartial(object.packetDrift) : undefined;\n        message.reportDrift = object.reportDrift !== undefined && object.reportDrift !== null ? exports.RTPDrift.fromPartial(object.reportDrift) : undefined;\n        return message;\n    }\n};\nfunction createBaseRTPStats_GapHistogramEntry() {\n    return {\n        key: 0,\n        value: 0\n    };\n}\nexports.RTPStats_GapHistogramEntry = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.key !== 0) {\n            writer.uint32(8).int32(message.key);\n        }\n        if (message.value !== 0) {\n            writer.uint32(16).uint32(message.value);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRTPStats_GapHistogramEntry();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.key = reader.int32();\n                    break;\n                case 2:\n                    message.value = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            key: isSet(object.key) ? Number(object.key) : 0,\n            value: isSet(object.value) ? Number(object.value) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.key !== undefined && (obj.key = Math.round(message.key));\n        message.value !== undefined && (obj.value = Math.round(message.value));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseRTPStats_GapHistogramEntry();\n        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : 0;\n        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    }\n};\nfunction createBaseTimedVersion() {\n    return {\n        unixMicro: 0,\n        ticks: 0\n    };\n}\nexports.TimedVersion = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.unixMicro !== 0) {\n            writer.uint32(8).int64(message.unixMicro);\n        }\n        if (message.ticks !== 0) {\n            writer.uint32(16).int32(message.ticks);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTimedVersion();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.unixMicro = longToNumber(reader.int64());\n                    break;\n                case 2:\n                    message.ticks = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            unixMicro: isSet(object.unixMicro) ? Number(object.unixMicro) : 0,\n            ticks: isSet(object.ticks) ? Number(object.ticks) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.unixMicro !== undefined && (obj.unixMicro = Math.round(message.unixMicro));\n        message.ticks !== undefined && (obj.ticks = Math.round(message.ticks));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseTimedVersion();\n        message.unixMicro = (_a = object.unixMicro) !== null && _a !== void 0 ? _a : 0;\n        message.ticks = (_b = object.ticks) !== null && _b !== void 0 ? _b : 0;\n        return message;\n    }\n};\nvar globalThis = (()=>{\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (false) {}\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    } else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for(let i = 0; i < bin.length; ++i){\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    } else {\n        const bin = [];\n        arr.forEach((byte)=>{\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nfunction toTimestamp(date) {\n    const seconds = date.getTime() / 1000;\n    const nanos = date.getTime() % 1000 * 1000000;\n    return {\n        seconds,\n        nanos\n    };\n}\nfunction fromTimestamp(t) {\n    let millis = t.seconds * 1000;\n    millis += t.nanos / 1000000;\n    return new Date(millis);\n}\nfunction fromJsonTimestamp(o) {\n    if (o instanceof Date) {\n        return o;\n    } else if (typeof o === \"string\") {\n        return new Date(o);\n    } else {\n        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));\n    }\n}\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n} //# sourceMappingURL=livekit_models.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_room.js":
/*!********************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/livekit_room.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UpdateRoomMetadataRequest = exports.SendDataResponse = exports.SendDataRequest = exports.UpdateSubscriptionsResponse = exports.UpdateSubscriptionsRequest = exports.UpdateParticipantRequest = exports.MuteRoomTrackResponse = exports.MuteRoomTrackRequest = exports.RemoveParticipantResponse = exports.RoomParticipantIdentity = exports.ListParticipantsResponse = exports.ListParticipantsRequest = exports.DeleteRoomResponse = exports.DeleteRoomRequest = exports.ListRoomsResponse = exports.ListRoomsRequest = exports.RoomEgress = exports.CreateRoomRequest = exports.protobufPackage = void 0;\n/* eslint-disable */ const minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(action-browser)/./node_modules/protobufjs/minimal.js\"));\nconst livekit_egress_1 = __webpack_require__(/*! ./livekit_egress */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js\");\nconst livekit_models_1 = __webpack_require__(/*! ./livekit_models */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nexports.protobufPackage = \"livekit\";\nfunction createBaseCreateRoomRequest() {\n    return {\n        name: \"\",\n        emptyTimeout: 0,\n        maxParticipants: 0,\n        nodeId: \"\",\n        metadata: \"\",\n        egress: undefined,\n        minPlayoutDelay: 0,\n        maxPlayoutDelay: 0,\n        syncStreams: false\n    };\n}\nexports.CreateRoomRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.emptyTimeout !== undefined && message.emptyTimeout !== 0) {\n            writer.uint32(16).uint32(message.emptyTimeout);\n        }\n        if (message.maxParticipants !== undefined && message.maxParticipants !== 0) {\n            writer.uint32(24).uint32(message.maxParticipants);\n        }\n        if (message.nodeId !== undefined && message.nodeId !== \"\") {\n            writer.uint32(34).string(message.nodeId);\n        }\n        if (message.metadata !== undefined && message.metadata !== \"\") {\n            writer.uint32(42).string(message.metadata);\n        }\n        if (message.egress !== undefined) {\n            exports.RoomEgress.encode(message.egress, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.minPlayoutDelay !== undefined && message.minPlayoutDelay !== 0) {\n            writer.uint32(56).uint32(message.minPlayoutDelay);\n        }\n        if (message.maxPlayoutDelay !== undefined && message.maxPlayoutDelay !== 0) {\n            writer.uint32(64).uint32(message.maxPlayoutDelay);\n        }\n        if (message.syncStreams === true) {\n            writer.uint32(72).bool(message.syncStreams);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCreateRoomRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.emptyTimeout = reader.uint32();\n                    break;\n                case 3:\n                    message.maxParticipants = reader.uint32();\n                    break;\n                case 4:\n                    message.nodeId = reader.string();\n                    break;\n                case 5:\n                    message.metadata = reader.string();\n                    break;\n                case 6:\n                    message.egress = exports.RoomEgress.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.minPlayoutDelay = reader.uint32();\n                    break;\n                case 8:\n                    message.maxPlayoutDelay = reader.uint32();\n                    break;\n                case 9:\n                    message.syncStreams = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            name: isSet(object.name) ? String(object.name) : \"\",\n            emptyTimeout: isSet(object.emptyTimeout) ? Number(object.emptyTimeout) : 0,\n            maxParticipants: isSet(object.maxParticipants) ? Number(object.maxParticipants) : 0,\n            nodeId: isSet(object.nodeId) ? String(object.nodeId) : \"\",\n            metadata: isSet(object.metadata) ? String(object.metadata) : \"\",\n            egress: isSet(object.egress) ? exports.RoomEgress.fromJSON(object.egress) : undefined,\n            minPlayoutDelay: isSet(object.minPlayoutDelay) ? Number(object.minPlayoutDelay) : 0,\n            maxPlayoutDelay: isSet(object.maxPlayoutDelay) ? Number(object.maxPlayoutDelay) : 0,\n            syncStreams: isSet(object.syncStreams) ? Boolean(object.syncStreams) : false\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.name !== undefined && (obj.name = message.name);\n        message.emptyTimeout !== undefined && (obj.emptyTimeout = Math.round(message.emptyTimeout));\n        message.maxParticipants !== undefined && (obj.maxParticipants = Math.round(message.maxParticipants));\n        message.nodeId !== undefined && (obj.nodeId = message.nodeId);\n        message.metadata !== undefined && (obj.metadata = message.metadata);\n        message.egress !== undefined && (obj.egress = message.egress ? exports.RoomEgress.toJSON(message.egress) : undefined);\n        message.minPlayoutDelay !== undefined && (obj.minPlayoutDelay = Math.round(message.minPlayoutDelay));\n        message.maxPlayoutDelay !== undefined && (obj.maxPlayoutDelay = Math.round(message.maxPlayoutDelay));\n        message.syncStreams !== undefined && (obj.syncStreams = message.syncStreams);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const message = createBaseCreateRoomRequest();\n        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : \"\";\n        message.emptyTimeout = (_b = object.emptyTimeout) !== null && _b !== void 0 ? _b : 0;\n        message.maxParticipants = (_c = object.maxParticipants) !== null && _c !== void 0 ? _c : 0;\n        message.nodeId = (_d = object.nodeId) !== null && _d !== void 0 ? _d : \"\";\n        message.metadata = (_e = object.metadata) !== null && _e !== void 0 ? _e : \"\";\n        message.egress = object.egress !== undefined && object.egress !== null ? exports.RoomEgress.fromPartial(object.egress) : undefined;\n        message.minPlayoutDelay = (_f = object.minPlayoutDelay) !== null && _f !== void 0 ? _f : 0;\n        message.maxPlayoutDelay = (_g = object.maxPlayoutDelay) !== null && _g !== void 0 ? _g : 0;\n        message.syncStreams = (_h = object.syncStreams) !== null && _h !== void 0 ? _h : false;\n        return message;\n    }\n};\nfunction createBaseRoomEgress() {\n    return {\n        room: undefined,\n        participant: undefined,\n        tracks: undefined\n    };\n}\nexports.RoomEgress = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined) {\n            livekit_egress_1.RoomCompositeEgressRequest.encode(message.room, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.participant !== undefined) {\n            livekit_egress_1.AutoParticipantEgress.encode(message.participant, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.tracks !== undefined) {\n            livekit_egress_1.AutoTrackEgress.encode(message.tracks, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRoomEgress();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.room = livekit_egress_1.RoomCompositeEgressRequest.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.participant = livekit_egress_1.AutoParticipantEgress.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.tracks = livekit_egress_1.AutoTrackEgress.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            room: isSet(object.room) ? livekit_egress_1.RoomCompositeEgressRequest.fromJSON(object.room) : undefined,\n            participant: isSet(object.participant) ? livekit_egress_1.AutoParticipantEgress.fromJSON(object.participant) : undefined,\n            tracks: isSet(object.tracks) ? livekit_egress_1.AutoTrackEgress.fromJSON(object.tracks) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room ? livekit_egress_1.RoomCompositeEgressRequest.toJSON(message.room) : undefined);\n        message.participant !== undefined && (obj.participant = message.participant ? livekit_egress_1.AutoParticipantEgress.toJSON(message.participant) : undefined);\n        message.tracks !== undefined && (obj.tracks = message.tracks ? livekit_egress_1.AutoTrackEgress.toJSON(message.tracks) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        const message = createBaseRoomEgress();\n        message.room = object.room !== undefined && object.room !== null ? livekit_egress_1.RoomCompositeEgressRequest.fromPartial(object.room) : undefined;\n        message.participant = object.participant !== undefined && object.participant !== null ? livekit_egress_1.AutoParticipantEgress.fromPartial(object.participant) : undefined;\n        message.tracks = object.tracks !== undefined && object.tracks !== null ? livekit_egress_1.AutoTrackEgress.fromPartial(object.tracks) : undefined;\n        return message;\n    }\n};\nfunction createBaseListRoomsRequest() {\n    return {\n        names: []\n    };\n}\nexports.ListRoomsRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.names !== undefined && message.names.length !== 0) {\n            for (const v of message.names){\n                writer.uint32(10).string(v);\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListRoomsRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.names.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            names: Array.isArray(object === null || object === void 0 ? void 0 : object.names) ? object.names.map((e)=>String(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.names) {\n            obj.names = message.names.map((e)=>e);\n        } else {\n            obj.names = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseListRoomsRequest();\n        message.names = ((_a = object.names) === null || _a === void 0 ? void 0 : _a.map((e)=>e)) || [];\n        return message;\n    }\n};\nfunction createBaseListRoomsResponse() {\n    return {\n        rooms: []\n    };\n}\nexports.ListRoomsResponse = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.rooms !== undefined && message.rooms.length !== 0) {\n            for (const v of message.rooms){\n                livekit_models_1.Room.encode(v, writer.uint32(10).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListRoomsResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.rooms.push(livekit_models_1.Room.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            rooms: Array.isArray(object === null || object === void 0 ? void 0 : object.rooms) ? object.rooms.map((e)=>livekit_models_1.Room.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.rooms) {\n            obj.rooms = message.rooms.map((e)=>e ? livekit_models_1.Room.toJSON(e) : undefined);\n        } else {\n            obj.rooms = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseListRoomsResponse();\n        message.rooms = ((_a = object.rooms) === null || _a === void 0 ? void 0 : _a.map((e)=>livekit_models_1.Room.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseDeleteRoomRequest() {\n    return {\n        room: \"\"\n    };\n}\nexports.DeleteRoomRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDeleteRoomRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.room = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseDeleteRoomRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    }\n};\nfunction createBaseDeleteRoomResponse() {\n    return {};\n}\nexports.DeleteRoomResponse = {\n    encode (_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDeleteRoomResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (_) {\n        return {};\n    },\n    toJSON (_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial (_) {\n        const message = createBaseDeleteRoomResponse();\n        return message;\n    }\n};\nfunction createBaseListParticipantsRequest() {\n    return {\n        room: \"\"\n    };\n}\nexports.ListParticipantsRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListParticipantsRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.room = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseListParticipantsRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        return message;\n    }\n};\nfunction createBaseListParticipantsResponse() {\n    return {\n        participants: []\n    };\n}\nexports.ListParticipantsResponse = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.participants !== undefined && message.participants.length !== 0) {\n            for (const v of message.participants){\n                livekit_models_1.ParticipantInfo.encode(v, writer.uint32(10).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseListParticipantsResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.participants.push(livekit_models_1.ParticipantInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            participants: Array.isArray(object === null || object === void 0 ? void 0 : object.participants) ? object.participants.map((e)=>livekit_models_1.ParticipantInfo.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        if (message.participants) {\n            obj.participants = message.participants.map((e)=>e ? livekit_models_1.ParticipantInfo.toJSON(e) : undefined);\n        } else {\n            obj.participants = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a;\n        const message = createBaseListParticipantsResponse();\n        message.participants = ((_a = object.participants) === null || _a === void 0 ? void 0 : _a.map((e)=>livekit_models_1.ParticipantInfo.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseRoomParticipantIdentity() {\n    return {\n        room: \"\",\n        identity: \"\"\n    };\n}\nexports.RoomParticipantIdentity = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.identity !== undefined && message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRoomParticipantIdentity();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.identity !== undefined && (obj.identity = message.identity);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseRoomParticipantIdentity();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    }\n};\nfunction createBaseRemoveParticipantResponse() {\n    return {};\n}\nexports.RemoveParticipantResponse = {\n    encode (_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseRemoveParticipantResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (_) {\n        return {};\n    },\n    toJSON (_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial (_) {\n        const message = createBaseRemoveParticipantResponse();\n        return message;\n    }\n};\nfunction createBaseMuteRoomTrackRequest() {\n    return {\n        room: \"\",\n        identity: \"\",\n        trackSid: \"\",\n        muted: false\n    };\n}\nexports.MuteRoomTrackRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.identity !== undefined && message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        if (message.trackSid !== undefined && message.trackSid !== \"\") {\n            writer.uint32(26).string(message.trackSid);\n        }\n        if (message.muted === true) {\n            writer.uint32(32).bool(message.muted);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMuteRoomTrackRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                case 3:\n                    message.trackSid = reader.string();\n                    break;\n                case 4:\n                    message.muted = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\",\n            trackSid: isSet(object.trackSid) ? String(object.trackSid) : \"\",\n            muted: isSet(object.muted) ? Boolean(object.muted) : false\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.identity !== undefined && (obj.identity = message.identity);\n        message.trackSid !== undefined && (obj.trackSid = message.trackSid);\n        message.muted !== undefined && (obj.muted = message.muted);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d;\n        const message = createBaseMuteRoomTrackRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        message.trackSid = (_c = object.trackSid) !== null && _c !== void 0 ? _c : \"\";\n        message.muted = (_d = object.muted) !== null && _d !== void 0 ? _d : false;\n        return message;\n    }\n};\nfunction createBaseMuteRoomTrackResponse() {\n    return {\n        track: undefined\n    };\n}\nexports.MuteRoomTrackResponse = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.track !== undefined) {\n            livekit_models_1.TrackInfo.encode(message.track, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMuteRoomTrackResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.track = livekit_models_1.TrackInfo.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            track: isSet(object.track) ? livekit_models_1.TrackInfo.fromJSON(object.track) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.track !== undefined && (obj.track = message.track ? livekit_models_1.TrackInfo.toJSON(message.track) : undefined);\n        return obj;\n    },\n    fromPartial (object) {\n        const message = createBaseMuteRoomTrackResponse();\n        message.track = object.track !== undefined && object.track !== null ? livekit_models_1.TrackInfo.fromPartial(object.track) : undefined;\n        return message;\n    }\n};\nfunction createBaseUpdateParticipantRequest() {\n    return {\n        room: \"\",\n        identity: \"\",\n        metadata: \"\",\n        permission: undefined,\n        name: \"\"\n    };\n}\nexports.UpdateParticipantRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.identity !== undefined && message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        if (message.metadata !== undefined && message.metadata !== \"\") {\n            writer.uint32(26).string(message.metadata);\n        }\n        if (message.permission !== undefined) {\n            livekit_models_1.ParticipantPermission.encode(message.permission, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.name !== undefined && message.name !== \"\") {\n            writer.uint32(42).string(message.name);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateParticipantRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                case 3:\n                    message.metadata = reader.string();\n                    break;\n                case 4:\n                    message.permission = livekit_models_1.ParticipantPermission.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.name = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\",\n            metadata: isSet(object.metadata) ? String(object.metadata) : \"\",\n            permission: isSet(object.permission) ? livekit_models_1.ParticipantPermission.fromJSON(object.permission) : undefined,\n            name: isSet(object.name) ? String(object.name) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.identity !== undefined && (obj.identity = message.identity);\n        message.metadata !== undefined && (obj.metadata = message.metadata);\n        message.permission !== undefined && (obj.permission = message.permission ? livekit_models_1.ParticipantPermission.toJSON(message.permission) : undefined);\n        message.name !== undefined && (obj.name = message.name);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d;\n        const message = createBaseUpdateParticipantRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        message.metadata = (_c = object.metadata) !== null && _c !== void 0 ? _c : \"\";\n        message.permission = object.permission !== undefined && object.permission !== null ? livekit_models_1.ParticipantPermission.fromPartial(object.permission) : undefined;\n        message.name = (_d = object.name) !== null && _d !== void 0 ? _d : \"\";\n        return message;\n    }\n};\nfunction createBaseUpdateSubscriptionsRequest() {\n    return {\n        room: \"\",\n        identity: \"\",\n        trackSids: [],\n        subscribe: false,\n        participantTracks: []\n    };\n}\nexports.UpdateSubscriptionsRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.identity !== undefined && message.identity !== \"\") {\n            writer.uint32(18).string(message.identity);\n        }\n        if (message.trackSids !== undefined && message.trackSids.length !== 0) {\n            for (const v of message.trackSids){\n                writer.uint32(26).string(v);\n            }\n        }\n        if (message.subscribe === true) {\n            writer.uint32(32).bool(message.subscribe);\n        }\n        if (message.participantTracks !== undefined && message.participantTracks.length !== 0) {\n            for (const v of message.participantTracks){\n                livekit_models_1.ParticipantTracks.encode(v, writer.uint32(42).fork()).ldelim();\n            }\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateSubscriptionsRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.identity = reader.string();\n                    break;\n                case 3:\n                    message.trackSids.push(reader.string());\n                    break;\n                case 4:\n                    message.subscribe = reader.bool();\n                    break;\n                case 5:\n                    message.participantTracks.push(livekit_models_1.ParticipantTracks.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            identity: isSet(object.identity) ? String(object.identity) : \"\",\n            trackSids: Array.isArray(object === null || object === void 0 ? void 0 : object.trackSids) ? object.trackSids.map((e)=>String(e)) : [],\n            subscribe: isSet(object.subscribe) ? Boolean(object.subscribe) : false,\n            participantTracks: Array.isArray(object === null || object === void 0 ? void 0 : object.participantTracks) ? object.participantTracks.map((e)=>livekit_models_1.ParticipantTracks.fromJSON(e)) : []\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.identity !== undefined && (obj.identity = message.identity);\n        if (message.trackSids) {\n            obj.trackSids = message.trackSids.map((e)=>e);\n        } else {\n            obj.trackSids = [];\n        }\n        message.subscribe !== undefined && (obj.subscribe = message.subscribe);\n        if (message.participantTracks) {\n            obj.participantTracks = message.participantTracks.map((e)=>e ? livekit_models_1.ParticipantTracks.toJSON(e) : undefined);\n        } else {\n            obj.participantTracks = [];\n        }\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e;\n        const message = createBaseUpdateSubscriptionsRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.identity = (_b = object.identity) !== null && _b !== void 0 ? _b : \"\";\n        message.trackSids = ((_c = object.trackSids) === null || _c === void 0 ? void 0 : _c.map((e)=>e)) || [];\n        message.subscribe = (_d = object.subscribe) !== null && _d !== void 0 ? _d : false;\n        message.participantTracks = ((_e = object.participantTracks) === null || _e === void 0 ? void 0 : _e.map((e)=>livekit_models_1.ParticipantTracks.fromPartial(e))) || [];\n        return message;\n    }\n};\nfunction createBaseUpdateSubscriptionsResponse() {\n    return {};\n}\nexports.UpdateSubscriptionsResponse = {\n    encode (_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateSubscriptionsResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (_) {\n        return {};\n    },\n    toJSON (_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial (_) {\n        const message = createBaseUpdateSubscriptionsResponse();\n        return message;\n    }\n};\nfunction createBaseSendDataRequest() {\n    return {\n        room: \"\",\n        data: new Uint8Array(),\n        kind: 0,\n        destinationSids: [],\n        destinationIdentities: [],\n        topic: undefined\n    };\n}\nexports.SendDataRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.data !== undefined && message.data.length !== 0) {\n            writer.uint32(18).bytes(message.data);\n        }\n        if (message.kind !== undefined && message.kind !== 0) {\n            writer.uint32(24).int32(message.kind);\n        }\n        if (message.destinationSids !== undefined && message.destinationSids.length !== 0) {\n            for (const v of message.destinationSids){\n                writer.uint32(34).string(v);\n            }\n        }\n        if (message.destinationIdentities !== undefined && message.destinationIdentities.length !== 0) {\n            for (const v of message.destinationIdentities){\n                writer.uint32(50).string(v);\n            }\n        }\n        if (message.topic !== undefined) {\n            writer.uint32(42).string(message.topic);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSendDataRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.data = reader.bytes();\n                    break;\n                case 3:\n                    message.kind = reader.int32();\n                    break;\n                case 4:\n                    message.destinationSids.push(reader.string());\n                    break;\n                case 6:\n                    message.destinationIdentities.push(reader.string());\n                    break;\n                case 5:\n                    message.topic = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(),\n            kind: isSet(object.kind) ? livekit_models_1.dataPacket_KindFromJSON(object.kind) : 0,\n            destinationSids: Array.isArray(object === null || object === void 0 ? void 0 : object.destinationSids) ? object.destinationSids.map((e)=>String(e)) : [],\n            destinationIdentities: Array.isArray(object === null || object === void 0 ? void 0 : object.destinationIdentities) ? object.destinationIdentities.map((e)=>String(e)) : [],\n            topic: isSet(object.topic) ? String(object.topic) : undefined\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n        message.kind !== undefined && (obj.kind = livekit_models_1.dataPacket_KindToJSON(message.kind));\n        if (message.destinationSids) {\n            obj.destinationSids = message.destinationSids.map((e)=>e);\n        } else {\n            obj.destinationSids = [];\n        }\n        if (message.destinationIdentities) {\n            obj.destinationIdentities = message.destinationIdentities.map((e)=>e);\n        } else {\n            obj.destinationIdentities = [];\n        }\n        message.topic !== undefined && (obj.topic = message.topic);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d, _e, _f;\n        const message = createBaseSendDataRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.data = (_b = object.data) !== null && _b !== void 0 ? _b : new Uint8Array();\n        message.kind = (_c = object.kind) !== null && _c !== void 0 ? _c : 0;\n        message.destinationSids = ((_d = object.destinationSids) === null || _d === void 0 ? void 0 : _d.map((e)=>e)) || [];\n        message.destinationIdentities = ((_e = object.destinationIdentities) === null || _e === void 0 ? void 0 : _e.map((e)=>e)) || [];\n        message.topic = (_f = object.topic) !== null && _f !== void 0 ? _f : undefined;\n        return message;\n    }\n};\nfunction createBaseSendDataResponse() {\n    return {};\n}\nexports.SendDataResponse = {\n    encode (_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSendDataResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (_) {\n        return {};\n    },\n    toJSON (_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial (_) {\n        const message = createBaseSendDataResponse();\n        return message;\n    }\n};\nfunction createBaseUpdateRoomMetadataRequest() {\n    return {\n        room: \"\",\n        metadata: \"\"\n    };\n}\nexports.UpdateRoomMetadataRequest = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.room !== undefined && message.room !== \"\") {\n            writer.uint32(10).string(message.room);\n        }\n        if (message.metadata !== undefined && message.metadata !== \"\") {\n            writer.uint32(18).string(message.metadata);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpdateRoomMetadataRequest();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.room = reader.string();\n                    break;\n                case 2:\n                    message.metadata = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            room: isSet(object.room) ? String(object.room) : \"\",\n            metadata: isSet(object.metadata) ? String(object.metadata) : \"\"\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.room !== undefined && (obj.room = message.room);\n        message.metadata !== undefined && (obj.metadata = message.metadata);\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b;\n        const message = createBaseUpdateRoomMetadataRequest();\n        message.room = (_a = object.room) !== null && _a !== void 0 ? _a : \"\";\n        message.metadata = (_b = object.metadata) !== null && _b !== void 0 ? _b : \"\";\n        return message;\n    }\n};\nvar globalThis = (()=>{\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (false) {}\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction bytesFromBase64(b64) {\n    if (globalThis.Buffer) {\n        return Uint8Array.from(globalThis.Buffer.from(b64, \"base64\"));\n    } else {\n        const bin = globalThis.atob(b64);\n        const arr = new Uint8Array(bin.length);\n        for(let i = 0; i < bin.length; ++i){\n            arr[i] = bin.charCodeAt(i);\n        }\n        return arr;\n    }\n}\nfunction base64FromBytes(arr) {\n    if (globalThis.Buffer) {\n        return globalThis.Buffer.from(arr).toString(\"base64\");\n    } else {\n        const bin = [];\n        arr.forEach((byte)=>{\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n} //# sourceMappingURL=livekit_room.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_room.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_webhook.js":
/*!***********************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/dist/proto/livekit_webhook.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WebhookEvent = exports.protobufPackage = void 0;\n/* eslint-disable */ const long_1 = __importDefault(__webpack_require__(/*! long */ \"(action-browser)/./node_modules/long/umd/index.js\"));\nconst minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ \"(action-browser)/./node_modules/protobufjs/minimal.js\"));\nconst livekit_egress_1 = __webpack_require__(/*! ./livekit_egress */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_egress.js\");\nconst livekit_ingress_1 = __webpack_require__(/*! ./livekit_ingress */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_ingress.js\");\nconst livekit_models_1 = __webpack_require__(/*! ./livekit_models */ \"(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_models.js\");\nexports.protobufPackage = \"livekit\";\nfunction createBaseWebhookEvent() {\n    return {\n        event: \"\",\n        room: undefined,\n        participant: undefined,\n        egressInfo: undefined,\n        ingressInfo: undefined,\n        track: undefined,\n        id: \"\",\n        createdAt: 0,\n        numDropped: 0\n    };\n}\nexports.WebhookEvent = {\n    encode (message, writer = minimal_1.default.Writer.create()) {\n        if (message.event !== undefined && message.event !== \"\") {\n            writer.uint32(10).string(message.event);\n        }\n        if (message.room !== undefined) {\n            livekit_models_1.Room.encode(message.room, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.participant !== undefined) {\n            livekit_models_1.ParticipantInfo.encode(message.participant, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.egressInfo !== undefined) {\n            livekit_egress_1.EgressInfo.encode(message.egressInfo, writer.uint32(74).fork()).ldelim();\n        }\n        if (message.ingressInfo !== undefined) {\n            livekit_ingress_1.IngressInfo.encode(message.ingressInfo, writer.uint32(82).fork()).ldelim();\n        }\n        if (message.track !== undefined) {\n            livekit_models_1.TrackInfo.encode(message.track, writer.uint32(66).fork()).ldelim();\n        }\n        if (message.id !== undefined && message.id !== \"\") {\n            writer.uint32(50).string(message.id);\n        }\n        if (message.createdAt !== undefined && message.createdAt !== 0) {\n            writer.uint32(56).int64(message.createdAt);\n        }\n        if (message.numDropped !== undefined && message.numDropped !== 0) {\n            writer.uint32(88).int32(message.numDropped);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseWebhookEvent();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.event = reader.string();\n                    break;\n                case 2:\n                    message.room = livekit_models_1.Room.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.participant = livekit_models_1.ParticipantInfo.decode(reader, reader.uint32());\n                    break;\n                case 9:\n                    message.egressInfo = livekit_egress_1.EgressInfo.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.ingressInfo = livekit_ingress_1.IngressInfo.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.track = livekit_models_1.TrackInfo.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.id = reader.string();\n                    break;\n                case 7:\n                    message.createdAt = longToNumber(reader.int64());\n                    break;\n                case 11:\n                    message.numDropped = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON (object) {\n        return {\n            event: isSet(object.event) ? String(object.event) : \"\",\n            room: isSet(object.room) ? livekit_models_1.Room.fromJSON(object.room) : undefined,\n            participant: isSet(object.participant) ? livekit_models_1.ParticipantInfo.fromJSON(object.participant) : undefined,\n            egressInfo: isSet(object.egressInfo) ? livekit_egress_1.EgressInfo.fromJSON(object.egressInfo) : undefined,\n            ingressInfo: isSet(object.ingressInfo) ? livekit_ingress_1.IngressInfo.fromJSON(object.ingressInfo) : undefined,\n            track: isSet(object.track) ? livekit_models_1.TrackInfo.fromJSON(object.track) : undefined,\n            id: isSet(object.id) ? String(object.id) : \"\",\n            createdAt: isSet(object.createdAt) ? Number(object.createdAt) : 0,\n            numDropped: isSet(object.numDropped) ? Number(object.numDropped) : 0\n        };\n    },\n    toJSON (message) {\n        const obj = {};\n        message.event !== undefined && (obj.event = message.event);\n        message.room !== undefined && (obj.room = message.room ? livekit_models_1.Room.toJSON(message.room) : undefined);\n        message.participant !== undefined && (obj.participant = message.participant ? livekit_models_1.ParticipantInfo.toJSON(message.participant) : undefined);\n        message.egressInfo !== undefined && (obj.egressInfo = message.egressInfo ? livekit_egress_1.EgressInfo.toJSON(message.egressInfo) : undefined);\n        message.ingressInfo !== undefined && (obj.ingressInfo = message.ingressInfo ? livekit_ingress_1.IngressInfo.toJSON(message.ingressInfo) : undefined);\n        message.track !== undefined && (obj.track = message.track ? livekit_models_1.TrackInfo.toJSON(message.track) : undefined);\n        message.id !== undefined && (obj.id = message.id);\n        message.createdAt !== undefined && (obj.createdAt = Math.round(message.createdAt));\n        message.numDropped !== undefined && (obj.numDropped = Math.round(message.numDropped));\n        return obj;\n    },\n    fromPartial (object) {\n        var _a, _b, _c, _d;\n        const message = createBaseWebhookEvent();\n        message.event = (_a = object.event) !== null && _a !== void 0 ? _a : \"\";\n        message.room = object.room !== undefined && object.room !== null ? livekit_models_1.Room.fromPartial(object.room) : undefined;\n        message.participant = object.participant !== undefined && object.participant !== null ? livekit_models_1.ParticipantInfo.fromPartial(object.participant) : undefined;\n        message.egressInfo = object.egressInfo !== undefined && object.egressInfo !== null ? livekit_egress_1.EgressInfo.fromPartial(object.egressInfo) : undefined;\n        message.ingressInfo = object.ingressInfo !== undefined && object.ingressInfo !== null ? livekit_ingress_1.IngressInfo.fromPartial(object.ingressInfo) : undefined;\n        message.track = object.track !== undefined && object.track !== null ? livekit_models_1.TrackInfo.fromPartial(object.track) : undefined;\n        message.id = (_b = object.id) !== null && _b !== void 0 ? _b : \"\";\n        message.createdAt = (_c = object.createdAt) !== null && _c !== void 0 ? _c : 0;\n        message.numDropped = (_d = object.numDropped) !== null && _d !== void 0 ? _d : 0;\n        return message;\n    }\n};\nvar globalThis = (()=>{\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (false) {}\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    throw \"Unable to locate global object\";\n})();\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n} //# sourceMappingURL=livekit_webhook.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/dist/proto/livekit_webhook.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/node_modules/camelcase-keys/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/node_modules/camelcase-keys/index.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst mapObj = __webpack_require__(/*! map-obj */ \"(action-browser)/./node_modules/map-obj/index.js\");\nconst camelCase = __webpack_require__(/*! camelcase */ \"(action-browser)/./node_modules/livekit-server-sdk/node_modules/camelcase/index.js\");\nconst QuickLru = __webpack_require__(/*! quick-lru */ \"(action-browser)/./node_modules/livekit-server-sdk/node_modules/quick-lru/index.js\");\nconst has = (array, key)=>array.some((x)=>{\n        if (typeof x === \"string\") {\n            return x === key;\n        }\n        x.lastIndex = 0;\n        return x.test(key);\n    });\nconst cache = new QuickLru({\n    maxSize: 100000\n});\n// Reproduces behavior from `map-obj`\nconst isObject = (value)=>typeof value === \"object\" && value !== null && !(value instanceof RegExp) && !(value instanceof Error) && !(value instanceof Date);\nconst camelCaseConvert = (input, options)=>{\n    if (!isObject(input)) {\n        return input;\n    }\n    options = {\n        deep: false,\n        pascalCase: false,\n        ...options\n    };\n    const { exclude, pascalCase, stopPaths, deep } = options;\n    const stopPathsSet = new Set(stopPaths);\n    const makeMapper = (parentPath)=>(key, value)=>{\n            if (deep && isObject(value)) {\n                const path = parentPath === undefined ? key : `${parentPath}.${key}`;\n                if (!stopPathsSet.has(path)) {\n                    value = mapObj(value, makeMapper(path));\n                }\n            }\n            if (!(exclude && has(exclude, key))) {\n                const cacheKey = pascalCase ? `${key}_` : key;\n                if (cache.has(cacheKey)) {\n                    key = cache.get(cacheKey);\n                } else {\n                    const returnValue = camelCase(key, {\n                        pascalCase,\n                        locale: false\n                    });\n                    if (key.length < 100) {\n                        cache.set(cacheKey, returnValue);\n                    }\n                    key = returnValue;\n                }\n            }\n            return [\n                key,\n                value\n            ];\n        };\n    return mapObj(input, makeMapper(undefined));\n};\nmodule.exports = (input, options)=>{\n    if (Array.isArray(input)) {\n        return Object.keys(input).map((key)=>camelCaseConvert(input[key], options));\n    }\n    return camelCaseConvert(input, options);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9saXZla2l0LXNlcnZlci1zZGsvbm9kZV9tb2R1bGVzL2NhbWVsY2FzZS1rZXlzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDdkIsTUFBTUMsWUFBWUQsbUJBQU9BLENBQUM7QUFDMUIsTUFBTUUsV0FBV0YsbUJBQU9BLENBQUM7QUFFekIsTUFBTUcsTUFBTSxDQUFDQyxPQUFPQyxNQUFRRCxNQUFNRSxJQUFJLENBQUNDLENBQUFBO1FBQ3RDLElBQUksT0FBT0EsTUFBTSxVQUFVO1lBQzFCLE9BQU9BLE1BQU1GO1FBQ2Q7UUFFQUUsRUFBRUMsU0FBUyxHQUFHO1FBQ2QsT0FBT0QsRUFBRUUsSUFBSSxDQUFDSjtJQUNmO0FBRUEsTUFBTUssUUFBUSxJQUFJUixTQUFTO0lBQUNTLFNBQVM7QUFBTTtBQUUzQyxxQ0FBcUM7QUFDckMsTUFBTUMsV0FBV0MsQ0FBQUEsUUFDaEIsT0FBT0EsVUFBVSxZQUNqQkEsVUFBVSxRQUNWLENBQUVBLENBQUFBLGlCQUFpQkMsTUFBSyxLQUN4QixDQUFFRCxDQUFBQSxpQkFBaUJFLEtBQUksS0FDdkIsQ0FBRUYsQ0FBQUEsaUJBQWlCRyxJQUFHO0FBRXZCLE1BQU1DLG1CQUFtQixDQUFDQyxPQUFPQztJQUNoQyxJQUFJLENBQUNQLFNBQVNNLFFBQVE7UUFDckIsT0FBT0E7SUFDUjtJQUVBQyxVQUFVO1FBQ1RDLE1BQU07UUFDTkMsWUFBWTtRQUNaLEdBQUdGLE9BQU87SUFDWDtJQUVBLE1BQU0sRUFBQ0csT0FBTyxFQUFFRCxVQUFVLEVBQUVFLFNBQVMsRUFBRUgsSUFBSSxFQUFDLEdBQUdEO0lBRS9DLE1BQU1LLGVBQWUsSUFBSUMsSUFBSUY7SUFFN0IsTUFBTUcsYUFBYUMsQ0FBQUEsYUFBYyxDQUFDdEIsS0FBS1E7WUFDdEMsSUFBSU8sUUFBUVIsU0FBU0MsUUFBUTtnQkFDNUIsTUFBTWUsT0FBT0QsZUFBZUUsWUFBWXhCLE1BQU0sQ0FBQyxFQUFFc0IsV0FBVyxDQUFDLEVBQUV0QixJQUFJLENBQUM7Z0JBRXBFLElBQUksQ0FBQ21CLGFBQWFyQixHQUFHLENBQUN5QixPQUFPO29CQUM1QmYsUUFBUWQsT0FBT2MsT0FBT2EsV0FBV0U7Z0JBQ2xDO1lBQ0Q7WUFFQSxJQUFJLENBQUVOLENBQUFBLFdBQVduQixJQUFJbUIsU0FBU2pCLElBQUcsR0FBSTtnQkFDcEMsTUFBTXlCLFdBQVdULGFBQWEsQ0FBQyxFQUFFaEIsSUFBSSxDQUFDLENBQUMsR0FBR0E7Z0JBRTFDLElBQUlLLE1BQU1QLEdBQUcsQ0FBQzJCLFdBQVc7b0JBQ3hCekIsTUFBTUssTUFBTXFCLEdBQUcsQ0FBQ0Q7Z0JBQ2pCLE9BQU87b0JBQ04sTUFBTUUsY0FBYy9CLFVBQVVJLEtBQUs7d0JBQUNnQjt3QkFBWVksUUFBUTtvQkFBSztvQkFFN0QsSUFBSTVCLElBQUk2QixNQUFNLEdBQUcsS0FBSzt3QkFDckJ4QixNQUFNeUIsR0FBRyxDQUFDTCxVQUFVRTtvQkFDckI7b0JBRUEzQixNQUFNMkI7Z0JBQ1A7WUFDRDtZQUVBLE9BQU87Z0JBQUMzQjtnQkFBS1E7YUFBTTtRQUNwQjtJQUVBLE9BQU9kLE9BQU9tQixPQUFPUSxXQUFXRztBQUNqQztBQUVBTyxPQUFPQyxPQUFPLEdBQUcsQ0FBQ25CLE9BQU9DO0lBQ3hCLElBQUltQixNQUFNQyxPQUFPLENBQUNyQixRQUFRO1FBQ3pCLE9BQU9zQixPQUFPQyxJQUFJLENBQUN2QixPQUFPd0IsR0FBRyxDQUFDckMsQ0FBQUEsTUFBT1ksaUJBQWlCQyxLQUFLLENBQUNiLElBQUksRUFBRWM7SUFDbkU7SUFFQSxPQUFPRixpQkFBaUJDLE9BQU9DO0FBQ2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RyZWFtaW5nLXZpZGVvLy4vbm9kZV9tb2R1bGVzL2xpdmVraXQtc2VydmVyLXNkay9ub2RlX21vZHVsZXMvY2FtZWxjYXNlLWtleXMvaW5kZXguanM/YzZiYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBtYXBPYmogPSByZXF1aXJlKCdtYXAtb2JqJyk7XG5jb25zdCBjYW1lbENhc2UgPSByZXF1aXJlKCdjYW1lbGNhc2UnKTtcbmNvbnN0IFF1aWNrTHJ1ID0gcmVxdWlyZSgncXVpY2stbHJ1Jyk7XG5cbmNvbnN0IGhhcyA9IChhcnJheSwga2V5KSA9PiBhcnJheS5zb21lKHggPT4ge1xuXHRpZiAodHlwZW9mIHggPT09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuIHggPT09IGtleTtcblx0fVxuXG5cdHgubGFzdEluZGV4ID0gMDtcblx0cmV0dXJuIHgudGVzdChrZXkpO1xufSk7XG5cbmNvbnN0IGNhY2hlID0gbmV3IFF1aWNrTHJ1KHttYXhTaXplOiAxMDAwMDB9KTtcblxuLy8gUmVwcm9kdWNlcyBiZWhhdmlvciBmcm9tIGBtYXAtb2JqYFxuY29uc3QgaXNPYmplY3QgPSB2YWx1ZSA9PlxuXHR0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG5cdHZhbHVlICE9PSBudWxsICYmXG5cdCEodmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApICYmXG5cdCEodmFsdWUgaW5zdGFuY2VvZiBFcnJvcikgJiZcblx0ISh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpO1xuXG5jb25zdCBjYW1lbENhc2VDb252ZXJ0ID0gKGlucHV0LCBvcHRpb25zKSA9PiB7XG5cdGlmICghaXNPYmplY3QoaW5wdXQpKSB7XG5cdFx0cmV0dXJuIGlucHV0O1xuXHR9XG5cblx0b3B0aW9ucyA9IHtcblx0XHRkZWVwOiBmYWxzZSxcblx0XHRwYXNjYWxDYXNlOiBmYWxzZSxcblx0XHQuLi5vcHRpb25zXG5cdH07XG5cblx0Y29uc3Qge2V4Y2x1ZGUsIHBhc2NhbENhc2UsIHN0b3BQYXRocywgZGVlcH0gPSBvcHRpb25zO1xuXG5cdGNvbnN0IHN0b3BQYXRoc1NldCA9IG5ldyBTZXQoc3RvcFBhdGhzKTtcblxuXHRjb25zdCBtYWtlTWFwcGVyID0gcGFyZW50UGF0aCA9PiAoa2V5LCB2YWx1ZSkgPT4ge1xuXHRcdGlmIChkZWVwICYmIGlzT2JqZWN0KHZhbHVlKSkge1xuXHRcdFx0Y29uc3QgcGF0aCA9IHBhcmVudFBhdGggPT09IHVuZGVmaW5lZCA/IGtleSA6IGAke3BhcmVudFBhdGh9LiR7a2V5fWA7XG5cblx0XHRcdGlmICghc3RvcFBhdGhzU2V0LmhhcyhwYXRoKSkge1xuXHRcdFx0XHR2YWx1ZSA9IG1hcE9iaih2YWx1ZSwgbWFrZU1hcHBlcihwYXRoKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCEoZXhjbHVkZSAmJiBoYXMoZXhjbHVkZSwga2V5KSkpIHtcblx0XHRcdGNvbnN0IGNhY2hlS2V5ID0gcGFzY2FsQ2FzZSA/IGAke2tleX1fYCA6IGtleTtcblxuXHRcdFx0aWYgKGNhY2hlLmhhcyhjYWNoZUtleSkpIHtcblx0XHRcdFx0a2V5ID0gY2FjaGUuZ2V0KGNhY2hlS2V5KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnN0IHJldHVyblZhbHVlID0gY2FtZWxDYXNlKGtleSwge3Bhc2NhbENhc2UsIGxvY2FsZTogZmFsc2V9KTtcblxuXHRcdFx0XHRpZiAoa2V5Lmxlbmd0aCA8IDEwMCkgeyAvLyBQcmV2ZW50IGFidXNlXG5cdFx0XHRcdFx0Y2FjaGUuc2V0KGNhY2hlS2V5LCByZXR1cm5WYWx1ZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRrZXkgPSByZXR1cm5WYWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gW2tleSwgdmFsdWVdO1xuXHR9O1xuXG5cdHJldHVybiBtYXBPYmooaW5wdXQsIG1ha2VNYXBwZXIodW5kZWZpbmVkKSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IChpbnB1dCwgb3B0aW9ucykgPT4ge1xuXHRpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcblx0XHRyZXR1cm4gT2JqZWN0LmtleXMoaW5wdXQpLm1hcChrZXkgPT4gY2FtZWxDYXNlQ29udmVydChpbnB1dFtrZXldLCBvcHRpb25zKSk7XG5cdH1cblxuXHRyZXR1cm4gY2FtZWxDYXNlQ29udmVydChpbnB1dCwgb3B0aW9ucyk7XG59O1xuIl0sIm5hbWVzIjpbIm1hcE9iaiIsInJlcXVpcmUiLCJjYW1lbENhc2UiLCJRdWlja0xydSIsImhhcyIsImFycmF5Iiwia2V5Iiwic29tZSIsIngiLCJsYXN0SW5kZXgiLCJ0ZXN0IiwiY2FjaGUiLCJtYXhTaXplIiwiaXNPYmplY3QiLCJ2YWx1ZSIsIlJlZ0V4cCIsIkVycm9yIiwiRGF0ZSIsImNhbWVsQ2FzZUNvbnZlcnQiLCJpbnB1dCIsIm9wdGlvbnMiLCJkZWVwIiwicGFzY2FsQ2FzZSIsImV4Y2x1ZGUiLCJzdG9wUGF0aHMiLCJzdG9wUGF0aHNTZXQiLCJTZXQiLCJtYWtlTWFwcGVyIiwicGFyZW50UGF0aCIsInBhdGgiLCJ1bmRlZmluZWQiLCJjYWNoZUtleSIsImdldCIsInJldHVyblZhbHVlIiwibG9jYWxlIiwibGVuZ3RoIiwic2V0IiwibW9kdWxlIiwiZXhwb3J0cyIsIkFycmF5IiwiaXNBcnJheSIsIk9iamVjdCIsImtleXMiLCJtYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/node_modules/camelcase-keys/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/node_modules/camelcase/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/node_modules/camelcase/index.js ***!
  \*************************************************************************/
/***/ ((module) => {

eval("\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\nconst LEADING_SEPARATORS = new RegExp(\"^\" + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, \"gu\");\nconst NUMBERS_AND_IDENTIFIER = new RegExp(\"\\\\d+\" + IDENTIFIER.source, \"gu\");\nconst preserveCamelCase = (string, toLowerCase, toUpperCase)=>{\n    let isLastCharLower = false;\n    let isLastCharUpper = false;\n    let isLastLastCharUpper = false;\n    for(let i = 0; i < string.length; i++){\n        const character = string[i];\n        if (isLastCharLower && UPPERCASE.test(character)) {\n            string = string.slice(0, i) + \"-\" + string.slice(i);\n            isLastCharLower = false;\n            isLastLastCharUpper = isLastCharUpper;\n            isLastCharUpper = true;\n            i++;\n        } else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {\n            string = string.slice(0, i - 1) + \"-\" + string.slice(i - 1);\n            isLastLastCharUpper = isLastCharUpper;\n            isLastCharUpper = false;\n            isLastCharLower = true;\n        } else {\n            isLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n            isLastLastCharUpper = isLastCharUpper;\n            isLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n        }\n    }\n    return string;\n};\nconst preserveConsecutiveUppercase = (input, toLowerCase)=>{\n    LEADING_CAPITAL.lastIndex = 0;\n    return input.replace(LEADING_CAPITAL, (m1)=>toLowerCase(m1));\n};\nconst postProcess = (input, toUpperCase)=>{\n    SEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n    NUMBERS_AND_IDENTIFIER.lastIndex = 0;\n    return input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier)=>toUpperCase(identifier)).replace(NUMBERS_AND_IDENTIFIER, (m)=>toUpperCase(m));\n};\nconst camelCase = (input, options)=>{\n    if (!(typeof input === \"string\" || Array.isArray(input))) {\n        throw new TypeError(\"Expected the input to be `string | string[]`\");\n    }\n    options = {\n        pascalCase: false,\n        preserveConsecutiveUppercase: false,\n        ...options\n    };\n    if (Array.isArray(input)) {\n        input = input.map((x)=>x.trim()).filter((x)=>x.length).join(\"-\");\n    } else {\n        input = input.trim();\n    }\n    if (input.length === 0) {\n        return \"\";\n    }\n    const toLowerCase = options.locale === false ? (string)=>string.toLowerCase() : (string)=>string.toLocaleLowerCase(options.locale);\n    const toUpperCase = options.locale === false ? (string)=>string.toUpperCase() : (string)=>string.toLocaleUpperCase(options.locale);\n    if (input.length === 1) {\n        return options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n    }\n    const hasUpperCase = input !== toLowerCase(input);\n    if (hasUpperCase) {\n        input = preserveCamelCase(input, toLowerCase, toUpperCase);\n    }\n    input = input.replace(LEADING_SEPARATORS, \"\");\n    if (options.preserveConsecutiveUppercase) {\n        input = preserveConsecutiveUppercase(input, toLowerCase);\n    } else {\n        input = toLowerCase(input);\n    }\n    if (options.pascalCase) {\n        input = toUpperCase(input.charAt(0)) + input.slice(1);\n    }\n    return postProcess(input, toUpperCase);\n};\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports[\"default\"] = camelCase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/node_modules/camelcase/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/livekit-server-sdk/node_modules/quick-lru/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/livekit-server-sdk/node_modules/quick-lru/index.js ***!
  \*************************************************************************/
/***/ ((module) => {

eval("\nclass QuickLRU {\n    constructor(options = {}){\n        if (!(options.maxSize && options.maxSize > 0)) {\n            throw new TypeError(\"`maxSize` must be a number greater than 0\");\n        }\n        this.maxSize = options.maxSize;\n        this.onEviction = options.onEviction;\n        this.cache = new Map();\n        this.oldCache = new Map();\n        this._size = 0;\n    }\n    _set(key, value) {\n        this.cache.set(key, value);\n        this._size++;\n        if (this._size >= this.maxSize) {\n            this._size = 0;\n            if (typeof this.onEviction === \"function\") {\n                for (const [key, value] of this.oldCache.entries()){\n                    this.onEviction(key, value);\n                }\n            }\n            this.oldCache = this.cache;\n            this.cache = new Map();\n        }\n    }\n    get(key) {\n        if (this.cache.has(key)) {\n            return this.cache.get(key);\n        }\n        if (this.oldCache.has(key)) {\n            const value = this.oldCache.get(key);\n            this.oldCache.delete(key);\n            this._set(key, value);\n            return value;\n        }\n    }\n    set(key, value) {\n        if (this.cache.has(key)) {\n            this.cache.set(key, value);\n        } else {\n            this._set(key, value);\n        }\n        return this;\n    }\n    has(key) {\n        return this.cache.has(key) || this.oldCache.has(key);\n    }\n    peek(key) {\n        if (this.cache.has(key)) {\n            return this.cache.get(key);\n        }\n        if (this.oldCache.has(key)) {\n            return this.oldCache.get(key);\n        }\n    }\n    delete(key) {\n        const deleted = this.cache.delete(key);\n        if (deleted) {\n            this._size--;\n        }\n        return this.oldCache.delete(key) || deleted;\n    }\n    clear() {\n        this.cache.clear();\n        this.oldCache.clear();\n        this._size = 0;\n    }\n    *keys() {\n        for (const [key] of this){\n            yield key;\n        }\n    }\n    *values() {\n        for (const [, value] of this){\n            yield value;\n        }\n    }\n    *[Symbol.iterator]() {\n        for (const item of this.cache){\n            yield item;\n        }\n        for (const item of this.oldCache){\n            const [key] = item;\n            if (!this.cache.has(key)) {\n                yield item;\n            }\n        }\n    }\n    get size() {\n        let oldCacheSize = 0;\n        for (const key of this.oldCache.keys()){\n            if (!this.cache.has(key)) {\n                oldCacheSize++;\n            }\n        }\n        return Math.min(this._size + oldCacheSize, this.maxSize);\n    }\n}\nmodule.exports = QuickLRU;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9saXZla2l0LXNlcnZlci1zZGsvbm9kZV9tb2R1bGVzL3F1aWNrLWxydS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BO0lBQ0xDLFlBQVlDLFVBQVUsQ0FBQyxDQUFDLENBQUU7UUFDekIsSUFBSSxDQUFFQSxDQUFBQSxRQUFRQyxPQUFPLElBQUlELFFBQVFDLE9BQU8sR0FBRyxJQUFJO1lBQzlDLE1BQU0sSUFBSUMsVUFBVTtRQUNyQjtRQUVBLElBQUksQ0FBQ0QsT0FBTyxHQUFHRCxRQUFRQyxPQUFPO1FBQzlCLElBQUksQ0FBQ0UsVUFBVSxHQUFHSCxRQUFRRyxVQUFVO1FBQ3BDLElBQUksQ0FBQ0MsS0FBSyxHQUFHLElBQUlDO1FBQ2pCLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUlEO1FBQ3BCLElBQUksQ0FBQ0UsS0FBSyxHQUFHO0lBQ2Q7SUFFQUMsS0FBS0MsR0FBRyxFQUFFQyxLQUFLLEVBQUU7UUFDaEIsSUFBSSxDQUFDTixLQUFLLENBQUNPLEdBQUcsQ0FBQ0YsS0FBS0M7UUFDcEIsSUFBSSxDQUFDSCxLQUFLO1FBRVYsSUFBSSxJQUFJLENBQUNBLEtBQUssSUFBSSxJQUFJLENBQUNOLE9BQU8sRUFBRTtZQUMvQixJQUFJLENBQUNNLEtBQUssR0FBRztZQUViLElBQUksT0FBTyxJQUFJLENBQUNKLFVBQVUsS0FBSyxZQUFZO2dCQUMxQyxLQUFLLE1BQU0sQ0FBQ00sS0FBS0MsTUFBTSxJQUFJLElBQUksQ0FBQ0osUUFBUSxDQUFDTSxPQUFPLEdBQUk7b0JBQ25ELElBQUksQ0FBQ1QsVUFBVSxDQUFDTSxLQUFLQztnQkFDdEI7WUFDRDtZQUVBLElBQUksQ0FBQ0osUUFBUSxHQUFHLElBQUksQ0FBQ0YsS0FBSztZQUMxQixJQUFJLENBQUNBLEtBQUssR0FBRyxJQUFJQztRQUNsQjtJQUNEO0lBRUFRLElBQUlKLEdBQUcsRUFBRTtRQUNSLElBQUksSUFBSSxDQUFDTCxLQUFLLENBQUNVLEdBQUcsQ0FBQ0wsTUFBTTtZQUN4QixPQUFPLElBQUksQ0FBQ0wsS0FBSyxDQUFDUyxHQUFHLENBQUNKO1FBQ3ZCO1FBRUEsSUFBSSxJQUFJLENBQUNILFFBQVEsQ0FBQ1EsR0FBRyxDQUFDTCxNQUFNO1lBQzNCLE1BQU1DLFFBQVEsSUFBSSxDQUFDSixRQUFRLENBQUNPLEdBQUcsQ0FBQ0o7WUFDaEMsSUFBSSxDQUFDSCxRQUFRLENBQUNTLE1BQU0sQ0FBQ047WUFDckIsSUFBSSxDQUFDRCxJQUFJLENBQUNDLEtBQUtDO1lBQ2YsT0FBT0E7UUFDUjtJQUNEO0lBRUFDLElBQUlGLEdBQUcsRUFBRUMsS0FBSyxFQUFFO1FBQ2YsSUFBSSxJQUFJLENBQUNOLEtBQUssQ0FBQ1UsR0FBRyxDQUFDTCxNQUFNO1lBQ3hCLElBQUksQ0FBQ0wsS0FBSyxDQUFDTyxHQUFHLENBQUNGLEtBQUtDO1FBQ3JCLE9BQU87WUFDTixJQUFJLENBQUNGLElBQUksQ0FBQ0MsS0FBS0M7UUFDaEI7UUFFQSxPQUFPLElBQUk7SUFDWjtJQUVBSSxJQUFJTCxHQUFHLEVBQUU7UUFDUixPQUFPLElBQUksQ0FBQ0wsS0FBSyxDQUFDVSxHQUFHLENBQUNMLFFBQVEsSUFBSSxDQUFDSCxRQUFRLENBQUNRLEdBQUcsQ0FBQ0w7SUFDakQ7SUFFQU8sS0FBS1AsR0FBRyxFQUFFO1FBQ1QsSUFBSSxJQUFJLENBQUNMLEtBQUssQ0FBQ1UsR0FBRyxDQUFDTCxNQUFNO1lBQ3hCLE9BQU8sSUFBSSxDQUFDTCxLQUFLLENBQUNTLEdBQUcsQ0FBQ0o7UUFDdkI7UUFFQSxJQUFJLElBQUksQ0FBQ0gsUUFBUSxDQUFDUSxHQUFHLENBQUNMLE1BQU07WUFDM0IsT0FBTyxJQUFJLENBQUNILFFBQVEsQ0FBQ08sR0FBRyxDQUFDSjtRQUMxQjtJQUNEO0lBRUFNLE9BQU9OLEdBQUcsRUFBRTtRQUNYLE1BQU1RLFVBQVUsSUFBSSxDQUFDYixLQUFLLENBQUNXLE1BQU0sQ0FBQ047UUFDbEMsSUFBSVEsU0FBUztZQUNaLElBQUksQ0FBQ1YsS0FBSztRQUNYO1FBRUEsT0FBTyxJQUFJLENBQUNELFFBQVEsQ0FBQ1MsTUFBTSxDQUFDTixRQUFRUTtJQUNyQztJQUVBQyxRQUFRO1FBQ1AsSUFBSSxDQUFDZCxLQUFLLENBQUNjLEtBQUs7UUFDaEIsSUFBSSxDQUFDWixRQUFRLENBQUNZLEtBQUs7UUFDbkIsSUFBSSxDQUFDWCxLQUFLLEdBQUc7SUFDZDtJQUVBLENBQUVZLE9BQU87UUFDUixLQUFLLE1BQU0sQ0FBQ1YsSUFBSSxJQUFJLElBQUksQ0FBRTtZQUN6QixNQUFNQTtRQUNQO0lBQ0Q7SUFFQSxDQUFFVyxTQUFTO1FBQ1YsS0FBSyxNQUFNLEdBQUdWLE1BQU0sSUFBSSxJQUFJLENBQUU7WUFDN0IsTUFBTUE7UUFDUDtJQUNEO0lBRUEsQ0FBRSxDQUFDVyxPQUFPQyxRQUFRLENBQUMsR0FBRztRQUNyQixLQUFLLE1BQU1DLFFBQVEsSUFBSSxDQUFDbkIsS0FBSyxDQUFFO1lBQzlCLE1BQU1tQjtRQUNQO1FBRUEsS0FBSyxNQUFNQSxRQUFRLElBQUksQ0FBQ2pCLFFBQVEsQ0FBRTtZQUNqQyxNQUFNLENBQUNHLElBQUksR0FBR2M7WUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDbkIsS0FBSyxDQUFDVSxHQUFHLENBQUNMLE1BQU07Z0JBQ3pCLE1BQU1jO1lBQ1A7UUFDRDtJQUNEO0lBRUEsSUFBSUMsT0FBTztRQUNWLElBQUlDLGVBQWU7UUFDbkIsS0FBSyxNQUFNaEIsT0FBTyxJQUFJLENBQUNILFFBQVEsQ0FBQ2EsSUFBSSxHQUFJO1lBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUNmLEtBQUssQ0FBQ1UsR0FBRyxDQUFDTCxNQUFNO2dCQUN6QmdCO1lBQ0Q7UUFDRDtRQUVBLE9BQU9DLEtBQUtDLEdBQUcsQ0FBQyxJQUFJLENBQUNwQixLQUFLLEdBQUdrQixjQUFjLElBQUksQ0FBQ3hCLE9BQU87SUFDeEQ7QUFDRDtBQUVBMkIsT0FBT0MsT0FBTyxHQUFHL0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdHJlYW1pbmctdmlkZW8vLi9ub2RlX21vZHVsZXMvbGl2ZWtpdC1zZXJ2ZXItc2RrL25vZGVfbW9kdWxlcy9xdWljay1scnUvaW5kZXguanM/OTczNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNsYXNzIFF1aWNrTFJVIHtcblx0Y29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG5cdFx0aWYgKCEob3B0aW9ucy5tYXhTaXplICYmIG9wdGlvbnMubWF4U2l6ZSA+IDApKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdgbWF4U2l6ZWAgbXVzdCBiZSBhIG51bWJlciBncmVhdGVyIHRoYW4gMCcpO1xuXHRcdH1cblxuXHRcdHRoaXMubWF4U2l6ZSA9IG9wdGlvbnMubWF4U2l6ZTtcblx0XHR0aGlzLm9uRXZpY3Rpb24gPSBvcHRpb25zLm9uRXZpY3Rpb247XG5cdFx0dGhpcy5jYWNoZSA9IG5ldyBNYXAoKTtcblx0XHR0aGlzLm9sZENhY2hlID0gbmV3IE1hcCgpO1xuXHRcdHRoaXMuX3NpemUgPSAwO1xuXHR9XG5cblx0X3NldChrZXksIHZhbHVlKSB7XG5cdFx0dGhpcy5jYWNoZS5zZXQoa2V5LCB2YWx1ZSk7XG5cdFx0dGhpcy5fc2l6ZSsrO1xuXG5cdFx0aWYgKHRoaXMuX3NpemUgPj0gdGhpcy5tYXhTaXplKSB7XG5cdFx0XHR0aGlzLl9zaXplID0gMDtcblxuXHRcdFx0aWYgKHR5cGVvZiB0aGlzLm9uRXZpY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0Zm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgdGhpcy5vbGRDYWNoZS5lbnRyaWVzKCkpIHtcblx0XHRcdFx0XHR0aGlzLm9uRXZpY3Rpb24oa2V5LCB2YWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5vbGRDYWNoZSA9IHRoaXMuY2FjaGU7XG5cdFx0XHR0aGlzLmNhY2hlID0gbmV3IE1hcCgpO1xuXHRcdH1cblx0fVxuXG5cdGdldChrZXkpIHtcblx0XHRpZiAodGhpcy5jYWNoZS5oYXMoa2V5KSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY2FjaGUuZ2V0KGtleSk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMub2xkQ2FjaGUuaGFzKGtleSkpIHtcblx0XHRcdGNvbnN0IHZhbHVlID0gdGhpcy5vbGRDYWNoZS5nZXQoa2V5KTtcblx0XHRcdHRoaXMub2xkQ2FjaGUuZGVsZXRlKGtleSk7XG5cdFx0XHR0aGlzLl9zZXQoa2V5LCB2YWx1ZSk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXHR9XG5cblx0c2V0KGtleSwgdmFsdWUpIHtcblx0XHRpZiAodGhpcy5jYWNoZS5oYXMoa2V5KSkge1xuXHRcdFx0dGhpcy5jYWNoZS5zZXQoa2V5LCB2YWx1ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX3NldChrZXksIHZhbHVlKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdGhhcyhrZXkpIHtcblx0XHRyZXR1cm4gdGhpcy5jYWNoZS5oYXMoa2V5KSB8fCB0aGlzLm9sZENhY2hlLmhhcyhrZXkpO1xuXHR9XG5cblx0cGVlayhrZXkpIHtcblx0XHRpZiAodGhpcy5jYWNoZS5oYXMoa2V5KSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY2FjaGUuZ2V0KGtleSk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMub2xkQ2FjaGUuaGFzKGtleSkpIHtcblx0XHRcdHJldHVybiB0aGlzLm9sZENhY2hlLmdldChrZXkpO1xuXHRcdH1cblx0fVxuXG5cdGRlbGV0ZShrZXkpIHtcblx0XHRjb25zdCBkZWxldGVkID0gdGhpcy5jYWNoZS5kZWxldGUoa2V5KTtcblx0XHRpZiAoZGVsZXRlZCkge1xuXHRcdFx0dGhpcy5fc2l6ZS0tO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLm9sZENhY2hlLmRlbGV0ZShrZXkpIHx8IGRlbGV0ZWQ7XG5cdH1cblxuXHRjbGVhcigpIHtcblx0XHR0aGlzLmNhY2hlLmNsZWFyKCk7XG5cdFx0dGhpcy5vbGRDYWNoZS5jbGVhcigpO1xuXHRcdHRoaXMuX3NpemUgPSAwO1xuXHR9XG5cblx0KiBrZXlzKCkge1xuXHRcdGZvciAoY29uc3QgW2tleV0gb2YgdGhpcykge1xuXHRcdFx0eWllbGQga2V5O1xuXHRcdH1cblx0fVxuXG5cdCogdmFsdWVzKCkge1xuXHRcdGZvciAoY29uc3QgWywgdmFsdWVdIG9mIHRoaXMpIHtcblx0XHRcdHlpZWxkIHZhbHVlO1xuXHRcdH1cblx0fVxuXG5cdCogW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG5cdFx0Zm9yIChjb25zdCBpdGVtIG9mIHRoaXMuY2FjaGUpIHtcblx0XHRcdHlpZWxkIGl0ZW07XG5cdFx0fVxuXG5cdFx0Zm9yIChjb25zdCBpdGVtIG9mIHRoaXMub2xkQ2FjaGUpIHtcblx0XHRcdGNvbnN0IFtrZXldID0gaXRlbTtcblx0XHRcdGlmICghdGhpcy5jYWNoZS5oYXMoa2V5KSkge1xuXHRcdFx0XHR5aWVsZCBpdGVtO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGdldCBzaXplKCkge1xuXHRcdGxldCBvbGRDYWNoZVNpemUgPSAwO1xuXHRcdGZvciAoY29uc3Qga2V5IG9mIHRoaXMub2xkQ2FjaGUua2V5cygpKSB7XG5cdFx0XHRpZiAoIXRoaXMuY2FjaGUuaGFzKGtleSkpIHtcblx0XHRcdFx0b2xkQ2FjaGVTaXplKys7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIE1hdGgubWluKHRoaXMuX3NpemUgKyBvbGRDYWNoZVNpemUsIHRoaXMubWF4U2l6ZSk7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBRdWlja0xSVTtcbiJdLCJuYW1lcyI6WyJRdWlja0xSVSIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIm1heFNpemUiLCJUeXBlRXJyb3IiLCJvbkV2aWN0aW9uIiwiY2FjaGUiLCJNYXAiLCJvbGRDYWNoZSIsIl9zaXplIiwiX3NldCIsImtleSIsInZhbHVlIiwic2V0IiwiZW50cmllcyIsImdldCIsImhhcyIsImRlbGV0ZSIsInBlZWsiLCJkZWxldGVkIiwiY2xlYXIiLCJrZXlzIiwidmFsdWVzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJpdGVtIiwic2l6ZSIsIm9sZENhY2hlU2l6ZSIsIk1hdGgiLCJtaW4iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/livekit-server-sdk/node_modules/quick-lru/index.js\n");

/***/ })

};
;